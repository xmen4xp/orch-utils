---
# SPDX-FileCopyrightText: 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

components:
  parameters:
    activeAlertsQueryFilter:
      description: Shows active alerts
      in: query
      name: active
      schema:
        default: true
        type: boolean
    alertDefinitionId:
      description: ID of an alert definition (UUID format)
      in: path
      name: alertDefinitionID
      required: true
      schema:
        format: uuid
        type: string
    alertsQueryFilter:
      description: Filters the alert definitions by name
      in: query
      name: alert
      schema:
        type: string
    appQueryFilter:
      description: Filters the alerts by application or deployment ID
      in: query
      name: app
      schema:
        type: string
    clusterQueryFilter:
      description: Filters the alerts by cluster ID
      in: query
      name: cluster
      schema:
        type: string
    hostQueryFilter:
      description: Filters the alerts by Host ID
      in: query
      name: host
      schema:
        type: string
    receiverId:
      description: ID of a receiver (UUID format)
      in: path
      name: receiverID
      required: true
      schema:
        format: uuid
        type: string
    renderedTemplateQueryParam:
      description: Specifies if template values will be rendered
      in: query
      name: rendered
      schema:
        default: false
        type: boolean
    suppressedAlertsQueryFilter:
      description: Shows suppressed alerts
      in: query
      name: suppressed
      schema:
        default: true
        type: boolean
  requestBodies:
    Createnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Post'
      description: Request used to create network.Network
      required: true
    Createnetwork.Network.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Status'
      description: Request used to create Status subresource of network.Network
    Createorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Post'
      description: Request used to create org.Org
      required: true
    Createorg.Org.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Status'
      description: Request used to create Status subresource of org.Org
    Createproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Post'
      description: Request used to create project.Project
      required: true
    Createproject.Project.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Status'
      description: Request used to create Status subresource of project.Project
  responses:
    "400":
      content:
        application/json:
          example:
            code: 400
            message: Bad Request
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Bad Request
    400-BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Object in payload is not properly formulated or not related to the method.
    401-Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Authentication information is missing or invalid.
    "404":
      content:
        application/json:
          example:
            code: 404
            message: Not Found
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Not Found
    404-NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: No resource is found at the URI.
    "409":
      content:
        application/json:
          example:
            code: 409
            message: Conflict
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Conflict
    409-Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request could not be processed in the current state of the resource.
    "415":
      content:
        application/json:
          example:
            code: 415
            message: Unsupported Media Type
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Unsupported Media Type
    "500":
      content:
        application/json:
          example:
            code: 500
            message: Internal Server Error
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Internal Server Error
    500-InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The provider is currently unable to handle the request due to an internal error
    501-NotImplemented:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The requested operation is not implemented.
    "503":
      content:
        application/json:
          example:
            code: 503
            message: Server Unavailable
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Service Unavailable
    DefaultResponse:
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
      description: Default response
    Getnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Get'
      description: Response returned back after getting network.Network object
    Getnetwork.Network.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.NamedLink'
      description: Response returned back after getting network.Network objects
    Getnetwork.Network.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.SingleLink'
      description: Response returned back after getting network.Network objects
    Getnetwork.Network.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Status'
      description: Response returned back after getting status subresource of network.Network object
    Getorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Get'
      description: Response returned back after getting org.Org object
    Getorg.Org.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.NamedLink'
      description: Response returned back after getting org.Org objects
    Getorg.Org.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.SingleLink'
      description: Response returned back after getting org.Org objects
    Getorg.Org.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Status'
      description: Response returned back after getting status subresource of org.Org object
    Getproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Get'
      description: Response returned back after getting project.Project object
    Getproject.Project.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.NamedLink'
      description: Response returned back after getting project.Project objects
    Getproject.Project.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.SingleLink'
      description: Response returned back after getting project.Project objects
    Getproject.Project.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Status'
      description: Response returned back after getting status subresource of project.Project object
    Listnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.List'
      description: Response returned back after getting network.Network objects
    Listorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.List'
      description: Response returned back after getting org.Org objects
    Listproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.List'
      description: Response returned back after getting project.Project objects
    NotFoundResponse:
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
      description: Not Found
  schemas:
    APIExtension:
      description: Details of API extension
      properties:
        name:
          description: Name of the API Extension.
          readOnly: true
          type: string
        token:
          description: Token for secure websocket connection between api-proxy and api-agent.
          readOnly: true
          type: string
      type: object
    AdminStatus:
      description: Represents the associated VirtualMachineInstance's state, either created (up state) or not (down state).
      properties:
        state:
          description: State information
          enum:
            - STATE_UP
            - STATE_DOWN
          format: enum
          type: string
      type: object
    Alert:
      properties:
        alertDefinitionId:
          format: uuid
          type: string
        annotations:
          additionalProperties:
            type: string
          type: object
        endsAt:
          format: date-time
          type: string
        fingerprint:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        startsAt:
          format: date-time
          type: string
        status:
          properties:
            state:
              enum:
                - suppressed
                - active
                - resolved
              type: string
          type: object
        updatedAt:
          format: date-time
          type: string
      type: object
    AlertDefinition:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        state:
          $ref: '#/components/schemas/StateDefinition'
        values:
          additionalProperties:
            type: string
          type: object
        version:
          type: integer
      type: object
    AlertDefinitionList:
      properties:
        alertDefinitions:
          items:
            $ref: '#/components/schemas/AlertDefinition'
          type: array
      type: object
    AlertDefinitionTemplate:
      properties:
        alert:
          type: string
        annotations:
          additionalProperties:
            type: string
          type: object
        expr:
          type: string
        for:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    AlertList:
      properties:
        alerts:
          items:
            $ref: '#/components/schemas/Alert'
          type: array
      type: object
    App:
      description: Details of application.
      properties:
        id:
          description: Id of the app (same as Fleet bundle name) which is, concatenated from name and deploy_id (uid which comes from k8s).
          readOnly: true
          type: string
        name:
          description: The deployment package app name.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    AppEndpoint:
      description: Represents an endpoint for accessing the application outside of a cluster.
      properties:
        endpointStatus:
          $ref: '#/components/schemas/EndpointStatus'
        fqdns:
          description: Fully qualified domain name (FQDN) for external access.
          items:
            $ref: '#/components/schemas/Fqdn'
          readOnly: true
          type: array
        id:
          description: Endpoint object UID (e.g. service or ingress UID)
          format: uuid
          readOnly: true
          type: string
        name:
          description: Endpoint name
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          readOnly: true
          type: string
        ports:
          description: List of ports exposed by a service for external access
          items:
            $ref: '#/components/schemas/Port'
          readOnly: true
          type: array
      type: object
    AppWorkload:
      description: AppWorkload a high-level abstraction for representing different types of application workloads. The application workloads can be virtual machine-based or container-based.
      properties:
        createTime:
          description: The time when the workload is created.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Workload UUID
          format: uuid
          type: string
        name:
          description: Workload name
          maxLength: 253
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$
          type: string
        namespace:
          description: Namespace where the workload is created.
          readOnly: true
          type: string
        pod:
          $ref: '#/components/schemas/Pod'
        type:
          description: Application workload type, e.g. virtual machine and pod.
          enum:
            - TYPE_VIRTUAL_MACHINE
            - TYPE_POD
          format: enum
          type: string
        virtualMachine:
          $ref: '#/components/schemas/VirtualMachine'
        workloadReady:
          description: Ready status to determines if a workload is fully functional or not.
          readOnly: true
          type: boolean
      required:
        - id
        - name
      type: object
    Application:
      description: Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
      properties:
        chartName:
          description: Helm chart name.
          maxLength: 200
          minLength: 1
          pattern: ^[0-9a-z-/]*$
          type: string
        chartVersion:
          description: Helm chart version.
          maxLength: 53
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,51}[a-z0-9]{0,1}$
          type: string
        createTime:
          description: The creation time of the application.
          format: date-time
          readOnly: true
          type: string
        defaultProfileName:
          description: Name of the profile to be used by default when deploying this application. If at least one profile is available, this field must be set.
          type: string
        description:
          description: Description of the application. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the application. When specified, it must be unique among all applications within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        helmRegistryName:
          description: ID of the project's registry where the Helm chart of the application is available for download.
          type: string
        ignoredResources:
          description: List of Kubernetes resources that must be ignored during the application deployment.
          items:
            $ref: '#/components/schemas/ResourceReference'
          type: array
        imageRegistryName:
          description: ID of the project's registry where the Docker image of the application is available for download.
          type: string
        kind:
          description: Field designating whether the application is a system add-on, system extension, or a normal application.
          enum:
            - KIND_NORMAL
            - KIND_EXTENSION
            - KIND_ADDON
          format: enum
          type: string
        name:
          description: Name is a human readable unique identifier for the application and must be unique for all applications of a given project. Used in network URIs.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
        profiles:
          description: Set of profiles that can be used when deploying the application.
          items:
            $ref: '#/components/schemas/Profile'
          type: array
        updateTime:
          description: The last update time of the application.
          format: date-time
          readOnly: true
          type: string
        version:
          description: Version of the application. Used in combination with the name to identify a unique application within a project.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
        - chartName
        - chartVersion
        - helmRegistryName
      type: object
    ApplicationDependency:
      description: ApplicationDependency represents the dependency of one application on another within the context of a deployment package. This dependency is specified as the name of the application that has the dependency, and the name of the application that is the dependency.
      properties:
        name:
          description: Name of the application that has the dependency on the other.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
        requires:
          description: Name of the application that is required by the other.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - requires
      type: object
    ApplicationReference:
      description: ApplicationReference represents a reference to an application by its name and its version.
      properties:
        name:
          description: Name of the referenced application.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        version:
          description: Version of the referenced application.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
      type: object
    Artifact:
      description: Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be used by multiple deployment packages.
      properties:
        artifact:
          description: Raw byte content of the artifact encoded as base64. The limits refer to the number of raw bytes.
          format: byte
          type: string
        createTime:
          description: The creation time of the artifact.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the artifact. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the artifact. When specified, it must be unique among all artifacts within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        mimeType:
          description: Artifact's MIME type. Only text/plain, application/json, application/yaml, image/png, and image/jpeg are allowed at this time. MIME types are defined and standardized in IETF's RFC 6838.
          maxLength: 40
          minLength: 1
          pattern: ^(text/plain)$|^(application/json)$|^(application/yaml)$|^(image/png)$|^(image/jpeg)$
          type: string
        name:
          description: Name is a human-readable unique identifier for the artifact and must be unique for all artifacts within a project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        updateTime:
          description: The last update time of the artifact.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
        - mimeType
        - artifact
      type: object
    ArtifactReference:
      description: ArtifactReference serves as a reference to an artifact, together with the artifact's purpose within a deployment package.
      properties:
        name:
          description: Name of the artifact.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        purpose:
          description: Purpose of the artifact, e.g. icon, thumbnail, Grafana dashboard, etc.
          maxLength: 20
          pattern: ^\PC*$
          type: string
      required:
        - name
        - purpose
      type: object
    Cluster:
      description: Details of cluster.
      properties:
        apps:
          description: Apps has per-app details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        id:
          description: ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
          readOnly: true
          type: string
        name:
          description: Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    ClusterDetailInfo:
      properties:
        controlPlaneReady:
          $ref: '#/components/schemas/GenericStatus'
        infrastructureReady:
          $ref: '#/components/schemas/GenericStatus'
        kubernetesVersion:
          type: string
        labels:
          type: object
        lifecyclePhase:
          $ref: '#/components/schemas/GenericStatus'
        name:
          type: string
        nodeHealth:
          $ref: '#/components/schemas/GenericStatus'
        nodes:
          items:
            $ref: '#/components/schemas/NodeInfo'
          type: array
        providerStatus:
          $ref: '#/components/schemas/GenericStatus'
        template:
          type: string
      type: object
    ClusterInfo:
      properties:
        controlPlaneReady:
          $ref: '#/components/schemas/GenericStatus'
        infrastructureReady:
          $ref: '#/components/schemas/GenericStatus'
        kubernetesVersion:
          type: string
        labels:
          type: object
        lifecyclePhase:
          $ref: '#/components/schemas/GenericStatus'
        name:
          type: string
        nodeHealth:
          $ref: '#/components/schemas/GenericStatus'
        nodeQuantity:
          example: 1
          maximum: 100
          minimum: 0
          type: integer
        providerStatus:
          $ref: '#/components/schemas/GenericStatus'
      type: object
    ClusterLabels:
      properties:
        labels:
          additionalProperties:
            description: The pattern for the label values. Label key patterns are validated as part of the request handler
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Labels are key/value pairs that need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
    ClusterSpec:
      properties:
        labels:
          additionalProperties:
            description: The pattern for the label values. Label key patterns are validated as part of the request handler.
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Labels are key/value pairs that need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
        name:
          maxLength: 63
          pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/NodeSpec'
          type: array
        template:
          maxLength: 63
          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      required:
        - nodes
      type: object
    ClusterSummary:
      properties:
        error:
          description: The number of clusters that are in error state.
          format: int32
          type: integer
        inProgress:
          description: The number of clusters that are in progess state (provisioning/deleting).
          format: int32
          type: integer
        ready:
          description: The number of clusters that are ready.
          format: int32
          type: integer
        totalClusters:
          description: The total number of clusters.
          format: int32
          type: integer
        unknown:
          description: The number of clusters that are in unknown state.
          format: int32
          type: integer
      required:
        - totalClusters
        - ready
        - error
        - inProgress
        - unknown
      type: object
    ClusterTemplateInfo:
      properties:
        name:
          description: Name of the template
          example: baseline
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
        version:
          description: Cluster template version in the format of 'vX.Y.Z'
          example: v0.1.0
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-dev)?$
          type: string
      required:
        - name
        - version
      type: object
    Container:
      description: Represents a container resource.
      properties:
        imageName:
          description: image_name container image name
          readOnly: true
          type: string
        name:
          description: Container name
          maxLength: 63
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$
          type: string
        restartCount:
          description: Number of times that a container is restarted.
          format: int32
          readOnly: true
          type: integer
        status:
          $ref: '#/components/schemas/ContainerStatus'
      required:
        - name
      type: object
    ContainerStateRunning:
      description: Running status of a container.
      type: object
    ContainerStateTerminated:
      description: Termination status of a container.
      properties:
        exitCode:
          description: Exit code of the termination status.
          format: int32
          readOnly: true
          type: integer
        message:
          description: Message of the termination status.
          readOnly: true
          type: string
        reason:
          description: Reason of the termination.
          readOnly: true
          type: string
      type: object
    ContainerStateWaiting:
      description: Waiting status of a container including the reason and message.
      properties:
        message:
          description: Message of the waiting status.
          readOnly: true
          type: string
        reason:
          description: Reason of the waiting status.
          readOnly: true
          type: string
      type: object
    ContainerStatus:
      description: ContainerStatus status of a container
      properties:
        containerStateRunning:
          $ref: '#/components/schemas/ContainerStateRunning'
        containerStateTerminated:
          $ref: '#/components/schemas/ContainerStateTerminated'
        containerStateWaiting:
          $ref: '#/components/schemas/ContainerStateWaiting'
      type: object
    CreateApplicationResponse:
      description: Response message for the CreateApplication method.
      properties:
        application:
          $ref: '#/components/schemas/Application'
      required:
        - application
      type: object
    CreateArtifactResponse:
      description: Response message for the CreateArtifact method.
      properties:
        artifact:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact
      type: object
    CreateDeploymentPackageResponse:
      description: Response message for the CreateDeploymentPackage method.
      properties:
        deploymentPackage:
          $ref: '#/components/schemas/DeploymentPackage'
      required:
        - deploymentPackage
      type: object
    CreateDeploymentResponse:
      description: Response message for the CreateDeployment method.
      properties:
        deploymentId:
          description: Returns the new Deployment Id.
          type: string
      required:
        - deploymentId
      type: object
    CreateRegistryResponse:
      description: Response message for the CreateRegistry method.
      properties:
        registry:
          $ref: '#/components/schemas/Registry'
      required:
        - registry
      type: object
    DefaultTemplateInfo:
      properties:
        name:
          description: Name of the template. Not required when setting the default, is available in GET /v1/templates.
          example: baseline
          maxLength: 50
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
        version:
          description: Template version. If set to empty, the latest version will be used as default.
          example: v0.1.0
          maxLength: 63
          pattern: ^$|^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
          type: string
      required:
        - version
      type: object
    DeleteHostResponse:
      description: Reponse message for DeleteHost.
      type: object
    DeleteInstanceResponse:
      description: Response message for DeleteInstance.
      type: object
    DeleteLocalAccountResponse:
      description: Response message for DeleteLocalAccount.
      type: object
    DeleteOperatingSystemResponse:
      description: Response message for DeleteOperatingSystem.
      type: object
    DeletePodResponse:
      description: Response message for the DeletePod method.
      type: object
    DeleteProviderResponse:
      description: Response message for DeleteProvider.
      type: object
    DeleteRegionResponse:
      description: Response message for DeleteRegion.
      type: object
    DeleteRepeatedScheduleResponse:
      description: Response message for DeleteRepeatedSchedule.
      type: object
    DeleteSingleScheduleResponse:
      description: Response message for DeleteSingleSchedule.
      type: object
    DeleteSiteResponse:
      description: Response message for DeleteSite.
      type: object
    DeleteTelemetryLogsGroupResponse:
      description: Response message for DeleteTelemetryLogsGroup.
      type: object
    DeleteTelemetryLogsProfileResponse:
      description: Response message for DeleteTelemetryLogsProfile.
      type: object
    DeleteTelemetryMetricsGroupResponse:
      description: Response message for DeleteTelemetryMetricsGroup.
      type: object
    DeleteTelemetryMetricsProfileResponse:
      description: Response message for DeleteTelemetryMetricsProfile.
      type: object
    DeleteWorkloadMemberResponse:
      description: Response message for DeleteWorkloadMember.
      type: object
    DeleteWorkloadResponse:
      description: Response message for DeleteWorkload.
      type: object
    Deployment:
      description: Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
      properties:
        allAppTargetClusters:
          $ref: '#/components/schemas/TargetClusters'
        appName:
          description: The deployment package name to deploy from the catalog.
          type: string
        appVersion:
          description: The version of the deployment package.
          type: string
        apps:
          description: Application details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        createTime:
          description: The creation time of the deployment.
          format: date-time
          readOnly: true
          type: string
        defaultProfileName:
          description: DEPRECATED - will remove in v2. Name of the default DeploymentProfile to use when deploying this DeploymentPackage. If no profileName is provided, use defaultProfileName from deployment package.
          readOnly: true
          type: string
        deployId:
          description: The id of the deployment.
          readOnly: true
          type: string
        deploymentType:
          description: The deployment type for the target cluster deployment can be either auto-scaling or targeted. In Auto-scaling type, the application will be automatically deployed on all the clusters which match the Target cluster label. In Targeted type, the user has to select among pre created clusters to deploy the application.
          type: string
        displayName:
          description: Deployment display name.
          type: string
        name:
          description: Deployment name (unique string assigned by Orchestrator).
          readOnly: true
          type: string
        networkName:
          description: network_name is the name of the interconnect network that deployment be part of
          type: string
        overrideValues:
          description: The Override values can be used to override any of the base profile values based on Deployment scenario.
          items:
            $ref: '#/components/schemas/OverrideValues'
          type: array
        profileName:
          description: The selected profile name to be used for the base Helm values of the different applications in the deployment package
          type: string
        publisherName:
          description: DEPRECATED - will remove in v2. Publisher of the deployment package.
          type: string
        serviceExports:
          items:
            $ref: '#/components/schemas/ServiceExport'
          type: array
        status:
          $ref: '#/components/schemas/Deployment_Status'
        targetClusters:
          description: Cluster labels on which we want to deploy the application.
          items:
            $ref: '#/components/schemas/TargetClusters'
          type: array
      required:
        - appName
        - appVersion
      type: object
    Deployment_Status:
      description: Status has details of the deployment.
      properties:
        message:
          readOnly: true
          type: string
        state:
          enum:
            - UNKNOWN
            - RUNNING
            - DOWN
            - INTERNAL_ERROR
            - DEPLOYING
            - UPDATING
            - TERMINATING
            - ERROR
            - NO_TARGET_CLUSTERS
          format: enum
          readOnly: true
          type: string
        summary:
          $ref: '#/components/schemas/Summary'
      type: object
    DeploymentInstancesCluster:
      properties:
        apps:
          description: Apps has per-app details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        deploymentDisplayName:
          description: Deployment display name.
          type: string
        deploymentName:
          description: Deployment name (unique string assigned by Orchestrator).
          readOnly: true
          type: string
        deploymentUid:
          description: Deployment CR UID.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    DeploymentPackage:
      description: DeploymentPackage represents a collection of applications (referenced by their name and a version) that are deployed together. The package can define one or more deployment profiles that specify the individual application profiles to be used when deploying each application. If applications need to be deployed in a particular order, the package can also define any startup dependencies between its constituent applications as a set of dependency graph edges. The deployment package can also refer to a set of artifacts used for miscellaneous purposes, e.g. a thumbnail, icon, or a Grafana extension.
      properties:
        applicationDependencies:
          description: Optional set of application deployment dependencies, expressed as (name, requires) pairs of edges in the deployment order dependency graph.
          items:
            $ref: '#/components/schemas/ApplicationDependency'
          type: array
        applicationReferences:
          description: List of applications comprising this deployment package. Expressed as (name, version) pairs.
          items:
            $ref: '#/components/schemas/ApplicationReference'
          type: array
        artifacts:
          description: Optional list of artifacts required for displaying or deploying this package. For example, icon or thumbnail artifacts can be used by the UI; Grafana\* dashboard definitions can be used by the deployment manager.
          items:
            $ref: '#/components/schemas/ArtifactReference'
          maxItems: 100
          type: array
        createTime:
          description: The creation time of the deployment package.
          format: date-time
          readOnly: true
          type: string
        defaultNamespaces:
          additionalProperties:
            type: string
          description: Optional map of application-to-namespace bindings to be used as a default when deploying the applications that comprise the package. If a namespace is not defined in the set of "namespaces" in this Deployment Package, it will be inferred that it is a simple namespace with no predefined labels or annotations.
          type: object
        defaultProfileName:
          description: Name of the default deployment profile to be used by default when deploying this package.
          type: string
        description:
          description: Description of the deployment package. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the deployment package. When specified, it must be unique among all packages within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        extensions:
          description: Optional list of API and UI extensions.
          items:
            $ref: '#/components/schemas/APIExtension'
          maxItems: 100
          type: array
        forbidsMultipleDeployments:
          description: Optional flag indicating whether multiple deployments of this package are forbidden within the same realm.
          type: boolean
        isDeployed:
          description: Flag indicating whether the deployment package has been deployed. The mutability of the deployment package entity can be limited when this flag is true. For example, one may not be able to update when an application is removed from a package after it has been marked as deployed.
          type: boolean
        isVisible:
          description: Flag indicating whether the deployment package is visible in the UI. Some deployment packages can be classified as auxiliary platform extensions and therefore are to be deployed indirectly only when specified as deployment requirements, rather than directly by the platform operator.
          type: boolean
        kind:
          description: Field designating whether the deployment package is a system add-on, system extension, or a normal package.
          enum:
            - KIND_NORMAL
            - KIND_EXTENSION
            - KIND_ADDON
          format: enum
          type: string
        name:
          description: Name is a human-readable unique identifier for the deployment package and must be unique for all packages of a given project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        namespaces:
          description: Namespace definitions to be created before resources are deployed. This allows complex namespaces to be defined with predefined labels and annotations. If not defined, simple namespaces will be created as needed.
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
        profiles:
          description: Set of deployment profiles to choose from when deploying this package.
          items:
            $ref: '#/components/schemas/DeploymentProfile'
          type: array
        updateTime:
          description: The last update time of the deployment package.
          format: date-time
          readOnly: true
          type: string
        version:
          description: Version of the deployment package.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
        - applicationReferences
        - extensions
        - artifacts
      type: object
    DeploymentProfile:
      description: DeploymentProfile specifies which application profiles will be used for deployment of which applications.
      properties:
        applicationProfiles:
          additionalProperties:
            type: string
          description: Application profiles map application names to the names of its profile, to be used when deploying the application as part of the deployment package together with the deployment profile.
          type: object
        createTime:
          description: The creation time of the deployment profile.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the deployment profile. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the registry. When specified, it must be unique among all profiles of a given package. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        name:
          description: Name is a human-readable unique identifier for the profile and must be unique for all profiles of a given deployment package.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        updateTime:
          description: The last update time of the deployment profile.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
        - applicationProfiles
      type: object
    DeploymentRequirement:
      description: DeploymentRequirement is a reference to the deployment package that must be deployed first, as a requirement for an application to be deployed.
      properties:
        deploymentProfileName:
          description: Optional name of the deployment profile to be used. When not provided, the default deployment profile will be used.
          type: string
        name:
          description: Name of the required deployment package.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        version:
          description: Version of the required deployment package.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
      type: object
    Email:
      type: string
    EmailConfig:
      properties:
        from:
          $ref: '#/components/schemas/Email'
        mailServer:
          type: string
        to:
          properties:
            allowed:
              $ref: '#/components/schemas/EmailRecipientList'
            enabled:
              $ref: '#/components/schemas/EmailRecipientList'
          type: object
      type: object
    EmailConfigTo:
      properties:
        to:
          properties:
            enabled:
              $ref: '#/components/schemas/EmailRecipientList'
          required:
            - enabled
          type: object
      required:
        - to
      type: object
    EmailRecipientList:
      items:
        $ref: '#/components/schemas/Email'
      type: array
    Endpoint:
      description: Endpoint represents an application service endpoint.
      properties:
        appName:
          description: The name of the application providing this endpoint.
          maxLength: 40
          type: string
        authType:
          description: Authentication type expected by the endpoint.
          maxLength: 16
          pattern: ^[a-z]{0,16}$
          type: string
        externalPath:
          description: Externally accessible path to the endpoint.
          maxLength: 128
          minLength: 1
          type: string
        internalPath:
          description: Internally accessible path to the endpoint.
          maxLength: 128
          minLength: 1
          type: string
        scheme:
          description: Protocol scheme provided by the endpoint.
          maxLength: 32
          pattern: ^([a-z][a-z0-9-]{0,30}[a-z0-9]){0,1}$
          type: string
        serviceName:
          description: The name of the service hosted by the endpoint.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
      required:
        - serviceName
        - externalPath
        - internalPath
        - scheme
        - authType
      type: object
    EndpointStatus:
      description: Status of the endpoint.
      properties:
        state:
          description: Endpoint state, either Ready or NotReady.
          enum:
            - STATE_READY
            - STATE_NOT_READY
          format: enum
          readOnly: true
          type: string
      type: object
    Fqdn:
      description: Fully qualified domain name.
      properties:
        fqdn:
          format: hostname
          type: string
      type: object
    GenericStatus:
      description: A generic status object.
      properties:
        indicator:
          $ref: '#/components/schemas/StatusIndicator'
        message:
          description: A human-readable status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        timestamp:
          description: A Unix, UTC timestamp when the status was last updated.
          format: uint64
          readOnly: true
          type: integer
      readOnly: true
      required:
        - message
        - indicator
        - timestamp
      type: object
    GetAPIExtensionResponse:
      description: Response message for GetAPIExtension method.
      properties:
        apiExtension:
          $ref: '#/components/schemas/APIExtension'
      required:
        - apiExtension
      type: object
    GetApplicationReferenceCountResponse:
      description: Response message for the GetApplicationReferenceCount method.
      properties:
        referenceCount:
          format: uint32
          type: integer
      required:
        - referenceCount
      type: object
    GetApplicationResponse:
      description: Response message for the GetApplication method.
      properties:
        application:
          $ref: '#/components/schemas/Application'
      required:
        - application
      type: object
    GetApplicationVersionsResponse:
      description: Response message for the GetApplication method.
      properties:
        application:
          description: A list of applications with the same project and name.
          items:
            $ref: '#/components/schemas/Application'
          type: array
      required:
        - application
      type: object
    GetArtifactResponse:
      description: Response message for the GetArtifact method.
      properties:
        artifact:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact
      type: object
    GetClusterResponse:
      description: Response message for GetCluster method.
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
      type: object
    GetDeploymentPackageResponse:
      description: Response message for the GetDeploymentPackage method.
      properties:
        deploymentPackage:
          $ref: '#/components/schemas/DeploymentPackage'
      required:
        - deploymentPackage
      type: object
    GetDeploymentPackageVersionsResponse:
      description: Response message for the GetDeploymentPackageVersions method.
      properties:
        deploymentPackages:
          description: A list of DeploymentPackages with the same project and name.
          items:
            $ref: '#/components/schemas/DeploymentPackage'
          type: array
      required:
        - deploymentPackages
      type: object
    GetDeploymentResponse:
      description: Response message for the GetDeployment method.
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      required:
        - deployment
      type: object
    GetDeploymentsStatusResponse:
      description: Response message for the GetDeploymentsStatus method.
      properties:
        deploying:
          format: int32
          readOnly: true
          type: integer
        down:
          format: int32
          readOnly: true
          type: integer
        error:
          format: int32
          readOnly: true
          type: integer
        running:
          format: int32
          readOnly: true
          type: integer
        terminating:
          format: int32
          readOnly: true
          type: integer
        total:
          format: int32
          readOnly: true
          type: integer
        unknown:
          format: int32
          readOnly: true
          type: integer
        updating:
          format: int32
          readOnly: true
          type: integer
      type: object
    GetHostSummaryResponse:
      description: Summary of the hosts status.
      properties:
        error:
          description: The total number of hosts presenting an Error.
          format: uint32
          readOnly: true
          type: integer
        running:
          description: The total number of hosts in Running state.
          format: uint32
          readOnly: true
          type: integer
        total:
          description: The total number of hosts.
          format: uint32
          readOnly: true
          type: integer
        unallocated:
          description: The total number of hosts without a site.
          format: uint32
          readOnly: true
          type: integer
      type: object
    GetRegistryResponse:
      description: Response message for the GetRegistry method.
      properties:
        registry:
          $ref: '#/components/schemas/Registry'
      required:
        - registry
      type: object
    GetVNCResponse:
      description: Response message for the GetVNC method.
      properties:
        address:
          type: string
      required:
        - address
      type: object
    GoogleProtobufAny:
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
      properties:
        '@type':
          description: The type of the serialized message.
          type: string
      type: object
    HostRegister:
      description: Message to register a Host.
      properties:
        autoOnboard:
          description: Flag ot signal to automatically onboard the host.
          type: boolean
        name:
          description: The host name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        serialNumber:
          description: The host serial number.
          pattern: ^([A-Za-z0-9]{5,20})?$
          type: string
        uuid:
          description: The host UUID.
          maxLength: 36
          pattern: ^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
      type: object
    HostResource:
      description: A Host resource.
      properties:
        biosReleaseDate:
          description: BIOS Release Date.
          readOnly: true
          type: string
        biosVendor:
          description: BIOS Vendor.
          readOnly: true
          type: string
        biosVersion:
          description: BIOS Version.
          readOnly: true
          type: string
        bmcIp:
          description: BMC IP address, such as "192.0.0.1".
          readOnly: true
          type: string
        bmcKind:
          description: Kind of BMC.
          enum:
            - BAREMETAL_CONTROLLER_KIND_NONE
            - BAREMETAL_CONTROLLER_KIND_IPMI
            - BAREMETAL_CONTROLLER_KIND_VPRO
            - BAREMETAL_CONTROLLER_KIND_PDU
          format: enum
          readOnly: true
          type: string
        cpuArchitecture:
          description: Architecture of the CPU model, e.g. x86_64.
          readOnly: true
          type: string
        cpuCapabilities:
          description: String list of all CPU capabilities (possibly JSON).
          readOnly: true
          type: string
        cpuCores:
          description: Number of CPU cores.
          format: uint32
          readOnly: true
          type: integer
        cpuModel:
          description: CPU model of the Host.
          readOnly: true
          type: string
        cpuSockets:
          description: Number of physical CPU sockets.
          format: uint32
          readOnly: true
          type: integer
        cpuThreads:
          description: Total Number of threads supported by the CPU.
          format: uint32
          readOnly: true
          type: integer
        cpuTopology:
          description: JSON field storing the CPU topology, refer to HDA/HRM docs for the JSON schema.
          readOnly: true
          type: string
        currentPowerState:
          description: Current power state of the host
          enum:
            - POWER_STATE_ERROR
            - POWER_STATE_ON
            - POWER_STATE_OFF
          format: enum
          readOnly: true
          type: string
        currentState:
          description: The current state of the Host.
          enum:
            - HOST_STATE_DELETED
            - HOST_STATE_ONBOARDED
            - HOST_STATE_UNTRUSTED
            - HOST_STATE_REGISTERED
          format: enum
          readOnly: true
          type: string
        desiredPowerState:
          description: Desired power state of the host
          enum:
            - POWER_STATE_ERROR
            - POWER_STATE_ON
            - POWER_STATE_OFF
          format: enum
          type: string
        desiredState:
          description: The desired state of the Host.
          enum:
            - HOST_STATE_DELETED
            - HOST_STATE_ONBOARDED
            - HOST_STATE_UNTRUSTED
            - HOST_STATE_REGISTERED
          format: enum
          readOnly: true
          type: string
        hostGpus:
          description: Back-reference to attached host GPU resources.
          items:
            $ref: '#/components/schemas/HostgpuResource'
          readOnly: true
          type: array
        hostNics:
          description: Back-reference to attached host NIC resources.
          items:
            $ref: '#/components/schemas/HostnicResource'
          readOnly: true
          type: array
        hostStatus:
          description: textual message that describes the runtime status of Host. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        hostStatusIndicator:
          description: Indicates interpretation of host_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        hostStatusTimestamp:
          description: UTC timestamp when host_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        hostStorages:
          description: Back-reference to attached host storage resources.
          items:
            $ref: '#/components/schemas/HoststorageResource'
          readOnly: true
          type: array
        hostUsbs:
          description: Back-reference to attached host USB resources.
          items:
            $ref: '#/components/schemas/HostusbResource'
          readOnly: true
          type: array
        hostname:
          description: Hostname.
          readOnly: true
          type: string
        inheritedMetadata:
          description: The metadata inherited by the host, represented by a list of key:value pairs, rendered by location and logical structures.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        instance:
          $ref: '#/components/schemas/InstanceResource'
        memoryBytes:
          description: Quantity of memory (RAM) in the system in bytes.
          readOnly: true
          type: string
        metadata:
          description: The metadata associated with the host, represented by a list of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          maxItems: 100
          type: array
        name:
          description: The host name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        note:
          description: The note associated with the host.
          maxLength: 512
          minLength: 1
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          readOnly: true
          type: string
        onboardingStatus:
          description: textual message that describes the onboarding status of Host. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        onboardingStatusIndicator:
          description: Indicates interpretation of onboarding_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        onboardingStatusTimestamp:
          description: UTC timestamp when onboarding_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        productName:
          description: System Product Name.
          readOnly: true
          type: string
        provider:
          $ref: '#/components/schemas/ProviderResource'
        registrationStatus:
          description: textual message that describes the onboarding status of Host. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        registrationStatusIndicator:
          description: Indicates interpretation of registration_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        registrationStatusTimestamp:
          description: UTC timestamp when registration_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        resourceId:
          description: Resource ID, generated on Create.
          maxLength: 13
          pattern: ^host-[0-9a-f]{8}$
          readOnly: true
          type: string
        serialNumber:
          description: SMBIOS device serial number.
          readOnly: true
          type: string
        site:
          $ref: '#/components/schemas/SiteResource'
        siteId:
          description: The site where the host is located.
          maxLength: 13
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        uuid:
          description: The host UUID identifier; UUID is unique and immutable.
          maxLength: 36
          pattern: ^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
      required:
        - name
      type: object
    HostgpuResource:
      description: The set of available host GPU cards.
      properties:
        capabilities:
          description: The features of this GPU device, comma separated.
          items:
            type: string
          readOnly: true
          type: array
        description:
          description: The human-readable GPU device description.
          readOnly: true
          type: string
        deviceName:
          description: GPU name as reported by OS.
          readOnly: true
          type: string
        pciId:
          description: The GPU device PCI identifier.
          readOnly: true
          type: string
        product:
          description: The GPU device model.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        vendor:
          description: The GPU device vendor.
          readOnly: true
          type: string
      type: object
    HostnicResource:
      description: The set of available host interfaces.
      properties:
        bmcInterface:
          description: Whether this is a bmc interface or not.
          readOnly: true
          type: boolean
        deviceName:
          description: The device name (OS provided, like eth0, enp1s0, etc.).
          readOnly: true
          type: string
        ipaddresses:
          description: The interface's IP address list.
          items:
            $ref: '#/components/schemas/IPAddressResource'
          readOnly: true
          type: array
        linkState:
          $ref: '#/components/schemas/NetworkInterfaceLinkState'
        macAddr:
          description: The interface MAC address.
          readOnly: true
          type: string
        mtu:
          description: Maximum transmission unit of the interface.
          format: uint32
          readOnly: true
          type: integer
        pciIdentifier:
          description: PCI identifier string for this network interface.
          readOnly: true
          type: string
        sriovEnabled:
          description: If the interface has SRIOV enabled.
          readOnly: true
          type: boolean
        sriovVfsNum:
          description: The number of VFs currently provisioned on the interface, if SR-IOV is supported.
          format: uint32
          readOnly: true
          type: integer
        sriovVfsTotal:
          description: The maximum number of VFs the interface supports, if SR-IOV is supported.
          format: uint32
          readOnly: true
          type: integer
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    HoststorageResource:
      description: The set of available host storage capabilities.
      properties:
        capacityBytes:
          description: The storage device Capacity (size) in bytes.
          readOnly: true
          type: string
        deviceName:
          description: The storage device device name (OS provided, like sda, sdb, etc.)
          readOnly: true
          type: string
        model:
          description: The storage device model.
          readOnly: true
          type: string
        serial:
          description: The storage device unique serial number.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        vendor:
          description: The Storage device vendor.
          readOnly: true
          type: string
        wwid:
          description: The storage device unique identifier.
          readOnly: true
          type: string
      type: object
    HostusbResource:
      description: The set of host USB resources.
      properties:
        addr:
          description: USB Device number assigned by OS.
          format: uint32
          readOnly: true
          type: integer
        bus:
          description: Bus number of device connected with.
          format: uint32
          readOnly: true
          type: integer
        class:
          description: class defined by USB-IF.
          readOnly: true
          type: string
        deviceName:
          description: the OS-provided device name.
          readOnly: true
          type: string
        idProduct:
          description: Hexadecimal number representing ID of the USB device product.
          readOnly: true
          type: string
        idVendor:
          description: Hexadecimal number representing ID of the USB device vendor.
          readOnly: true
          type: string
        serial:
          description: Serial number of device.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    HttpError:
      properties:
        code:
          maximum: 600
          minimum: 400
          type: integer
        message:
          type: string
      required:
        - message
        - code
      type: object
    IPAddressResource:
      properties:
        address:
          description: CIDR representation of the IP address.
          readOnly: true
          type: string
        configMethod:
          description: Specifies how the IP address is configured.
          enum:
            - IP_ADDRESS_CONFIG_METHOD_STATIC
            - IP_ADDRESS_CONFIG_METHOD_DYNAMIC
          format: enum
          readOnly: true
          type: string
        resourceId:
          description: Resource ID, generated by Inventory on Create
          maxLength: 15
          pattern: ^ipaddr-[0-9a-f]{8}$
          readOnly: true
          type: string
        status:
          description: The status of the IP address.
          enum:
            - IP_ADDRESS_STATUS_ASSIGNMENT_ERROR
            - IP_ADDRESS_STATUS_ASSIGNED
            - IP_ADDRESS_STATUS_CONFIGURATION_ERROR
            - IP_ADDRESS_STATUS_CONFIGURED
            - IP_ADDRESS_STATUS_RELEASED
            - IP_ADDRESS_STATUS_ERROR
          format: enum
          readOnly: true
          type: string
        statusDetail:
          description: User-friendly status to provide details about the resource state
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    InstanceResource:
      description: InstanceResource describes an instantiated OS install, running on either a host or hypervisor.
      properties:
        currentOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        currentState:
          description: The Instance current state.
          enum:
            - INSTANCE_STATE_RUNNING
            - INSTANCE_STATE_DELETED
            - INSTANCE_STATE_UNTRUSTED
          format: enum
          readOnly: true
          type: string
        desiredOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        desiredState:
          description: The Instance desired state.
          enum:
            - INSTANCE_STATE_RUNNING
            - INSTANCE_STATE_DELETED
            - INSTANCE_STATE_UNTRUSTED
          format: enum
          readOnly: true
          type: string
        host:
          $ref: '#/components/schemas/HostResource'
        hostID:
          description: The host's unique identifier associated with the instance.
          maxLength: 13
          pattern: ^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        instanceID:
          description: Deprecated, The instance's unique identifier. Alias of resourceID.
          maxLength: 13
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          type: string
        instanceStatus:
          description: textual message that describes the current instance status. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        instanceStatusIndicator:
          description: Indicates interpretation of instance_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        instanceStatusTimestamp:
          description: UTC timestamp when instance_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        kind:
          description: Kind of resource. Frequently tied to Provider.
          enum:
            - INSTANCE_KIND_METAL
          format: enum
          type: string
        localAccountID:
          description: The unique identifier of local account will be associated with the instance.
          maxLength: 21
          pattern: ^localaccount-[0-9a-f]{8}$
          type: string
          writeOnly: true
        localaccount:
          $ref: '#/components/schemas/LocalAccountResource'
        name:
          description: The instance's human-readable name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        os:
          $ref: '#/components/schemas/OperatingSystemResource'
        osID:
          description: The unique identifier of OS resource that must be installed on the instance.
          maxLength: 11
          pattern: ^os-[0-9a-f]{8}$
          type: string
          writeOnly: true
        provisioningStatus:
          description: textual message that describes the provisioning status of Instance. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        provisioningStatusIndicator:
          description: Indicates interpretation of provisioning_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        provisioningStatusTimestamp:
          description: UTC timestamp when provisioning_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        resourceId:
          description: Resource ID, generated on Create.
          maxLength: 13
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          description: Select to enable security features such as Secure Boot (SB) and Full Disk Encryption (FDE).
          enum:
            - SECURITY_FEATURE_NONE
            - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
          format: enum
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        trustedAttestationStatus:
          description: textual message that describes the trusted_attestation status of Instance. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        trustedAttestationStatusIndicator:
          description: Indicates interpretation of trusted_attestation_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        trustedAttestationStatusTimestamp:
          description: UTC timestamp when trusted_attestation_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        updateStatus:
          description: textual message that describes the update status of Instance. Set by RMs only.
          maxLength: 1024
          readOnly: true
          type: string
        updateStatusDetail:
          description: JSON field storing details of Instance update status. Set by RMs only. Beta, subject to change.
          maxLength: 100000
          readOnly: true
          type: string
        updateStatusIndicator:
          description: Indicates interpretation of update_status. Set by RMs only.
          enum:
            - STATUS_INDICATION_ERROR
            - STATUS_INDICATION_IN_PROGRESS
            - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        updateStatusTimestamp:
          description: UTC timestamp when update_status was last changed. Set by RMs only.
          format: uint32
          readOnly: true
          type: integer
        workloadMembers:
          description: The workload members associated with the instance.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
      type: object
    InvalidateHostResponse:
      description: Response message for InvalidateHost.
      type: object
    InvalidateInstanceResponse:
      description: Response message for Invalidate Instance.
      type: object
    KubeconfigInfo:
      properties:
        id:
          type: string
        kubeconfig:
          type: string
      type: object
    ListAppEndpointsResponse:
      description: Response message for the ListAppEndpoints method.
      properties:
        appEndpoints:
          description: List of services.
          items:
            $ref: '#/components/schemas/AppEndpoint'
          readOnly: true
          type: array
      type: object
    ListAppWorkloadsResponse:
      description: Response message for the ListAppWorkloadsResponse method.
      properties:
        appWorkloads:
          description: A list of virtual machines.
          items:
            $ref: '#/components/schemas/AppWorkload'
          type: array
      type: object
    ListApplicationsResponse:
      description: Response message for the ListApplications method.
      properties:
        applications:
          description: A list of applications.
          items:
            $ref: '#/components/schemas/Application'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - applications
        - totalElements
      type: object
    ListArtifactsResponse:
      description: Response message for the ListArtifacts method.
      properties:
        artifacts:
          description: A list of artifacts.
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - artifacts
        - totalElements
      type: object
    ListClustersResponse:
      description: Response message for the ListClusters method.
      properties:
        clusters:
          description: A list of Cluster Objects.
          items:
            $ref: '#/components/schemas/ClusterInfo'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - clusters
        - totalElements
      type: object
    ListDeploymentClustersResponse:
      description: Response message for ListDeploymentClusters method.
      properties:
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - clusters
        - totalElements
      type: object
    ListDeploymentPackagesResponse:
      description: Response message for the ListDeploymentPackages method.
      properties:
        deploymentPackages:
          description: A list of DeploymentPackages.
          items:
            $ref: '#/components/schemas/DeploymentPackage'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - deploymentPackages
        - totalElements
      type: object
    ListDeploymentsPerClusterResponse:
      description: Response message for the ListDeploymentsPerCluster method.
      properties:
        deploymentInstancesCluster:
          description: A list of Deployment Instance Cluster Objects.
          items:
            $ref: '#/components/schemas/DeploymentInstancesCluster'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - deploymentInstancesCluster
        - totalElements
      type: object
    ListDeploymentsResponse:
      description: Response message for the ListDeployments method.
      properties:
        deployments:
          description: A list of Deployment Objects.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - deployments
        - totalElements
      type: object
    ListHostsResponse:
      description: Response message for the ListHosts method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        hosts:
          description: Sorted and filtered list of hosts.
          items:
            $ref: '#/components/schemas/HostResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - hosts
        - totalElements
        - hasNext
      type: object
    ListInstancesResponse:
      description: Response message for the ListInstances method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        instances:
          description: Sorted and filtered list of instances.
          items:
            $ref: '#/components/schemas/InstanceResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - instances
        - totalElements
        - hasNext
      type: object
    ListLocalAccountsResponse:
      description: Response message for the ListLocalAccounts method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        localAccounts:
          description: Sorted and filtered list of localaccounts.
          items:
            $ref: '#/components/schemas/LocalAccountResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - localAccounts
        - totalElements
        - hasNext
      type: object
    ListLocationsResponse:
      description: Response message for the ListLocations method.
      properties:
        nodes:
          description: Sorted and filtered list of regions.
          items:
            $ref: '#/components/schemas/ListLocationsResponse_LocationNode'
          type: array
        outputElements:
          description: Amount of items in the returned list.
          format: int32
          type: integer
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - nodes
      type: object
    ListLocationsResponse_LocationNode:
      description: A node in the location tree.
      properties:
        name:
          description: The node human readable name.
          type: string
        parentId:
          description: The associated resource ID, of the parent resource of this Location node. In the case of a region, it could be empty or a regionId. In the case of a site, it could be empty or a regionId.
          type: string
        resourceId:
          description: The associated node resource ID, generated by inventory on Create.
          type: string
        type:
          description: The node type
          enum:
            - RESOURCE_KIND_REGION
            - RESOURCE_KIND_SITE
          format: enum
          type: string
      required:
        - resourceId
        - parentId
        - name
        - type
      type: object
    ListOperatingSystemsResponse:
      description: Response message for the ListOperatingSystems method.
      properties:
        OperatingSystemResources:
          description: Sorted and filtered list of oss.
          items:
            $ref: '#/components/schemas/OperatingSystemResource'
          type: array
        hasNext:
          description: Inform if there are more elements
          type: boolean
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - OperatingSystemResources
        - totalElements
        - hasNext
      type: object
    ListProvidersResponse:
      description: Response message for the ListProviders method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        providers:
          description: Sorted and filtered list of providers.
          items:
            $ref: '#/components/schemas/ProviderResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - providers
        - totalElements
        - hasNext
      type: object
    ListRegionsResponse:
      description: Response message for the ListRegions method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        regions:
          description: Sorted and filtered list of regions.
          items:
            $ref: '#/components/schemas/RegionResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - regions
        - totalElements
        - hasNext
      type: object
    ListRegistriesResponse:
      description: Response message for the ListRegistries method.
      properties:
        registries:
          description: A list of registries.
          items:
            $ref: '#/components/schemas/Registry'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - registries
        - totalElements
      type: object
    ListRepeatedSchedulesResponse:
      description: Response message for the ListRepeatedSchedules method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        repeatedSchedules:
          description: Sorted and filtered list of repeated_schedules.
          items:
            $ref: '#/components/schemas/RepeatedScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - repeatedSchedules
        - totalElements
        - hasNext
      type: object
    ListSchedulesResponse:
      description: Response message for the ListSchedulesResponse method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        repeatedSchedules:
          description: Sorted and filtered list of repeated_schedules.
          items:
            $ref: '#/components/schemas/RepeatedScheduleResource'
          type: array
        singleSchedules:
          description: Sorted and filtered list of single_schedules.
          items:
            $ref: '#/components/schemas/SingleScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - singleSchedules
        - repeatedSchedules
        - totalElements
        - hasNext
      type: object
    ListSingleSchedulesResponse:
      description: Response message for the ListSingleSchedules method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        singleSchedules:
          description: Sorted and filtered list of single_schedules.
          items:
            $ref: '#/components/schemas/SingleScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - singleSchedules
        - totalElements
        - hasNext
      type: object
    ListSitesResponse:
      description: Response message for the ListSites method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        sites:
          description: Sorted and filtered list of sites.
          items:
            $ref: '#/components/schemas/SiteResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - sites
        - totalElements
        - hasNext
      type: object
    ListTelemetryLogsGroupsResponse:
      description: Response message for the ListTelemetryLogsGroups method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryLogsGroups:
          description: Sorted and filtered list of telemetry_logs_groups.
          items:
            $ref: '#/components/schemas/TelemetryLogsGroupResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - telemetryLogsGroups
        - totalElements
        - hasNext
      type: object
    ListTelemetryLogsProfilesResponse:
      description: Response message for the ListTelemetryLogsProfiles method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryLogsProfiles:
          description: Sorted and filtered list of telemetry_logs_profiles.
          items:
            $ref: '#/components/schemas/TelemetryLogsProfileResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - telemetryLogsProfiles
        - totalElements
        - hasNext
      type: object
    ListTelemetryMetricsGroupsResponse:
      description: Response message for the ListTelemetryMetricsGroups method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryMetricsGroups:
          description: Sorted and filtered list of telemetry_metrics_groups.
          items:
            $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - telemetryMetricsGroups
        - totalElements
        - hasNext
      type: object
    ListTelemetryMetricsProfilesResponse:
      description: Response message for the ListTelemetryMetricsProfiles method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryMetricsProfiles:
          description: Sorted and filtered list of telemetry_metrics_profiles.
          items:
            $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - telemetryMetricsProfiles
        - totalElements
        - hasNext
      type: object
    ListUIExtensionsResponse:
      description: Response message for the ListUIExtensions method.
      properties:
        uiExtensions:
          description: A list of UIExtensions.
          items:
            $ref: '#/components/schemas/UIExtension'
          type: array
      required:
        - uiExtensions
      type: object
    ListWorkloadMembersResponse:
      description: Response message for the ListWorkloadMembers method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
        workloadMembers:
          description: Sorted and filtered list of workload_members.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          type: array
      required:
        - workloadMembers
        - totalElements
        - hasNext
      type: object
    ListWorkloadsResponse:
      description: Response message for the ListWorkloads method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
        workloads:
          description: Sorted and filtered list of workloads.
          items:
            $ref: '#/components/schemas/WorkloadResource'
          type: array
      required:
        - workloads
        - totalElements
        - hasNext
      type: object
    LocalAccountResource:
      properties:
        localAccountID:
          description: Deprecated, The local account resource's unique identifier. Alias of resourceId.
          maxLength: 21
          pattern: ^localaccount-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: resource identifier
          maxLength: 21
          pattern: ^localaccount-[0-9a-f]{8}$
          readOnly: true
          type: string
        sshKey:
          description: SSH Public Key of EN
          maxLength: 800
          pattern: ^(ssh-ed25519|ecdsa-sha2-nistp521) ([A-Za-z0-9+/=]+) ?(.*)?$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        username:
          description: Username provided by admin
          maxLength: 32
          pattern: ^[a-z][a-z0-9-]{0,31}$
          type: string
      required:
        - username
        - sshKey
      type: object
    Metadata:
      description: Metadata represents a single value of metadata.
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
      type: object
    MetadataItem:
      description: A metadata item, represented by a key:value pair.
      properties:
        key:
          description: The metadata key.
          maxLength: 316
          pattern: ^$|^[a-z.]+/$|^[a-z.]+/[a-z0-9][a-z0-9-_.]*[a-z0-9]$|^[a-z.]+/[a-z0-9]$|^[a-z]$|^[a-z0-9][a-z0-9-_.]*[a-z0-9]$
          type: string
        value:
          description: The metadata value.
          maxLength: 63
          pattern: ^$|^[a-z0-9]$|^[a-z0-9][a-z0-9._-]*[a-z0-9]$
          type: string
      required:
        - key
        - value
      type: object
    MetadataList:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/Metadata'
          type: array
      required:
        - metadata
      type: object
    MetadataResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/StoredMetadata'
          type: array
      required:
        - metadata
      type: object
    Namespace:
      description: Namespace represents a complex namespace definition with predefined labels and annotations. They are created before any other resources in the deployment.
      properties:
        annotations:
          additionalProperties:
            type: string
          type: object
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          description: namespace names must be valid RFC 1123 DNS labels. Avoid creating namespaces with the prefix `kube-`, since it is reserved for Kubernetes\* system namespaces. Avoid `default` - will already exist
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
      required:
        - name
      type: object
    NetworkInterfaceLinkState:
      properties:
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        type:
          description: The interface link state.
          enum:
            - NETWORK_INTERFACE_LINK_STATE_UP
            - NETWORK_INTERFACE_LINK_STATE_DOWN
          format: enum
          readOnly: true
          type: string
      type: object
    NetworkRanges:
      properties:
        cidrBlocks:
          description: A list of CIDR blocks in valid CIDR notation.
          items:
            pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}/(?:[0-9]|[1-2][0-9]|3[0-2])$
            type: string
          type: array
      required:
        - cidrBlocks
    NodeInfo:
      properties:
        id:
          description: The unique identifier of this host.
          type: string
        role:
          type: string
        status:
          $ref: '#/components/schemas/StatusInfo'
      type: object
    NodeSpec:
      properties:
        id:
          description: The unique identifier of this host.
          type: string
        role:
          default: all
          enum:
            - all
            - controlplane
            - worker
          format: enum
          type: string
      required:
        - id
        - role
      type: object
    OnboardHostResponse:
      description: Response of a Host Register request.
      type: object
    OperatingSystemResource:
      description: An OS resource.
      properties:
        architecture:
          description: The OS resource's CPU architecture.
          maxLength: 20
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        description:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.:;=@?!#,<>*(){}&%$`^\+\- ]+$
          type: string
        imageId:
          description: A unique identifier of the OS image that can be retrieved from the running OS.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()"\ ]+$
          type: string
        imageUrl:
          description: The URL repository of the OS image.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()"\ ]+$
          type: string
        installedPackages:
          description: Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.
          maxLength: 500000
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" \\\n]+$
          type: string
        kernelCommand:
          description: The OS resource's kernel Command Line Options.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        name:
          description: The OS resource's name.
          maxLength: 128
          pattern: '^$|^[a-zA-Z-_0-9./: ()]+$'
          type: string
        osProvider:
          description: Indicating the provider of OS (e.g., Infra or Lenovo).
          enum:
            - OS_PROVIDER_KIND_INFRA
            - OS_PROVIDER_KIND_LENOVO
          format: enum
          type: string
        osResourceID:
          description: Deprecated, The OS resource's unique identifier. Alias of resourceId.
          maxLength: 11
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          type: string
        osType:
          description: Indicating the type of OS (for example, mutable or immutable).
          enum:
            - OS_TYPE_MUTABLE
            - OS_TYPE_IMMUTABLE
          format: enum
          type: string
        platformBundle:
          description: Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations.  If empty, the default OS installation will be used.
          readOnly: true
          type: string
        profileName:
          description: Name of an OS profile that the OS resource belongs to. Uniquely identifies a family of OS resources.
          maxLength: 128
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()"\ ]+$
          type: string
        profileVersion:
          description: Version of OS profile that the OS resource belongs to.
          readOnly: true
          type: string
        repoUrl:
          description: Deprecated. OS image URL. URL of the original installation source.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        resourceId:
          description: Resource ID, generated by inventory on Create.
          maxLength: 11
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          description: Indicating if this OS is capable of supporting features like Secure Boot (SB) and Full Disk Encryption (FDE). Immutable after creation.
          enum:
            - SECURITY_FEATURE_NONE
            - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
          format: enum
          type: string
        sha256:
          description: SHA256 checksum of the OS resource in hexadecimal representation.
          maxLength: 64
          minLength: 64
          pattern: ^[a-f0-9]+$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        updateSources:
          description: The list of OS resource update sources. Should be in 'DEB822 Source Format' for Debian style OSs
          items:
            maxLength: 10000
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*+()"\ \\\n]+$
            type: string
          maxItems: 100
          type: array
      required:
        - updateSources
        - sha256
      type: object
    OverrideValues:
      description: The Override values can be used to override any of the base helm values of applications based on Deployment scenario.
      properties:
        appName:
          description: deployment package name to use when overriding values.
          type: string
        targetNamespace:
          description: The namespace to deploy the app onto, default namespace is default.
          type: string
        values:
          description: The YAML representing Helm overrides
          type: object
      required:
        - appName
      type: object
    ParameterTemplate:
      description: ParameterTemplate describes override values for Helm chart values
      properties:
        default:
          description: Default value for the parameter.
          maxLength: 4096
          type: string
        displayName:
          description: Display name is an optional human-readable name for the template. It is used for display purposes on user interfaces.
          maxLength: 100
          pattern: ^\PC*$
          type: string
        mandatory:
          description: Optional mandatory flag for the parameter.
          type: boolean
        name:
          description: Human-readable name for the parameter template.
          maxLength: 4096
          minLength: 1
          pattern: ^[A-Za-z0-9-/_\[\]\.\\]*$
          type: string
        secret:
          description: Optional secret flag for the parameter.
          type: boolean
        suggestedValues:
          description: List of suggested values to use, to override the default value.
          items:
            maxLength: 4096
            minLength: 1
            type: string
          maxItems: 100
          type: array
        type:
          description: 'Type of parameter: string, number, or boolean.'
          minLength: 1
          pattern: ^(string)$|^(number)$|^(boolean)$
          type: string
        validator:
          description: Optional validator for the parameter. Usage TBD.
          maxLength: 40
          type: string
      required:
        - name
        - type
      type: object
    Pod:
      description: Represents a pod resource.
      properties:
        containers:
          description: containers list of containers per pod
          items:
            $ref: '#/components/schemas/Container'
          type: array
        status:
          $ref: '#/components/schemas/PodStatus'
      type: object
    PodStatus:
      description: The status of the pod during its lifecycle.
      properties:
        state:
          description: State information
          enum:
            - STATE_PENDING
            - STATE_RUNNING
            - STATE_SUCCEEDED
            - STATE_FAILED
          format: enum
          type: string
      type: object
    Port:
      description: Port information
      properties:
        name:
          description: Port name
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          readOnly: true
          type: string
        protocol:
          description: Protocol for a port.
          readOnly: true
          type: string
        serviceProxyUrl:
          description: Service proxy URL for a port.
          readOnly: true
          type: string
        value:
          description: Port value
          format: int32
          readOnly: true
          type: integer
      type: object
    ProblemDetails:
      properties:
        message:
          description: error message
          type: string
      type: object
    Profile:
      description: Profile is a set of configuration values for customizing application deployment.
      properties:
        chartValues:
          description: Raw byte value containing the chart values as raw YAML bytes.
          maxLength: 4000000
          type: string
        createTime:
          description: The creation time of the profile.
          format: date-time
          readOnly: true
          type: string
        deploymentRequirement:
          description: List of deployment requirements for this profile.
          items:
            $ref: '#/components/schemas/DeploymentRequirement'
          type: array
        description:
          description: Description of the profile. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the profile. When specified, it must be unique among all profiles of a given application. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        name:
          description: Human-readable name for the profile. Unique among all profiles of the same application.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        parameterTemplates:
          description: Parameter templates available for this profile.
          items:
            $ref: '#/components/schemas/ParameterTemplate'
          type: array
        updateTime:
          description: The last update time of the profile.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
      type: object
    ProviderResource:
      description: A provider resource.
      properties:
        apiCredentials:
          description: The provider resource's list of credentials.
          items:
            maxLength: 500
            pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
            type: string
          maxItems: 100
          type: array
        apiEndpoint:
          description: The provider resource's API endpoint.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        config:
          description: Opaque provider configuration.
          maxLength: 2000
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        name:
          description: The provider resource's name.
          maxLength: 40
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        providerID:
          description: Deprecated, The provider resource's unique identifier. Alias of resourceId.
          maxLength: 17
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          type: string
        providerKind:
          description: The provider kind.
          enum:
            - PROVIDER_KIND_BAREMETAL
          format: enum
          type: string
        providerVendor:
          description: The provider vendor.
          enum:
            - PROVIDER_VENDOR_LENOVO_LXCA
            - PROVIDER_VENDOR_LENOVO_LOCA
          format: enum
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          maxLength: 17
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - providerKind
        - name
        - apiEndpoint
      type: object
    Receiver:
      properties:
        emailConfig:
          $ref: '#/components/schemas/EmailConfig'
        id:
          format: uuid
          type: string
        state:
          $ref: '#/components/schemas/StateDefinition'
        version:
          type: integer
      type: object
    ReceiverList:
      properties:
        receivers:
          items:
            $ref: '#/components/schemas/Receiver'
          type: array
      type: object
    RegionResource:
      description: A region resource.
      properties:
        inheritedMetadata:
          description: The rendered metadata from the Region parent(s) that can be inherited by the Region, represented by a list of key:value pairs. This field can not be used in filter.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        metadata:
          description: The metadata associated to the Region, represented by a list of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          maxItems: 100
          type: array
        name:
          description: The user-provided, human-readable name of region
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        parentId:
          description: The parent Region unique identifier that the region is associated to, when existent. This field can not be used in filter.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        parentRegion:
          $ref: '#/components/schemas/RegionResource'
        regionID:
          description: Deprecated, The Region unique identifier. Alias of resourceId.
          maxLength: 15
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          maxLength: 15
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalSites:
          description: The total number of sites in the region.
          format: int32
          readOnly: true
          type: integer
      type: object
    Registry:
      description: Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
      properties:
        apiType:
          description: Optional type of the API used to obtain inventory of the articles hosted by the registry.
          maxLength: 16
          pattern: ^\PC*$
          type: string
        authToken:
          description: Optional authentication token or password for accessing the registry.
          maxLength: 1000
          pattern: ^\PC*$
          type: string
        cacerts:
          description: Optional CA certificates for accessing the registry using secure channels, such as HTTPS.
          maxLength: 16384
          type: string
        createTime:
          description: The creation time of the registry.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the registry. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the registry. When specified, it must be unique among all registries within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        inventoryUrl:
          description: Optional URL of the API for accessing inventory of artifacts hosted by the registry.
          maxLength: 1000
          type: string
        name:
          description: Name is a human-readable unique identifier for the registry and must be unique for all registries of a given project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        rootUrl:
          description: Root URL for retrieving artifacts, e.g. Docker images and Helm charts, from the registry.
          maxLength: 1000
          minLength: 1
          pattern: ^(https?|oci)://[a-z0-9-]+(.[a-z0-9-]+)+([/?][\w_\-@:%.+~#?&/=]*)?$
          type: string
        type:
          description: Type indicates whether the registry holds Docker images or Helm charts; defaults to Helm charts.
          maxLength: 40
          minLength: 1
          pattern: ^(HELM)$|^(IMAGE)$
          type: string
        updateTime:
          description: The last update time of the registry.
          format: date-time
          readOnly: true
          type: string
        username:
          description: Optional username for accessing the registry.
          maxLength: 1000
          pattern: ^\PC*$
          type: string
      required:
        - name
        - rootUrl
        - type
      type: object
    RepeatedScheduleResource:
      description: A repeated-schedule resource.
      properties:
        cronDayMonth:
          description: cron style day of month (1-31), it can be empty only when used in a Filter
          pattern: ^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$
          type: string
        cronDayWeek:
          description: cron style day of week (0-6), it can be empty only when used in a Filter
          pattern: ^([*]|([0-6])((,([0-6]))*))$
          type: string
        cronHours:
          description: cron style hours (0-23), it can be empty only when used in a Filter
          pattern: ^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$
          type: string
        cronMinutes:
          description: cron style minutes (0-59), it can be empty only when used in a Filter.
          pattern: ^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$
          type: string
        cronMonth:
          description: cron style month (1-12), it can be empty only when used in a Filter
          pattern: ^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$
          type: string
        durationSeconds:
          description: The duration in seconds of the repeated schedule, per schedule.
          format: int32
          maximum: 86400
          minimum: 1
          type: integer
        name:
          description: The schedule's name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        repeatedScheduleID:
          description: Deprecated, The repeated schedule's unique identifier. Alias of resourceId.
          maxLength: 21
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          maxLength: 21
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          description: The schedule status.
          enum:
            - SCHEDULE_STATUS_MAINTENANCE
            - SCHEDULE_STATUS_OS_UPDATE
          format: enum
          type: string
        targetHost:
          $ref: '#/components/schemas/HostResource'
        targetHostId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 13
          pattern: ^$|^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/RegionResource'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/SiteResource'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 13
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - scheduleStatus
        - durationSeconds
        - cronMinutes
        - cronHours
        - cronDayMonth
        - cronMonth
        - cronDayWeek
      type: object
    ResourceReference:
      description: ResourceReference represents a Kubernetes resource identifier.
      properties:
        kind:
          description: Kubernetes resource kind, e.g. ConfigMap.
          maxLength: 40
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9._-]{0,38}[a-zA-Z0-9]{0,1}$
          type: string
        name:
          description: Kubernetes resource name.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-._-]{0,38}[a-z0-9]{0,1}$
          type: string
        namespace:
          description: Kubernetes namespace where the ignored resource resides. When empty, the application namespace will be used.
          type: string
      required:
        - name
        - kind
      type: object
    RestartVirtualMachineResponse:
      description: Response message for the RestartVirtualMachine method.
      type: object
    ServiceExport:
      properties:
        appName:
          type: string
        enabled:
          type: boolean
      required:
        - appName
      type: object
    ServiceStatus:
      properties:
        state:
          enum:
            - ready
            - failed
          type: string
      required:
        - state
      type: object
    SingleScheduleResource:
      description: A single schedule resource.
      properties:
        endSeconds:
          description: The end time in seconds, of the single schedule. The value of endSeconds must be equal to or bigger than the value of startSeconds.
          format: uint32
          type: integer
        name:
          description: The schedule's name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          maxLength: 19
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          description: The schedule status.
          enum:
            - SCHEDULE_STATUS_MAINTENANCE
            - SCHEDULE_STATUS_OS_UPDATE
          format: enum
          type: string
        singleScheduleID:
          description: Deprecated, The single schedule resource's unique identifier. Alias of resourceId.
          maxLength: 19
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          type: string
        startSeconds:
          description: The start time in seconds, of the single schedule.
          format: uint32
          type: integer
        targetHost:
          $ref: '#/components/schemas/HostResource'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 13
          pattern: ^$|^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/RegionResource'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/SiteResource'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          maxLength: 13
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - scheduleStatus
        - startSeconds
      type: object
    SiteResource:
      description: A site resource.
      properties:
        inheritedMetadata:
          description: The rendered metadata from the Region parent(s) that can be inherited by the Region, represented by a list of key:value pairs. This field can not be used in filter.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        metadata:
          description: The metadata associated to the Region, represented by a list of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          maxItems: 100
          type: array
        name:
          description: The site's human-readable name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        provider:
          $ref: '#/components/schemas/ProviderResource'
        region:
          $ref: '#/components/schemas/RegionResource'
        regionId:
          description: The region's unique identifier that the site is associated to. This field cannot be used in filter.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        resourceId:
          description: resource ID, generated by the inventory on Create.
          maxLength: 13
          pattern: ^site-[0-9a-f]{8}$
          readOnly: true
          type: string
        siteID:
          description: Deprecated, The site unique identifier. Alias of resourceId.
          maxLength: 13
          pattern: ^site-[0-9a-f]{8}$
          readOnly: true
          type: string
        siteLat:
          description: The geolocation latitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLat must be in the range of +/- 90 degrees.
          format: int32
          maximum: 9e+08
          type: integer
        siteLng:
          description: The geolocation longitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLng must be in the range of +/- 180 degrees (inclusive).
          format: int32
          maximum: 1.8e+09
          type: integer
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    StartVirtualMachineResponse:
      description: Response message for the StartVirtualMachine method.
      type: object
    StateDefinition:
      enum:
        - new
        - modified
        - pending
        - error
        - applied
      type: string
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
          type: string
      type: object
    StatusIndicator:
      description: The status indicator.
      enum:
        - STATUS_INDICATION_UNSPECIFIED
        - STATUS_INDICATION_ERROR
        - STATUS_INDICATION_IN_PROGRESS
        - STATUS_INDICATION_IDLE
      format: enum
      readOnly: true
      type: string
    StatusInfo:
      properties:
        condition:
          enum:
            - STATUS_CONDITION_UNKNOWN
            - STATUS_CONDITION_READY
            - STATUS_CONDITION_NOTREADY
            - STATUS_CONDITION_PROVISIONING
            - STATUS_CONDITION_REMOVING
          format: enum
          type: string
        reason:
          type: string
        timestamp:
          type: string
      type: object
    StopVirtualMachineResponse:
      description: Response message for the StopVirtualMachine method.
      type: object
    StoredMetadata:
      description: StoredMetadata represents all stored metadata values for a given key.
      properties:
        key:
          type: string
        values:
          items:
            type: string
          type: array
      required:
        - key
        - values
      type: object
    Summary:
      description: Count of status.
      properties:
        down:
          description: Number of down apps/clusters in the deployment.
          format: int32
          readOnly: true
          type: integer
        running:
          description: Number of running apps/clusters in the deployment, value from owned GitRepo objects.
          format: int32
          readOnly: true
          type: integer
        total:
          description: Total count of apps/clusters in the deployment, value from owned GitRepo objects.
          format: int32
          readOnly: true
          type: integer
        type:
          description: Type of thing that we're counting, ie clusters, apps.
          readOnly: true
          type: string
        unknown:
          description: Unknown status to indicate cluster not reachable.
          format: int32
          readOnly: true
          type: integer
      type: object
    TargetClusters:
      description: Set target clusters based on labels.
      properties:
        appName:
          description: The targeted deployment package name.
          type: string
        clusterId:
          description: Cluster id to match the target cluster when targeted deployment.
          type: string
        labels:
          additionalProperties:
            type: string
          description: Cluster labels to match the target cluster when auto-scaling deployment.
          type: object
      type: object
    TelemetryLogsGroupResource:
      description: TelemetryLogsGroupResource.
      properties:
        collectorKind:
          description: The collector kind.
          enum:
            - TELEMETRY_COLLECTOR_KIND_HOST
            - TELEMETRY_COLLECTOR_KIND_CLUSTER
          format: enum
          type: string
        groups:
          description: A list of log groups to collect.
          items:
            maxLength: 1000
            pattern: '"^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()"\ ]+$"'
            type: string
          maxItems: 100
          type: array
        name:
          description: Human-readable name for the log group.
          maxLength: 50
          minLength: 1
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Unique ID of the telemetry group.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        telemetryLogsGroupId:
          description: Deprecated, Unique ID of the telemetry group. Alias of resource_id.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - name
        - collectorKind
        - groups
      type: object
    TelemetryLogsProfileResource:
      description: A telemetry log profile for a hierarchy object.
      properties:
        logLevel:
          description: The log level og the telemetry profile.
          enum:
            - SEVERITY_LEVEL_CRITICAL
            - SEVERITY_LEVEL_ERROR
            - SEVERITY_LEVEL_WARN
            - SEVERITY_LEVEL_INFO
            - SEVERITY_LEVEL_DEBUG
          format: enum
          type: string
        logsGroup:
          $ref: '#/components/schemas/TelemetryLogsGroupResource'
        logsGroupId:
          description: The unique identifier of the telemetry log group.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
        profileId:
          description: Deprecated, The ID of the telemetry profile.
          maxLength: 25
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: The ID of the telemetry profile.
          maxLength: 25
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 13
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 13
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - logLevel
        - logsGroupId
      type: object
    TelemetryMetricsGroupResource:
      description: TelemetryMetricsGroupResource.
      properties:
        collectorKind:
          description: The collector kind.
          enum:
            - TELEMETRY_COLLECTOR_KIND_HOST
            - TELEMETRY_COLLECTOR_KIND_CLUSTER
          format: enum
          type: string
        groups:
          description: A list of log groups to collect.
          items:
            maxLength: 1000
            pattern: '"^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()"\ ]+$"'
            type: string
          maxItems: 100
          type: array
        name:
          description: Human-readable name for the log group.
          maxLength: 50
          minLength: 1
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Unique ID of the telemetry group.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        telemetryMetricsGroupId:
          description: Deprecated, Unique ID of the telemetry group. Alias of resource_id.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - name
        - collectorKind
        - groups
      type: object
    TelemetryMetricsProfileResource:
      description: A telemetry metric profile for a hierarchy object.
      properties:
        metricsGroup:
          $ref: '#/components/schemas/TelemetryMetricsGroupResource'
        metricsGroupId:
          description: The unique identifier of the telemetry metric group.
          maxLength: 23
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
        metricsInterval:
          description: Metric interval (in seconds) for the telemetry profile. This field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
          format: int32
          minimum: 1
          type: integer
        profileId:
          description: Deprecated, The ID of the telemetry profile.
          maxLength: 25
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: The ID of the telemetry profile.
          maxLength: 25
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 13
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 15
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          maxLength: 13
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - metricsInterval
        - metricsGroupId
      type: object
    TemplateInfo:
      properties:
        cluster-labels:
          additionalProperties:
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Allows users to specify a list of key/value pairs to be attached to a cluster created with the template. These pairs need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            default-extension: demo
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
        clusterNetwork:
          $ref: '#/components/schemas/clusterNetwork'
        clusterconfiguration:
          example:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: RKE2ControlPlaneTemplate
            metadata:
              name: baseline
            spec:
              agentConfig:
                kubelet:
                  extraArgs:
                    - --topology-manager-policy=best-effort
                    - --cpu-manager-policy=static
                    - --reserved-cpus=1
                    - --max-pods=250
                    - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              serverConfig:
                cni: calico
                disableComponents:
                  kubernetesComponents:
                    - cloudController
                etcd:
                  backupConfig: {}
                  extraArgs:
                    - --cipher-suites=[TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256]
                kubeApiServer:
                  extraArgs:
                    - --feature-gates=PortForwardWebsockets=true
                    - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                kubeControllerManager:
                  extraArg: null
                kubeScheduler:
                  extraArg: null
              version: v1.30.6+rke2r1
          type: object
        controlplaneprovidertype:
          default: rke2
          enum:
            - kubeadm
            - rke2
          type: string
        description:
          maxLength: 4096
          minLength: 1
          type: string
        infraprovidertype:
          default: intel
          enum:
            - docker
            - intel
          type: string
        kubernetesVersion:
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          type: string
        name:
          maxLength: 63
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
        version:
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-dev)?$
          type: string
      required:
        - name
        - version
        - kubernetesVersion
      type: object
    TemplateInfoList:
      properties:
        defaultTemplateInfo:
          $ref: '#/components/schemas/DefaultTemplateInfo'
        templateInfoList:
          items:
            $ref: '#/components/schemas/TemplateInfo'
          type: array
        totalElements:
          description: The count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      type: object
    Timestamps:
      properties:
        createdAt:
          description: The time when the resource was created.
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          description: The time when the resource was last updated.
          format: date-time
          readOnly: true
          type: string
      type: object
    UIExtension:
      description: Details of UI Extension.
      properties:
        appName:
          description: The name of the application corresponding to this UI extension.
          type: string
        description:
          description: Description states the purpose of the dashboard that this UIExtension represents.
          type: string
        fileName:
          description: The name of the main file to load this specific UI extension.
          type: string
        label:
          description: Label represents a dashboard in the main UI.
          type: string
        moduleName:
          description: The application module to be loaded.
          type: string
        serviceName:
          description: The name of the API Extension endpoint.
          type: string
      required:
        - serviceName
        - description
        - label
        - fileName
        - appName
        - moduleName
      type: object
    UpdateDeploymentResponse:
      description: Response message for the UpdateDeployment method.
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      required:
        - deployment
      type: object
    Upload:
      description: Upload represents a single file-upload record.
      properties:
        artifact:
          description: Raw bytes content of the file being uploaded.
          format: byte
          type: string
        fileName:
          description: Name of the file being uploaded.
          type: string
      required:
        - fileName
        - artifact
      type: object
    UploadCatalogEntitiesResponse:
      description: Response message for the UploadCatalogItems method
      properties:
        errorMessages:
          description: Any error messages encountered either during YAML parsing or entity creation or update.
          items:
            type: string
          type: array
        sessionId:
          description: Session ID, generated by the server after the first upload request has been processed.
          type: string
        uploadNumber:
          description: 'Deprecated: Next expected upload number or total number of uploads on the last upload request.'
          format: uint32
          type: integer
      required:
        - sessionId
        - uploadNumber
      type: object
    VersionList:
      properties:
        versionList:
          items:
            maxLength: 2048
            minLength: 1
            type: string
          type: array
      type: object
    VirtualMachine:
      description: Represents a virtual machine.
      properties:
        adminStatus:
          $ref: '#/components/schemas/AdminStatus'
        status:
          $ref: '#/components/schemas/VirtualMachineStatus'
      type: object
    VirtualMachineStatus:
      description: Status of a virtual machine.
      properties:
        state:
          description: Virtual machine state
          enum:
            - STATE_STOPPED
            - STATE_PROVISIONING
            - STATE_STARTING
            - STATE_RUNNING
            - STATE_PAUSED
            - STATE_STOPPING
            - STATE_TERMINATING
            - STATE_CRASH_LOOP_BACKOFF
            - STATE_MIGRATING
            - STATE_ERROR_UNSCHEDULABLE
            - STATE_ERROR_IMAGE_PULL
            - STATE_ERROR_IMAGE_PULL_BACKOFF
            - STATE_ERROR_PVC_NOT_FOUND
            - STATE_ERROR_DATA_VOLUME
            - STATE_WAITING_FOR_VOLUME_BINDING
          format: enum
          type: string
      type: object
    WorkloadMember:
      description: Intermediate resource to represent a relation between a workload and a compute resource (i.e., instance).
      properties:
        instance:
          $ref: '#/components/schemas/InstanceResource'
        instanceId:
          description: The unique identifier of the instance.
          maxLength: 13
          pattern: ^inst-[0-9a-f]{8}$
          type: string
          writeOnly: true
        kind:
          description: The kind of the workload member.
          enum:
            - WORKLOAD_MEMBER_KIND_CLUSTER_NODE
          format: enum
          type: string
        member:
          $ref: '#/components/schemas/InstanceResource'
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          maxLength: 23
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        workload:
          $ref: '#/components/schemas/WorkloadResource'
        workloadId:
          description: The workload unique identifier.
          maxLength: 17
          pattern: ^workload-[0-9a-f]{8}$
          type: string
          writeOnly: true
        workloadMemberId:
          description: Deprecated, The workload unique identifier. Alias of resourceId.
          maxLength: 23
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          type: string
      required:
        - kind
        - workloadId
        - instanceId
      type: object
    WorkloadResource:
      description: A generic way to group compute resources to obtain a workload.
      properties:
        externalId:
          description: The ID of the external resource, used to link to resources outside the realm of Edge Infrastructure Manager.
          maxLength: 40
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        kind:
          description: Type of workload.
          enum:
            - WORKLOAD_KIND_CLUSTER
          format: enum
          type: string
        members:
          description: The members of the workload.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
        name:
          description: Human-readable name for the workload.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          maxLength: 17
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          type: string
        status:
          description: Human-readable status of the workload.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        workloadId:
          description: Deprecated, The workload unique identifier. Alias of resourceId.
          maxLength: 17
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          type: string
      required:
        - kind
        - members
      type: object
    clusterNetwork:
      description: Cluster network configuration, including pod and service CIDR blocks.
      properties:
        pods:
          $ref: '#/components/schemas/NetworkRanges'
        services:
          $ref: '#/components/schemas/NetworkRanges'
      type: object
    network.Network.Get:
      properties:
        spec:
          properties:
            description:
              type: string
            type:
              type: string
          type: object
        status:
          properties:
            status:
              properties:
                currentState:
                  type: string
          type: object
      type: object
    network.Network.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
              type:
                type: string
            type: object
          status:
            properties:
              status:
                properties:
                  currentState:
                    type: string
            type: object
        type: object
      type: array
    network.Network.NamedLink:
      items:
        type: object
      type: array
    network.Network.Post:
      properties:
        description:
          type: string
        type:
          type: string
      type: object
    network.Network.SingleLink:
      type: object
    network.Network.Status:
      properties:
        status:
          properties:
            currentState:
              type: string
      type: object
    org.Org.Get:
      properties:
        spec:
          properties:
            description:
              type: string
          type: object
        status:
          properties:
            orgStatus:
              properties:
                message:
                  type: string
                statusIndicator:
                  type: string
                timeStamp:
                  format: int64
                  type: integer
                uID:
                  type: string
          type: object
      type: object
    org.Org.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
            type: object
          status:
            properties:
              orgStatus:
                properties:
                  message:
                    type: string
                  statusIndicator:
                    type: string
                  timeStamp:
                    format: int64
                    type: integer
                  uID:
                    type: string
            type: object
        type: object
      type: array
    org.Org.NamedLink:
      items:
        type: object
      type: array
    org.Org.Post:
      properties:
        description:
          type: string
      type: object
    org.Org.SingleLink:
      type: object
    org.Org.Status:
      properties:
        orgStatus:
          properties:
            message:
              type: string
            statusIndicator:
              type: string
            timeStamp:
              format: int64
              type: integer
            uID:
              type: string
      type: object
    project.Project.Get:
      properties:
        spec:
          properties:
            description:
              type: string
          type: object
        status:
          properties:
            projectStatus:
              properties:
                message:
                  type: string
                statusIndicator:
                  type: string
                timeStamp:
                  format: int64
                  type: integer
                uID:
                  type: string
          type: object
      type: object
    project.Project.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
            type: object
          status:
            properties:
              projectStatus:
                properties:
                  message:
                    type: string
                  statusIndicator:
                    type: string
                  timeStamp:
                    format: int64
                    type: integer
                  uID:
                    type: string
            type: object
        type: object
      type: array
    project.Project.NamedLink:
      items:
        type: object
      type: array
    project.Project.Post:
      properties:
        description:
          type: string
      type: object
    project.Project.SingleLink:
      type: object
    project.Project.Status:
      properties:
        projectStatus:
          properties:
            message:
              type: string
            statusIndicator:
              type: string
            timeStamp:
              format: int64
              type: integer
            uID:
              type: string
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    HTTP:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: Tenancy aware APIs for the Open Edge Platform services
  title: Multi tenancy APIs
  version: 1.4.0
openapi: 3.0.3
paths:
  /v1/orgs:
    get:
      operationId: LIST__v1_orgs
      responses:
        "200":
          $ref: '#/components/responses/Listorg.Org'
      tags:
        - Org
  /v1/orgs/{org.Org}:
    delete:
      operationId: DELETE__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Org
    get:
      operationId: GET__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org'
      tags:
        - Org
    put:
      operationId: PUT__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createorg.Org'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Org
  /v1/orgs/{org.Org}/Folders:
    get:
      operationId: GET__v1_orgs_org_Org_Folders
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org.NamedLink'
      tags:
        - Org
  /v1/orgs/{org.Org}/status:
    get:
      operationId: GET__v1_orgs_org_Org_status
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org.Status'
      tags:
        - Org
  /v1/projects:
    get:
      operationId: LIST__v1_projects
      parameters:
        - in: query
          name: member-role
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Listproject.Project'
      tags:
        - Project
  /v1/projects/{project.Project}:
    delete:
      operationId: DELETE__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Project
    get:
      operationId: GET__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project'
      tags:
        - Project
    put:
      operationId: PUT__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createproject.Project'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Project
  /v1/projects/{project.Project}/Networks:
    get:
      operationId: GET__v1_projects_project_Project_Networks
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project.NamedLink'
      tags:
        - Project
  /v1/projects/{project.Project}/networks:
    get:
      operationId: LIST__v1_projects_project_Project_networks
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Listnetwork.Network'
      tags:
        - Network
  /v1/projects/{project.Project}/networks/{network.Network}:
    delete:
      operationId: DELETE__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Network
    get:
      operationId: GET__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getnetwork.Network'
      tags:
        - Network
    put:
      operationId: PUT__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createnetwork.Network'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Network
  /v1/projects/{project.Project}/networks/{network.Network}/status:
    get:
      operationId: GET__v1_projects_project_Project_networks_network_Network_status
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getnetwork.Network.Status'
      tags:
        - Network
  /v1/projects/{project.Project}/status:
    get:
      operationId: GET__v1_projects_project_Project_status
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project.Status'
      tags:
        - Project
  /v1/projects/{projectName}/alerts:
    get:
      description: Gets a list of alert instances
      operationId: getProjectAlerts
      parameters:
        - $ref: '#/components/parameters/alertsQueryFilter'
        - $ref: '#/components/parameters/hostQueryFilter'
        - $ref: '#/components/parameters/clusterQueryFilter'
        - $ref: '#/components/parameters/appQueryFilter'
        - $ref: '#/components/parameters/activeAlertsQueryFilter'
        - $ref: '#/components/parameters/suppressedAlertsQueryFilter'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
          description: The list of alert instances is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert
  /v1/projects/{projectName}/alerts/definitions:
    get:
      description: Gets a list of alert definitions
      operationId: getProjectAlertDefinitions
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              example:
                alerts:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    name: Alerts/Host/CPU/Utilization/Warning
                    state: applied
                    values:
                      duration: 5m
                      threshold: 80
                    version: 1
              schema:
                $ref: '#/components/schemas/AlertDefinitionList'
          description: The list of alert definitions is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/definitions/{alertDefinitionID}:
    get:
      description: Gets details of a single alert definition by its ID value
      operationId: getProjectAlertDefinition
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              example:
                id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                name: Alerts/Host/CPU/Utilization/Warning
                state: applied
                values:
                  duration: 5m
                  threshold: "80"
                version: 1
              schema:
                $ref: '#/components/schemas/AlertDefinition'
          description: The alert is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
    patch:
      description: Updates (patch) details of a single alert definition
      operationId: patchProjectAlertDefinition
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              values:
                duration: 10m
                enabled: "true"
                threshold: "67"
            schema:
              properties:
                values:
                  properties:
                    duration:
                      type: string
                    enabled:
                      type: string
                    threshold:
                      type: string
                  type: object
              type: object
        description: Payload that defines the properties to be updated
        required: true
      responses:
        "204":
          description: The alert definition is updated successfully
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/definitions/{alertDefinitionID}/template:
    get:
      description: Gets details of a rendered alerting rule based on alert template and values
      operationId: getProjectAlertDefinitionRule
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - $ref: '#/components/parameters/renderedTemplateQueryParam'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/AlertDefinitionTemplate'
          description: The rendered alerting rule based on alert template, is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/receivers:
    get:
      description: Gets a list of alert receivers
      operationId: getProjectAlertReceivers
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiverList'
          description: The list of alert receivers is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
  /v1/projects/{projectName}/alerts/receivers/{receiverID}:
    get:
      description: Gets details of a single alert receiver by its ID value
      operationId: getProjectAlertReceiver
      parameters:
        - $ref: '#/components/parameters/receiverId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receiver'
          description: The alert receiver is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
    patch:
      description: Updates (patch) details of a single alert receiver
      operationId: patchProjectAlertReceiver
      parameters:
        - $ref: '#/components/parameters/receiverId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                emailConfig:
                  $ref: '#/components/schemas/EmailConfigTo'
              required:
                - emailConfig
              type: object
        description: Payload that defines the properties to be updated
        required: true
      responses:
        "204":
          description: The alert receiver is updated successfully
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
  /v1/projects/{projectName}/appdeployment/clusters:
    get:
      description: Gets a list of all cluster objects.
      operationId: ClusterService_ListClusters
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which cluster list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list clusters.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of clusters to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which clusters list will be displayed. (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClustersResponse'
          description: OK
      summary: ListClusters
      tags:
        - ClusterService
  /v1/projects/{projectName}/appdeployment/clusters/{clusterId}:
    get:
      description: Gets a cluster object.
      operationId: ClusterService_GetCluster
      parameters:
        - description: Required. The id of the cluster.
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClusterResponse'
          description: OK
      summary: GetCluster
      tags:
        - ClusterService
  /v1/projects/{projectName}/appdeployment/deployments:
    get:
      description: Gets a list of all deployment objects.
      operationId: DeploymentService_ListDeployments
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which Deployment list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployments.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsResponse'
          description: OK
      summary: ListDeployments
      tags:
        - DeploymentService
    post:
      description: Creates a deployment object.
      operationId: DeploymentService_CreateDeployment
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
          description: OK
      summary: CreateDeployment
      tags:
        - DeploymentService
  /v1/projects/{projectName}/appdeployment/deployments/{deplId}:
    delete:
      description: Deletes a deployment object.
      operationId: DeploymentService_DeleteDeployment
      parameters:
        - description: Required. The id of the deployment to delete.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: 'Required. Different delete types to handle parent and child lists, for dependency support. Available options: PARENT_ONLY, ALL.'
          in: query
          name: deleteType
          schema:
            enum:
              - PARENT_ONLY
              - ALL
            format: enum
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteDeployment
      tags:
        - DeploymentService
    get:
      description: Gets a deployment object.
      operationId: DeploymentService_GetDeployment
      parameters:
        - description: Required. The id of the deployment to get.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
          description: OK
      summary: GetDeployment
      tags:
        - DeploymentService
    put:
      description: Updates a deployment object.
      operationId: DeploymentService_UpdateDeployment
      parameters:
        - description: Required. The id of the deployment to update.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentResponse'
          description: OK
      summary: UpdateDeployment
      tags:
        - DeploymentService
  /v1/projects/{projectName}/appdeployment/deployments/{deplId}/clusters:
    get:
      description: Gets a list of all deployment cluster objects.
      operationId: DeploymentService_ListDeploymentClusters
      parameters:
        - description: Required. The id of the deployment to get.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: Optional. Select field and order based on which Deployment cluster list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployment clusters.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment clusters to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment clusters list will be displayed. (E.g If there are 10 Deployment clusters, page size is 2 and offset is set as 4, then the response will display Deployment clusters 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentClustersResponse'
          description: OK
      summary: ListDeploymentClusters
      tags:
        - DeploymentService
  /v1/projects/{projectName}/compute/hosts:
    get:
      description: Get a list of hosts.
      operationId: HostService_ListHosts
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHostsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListHosts
      tags:
        - HostService
    post:
      description: Create a host.
      operationId: HostService_CreateHost
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/{resourceId}:
    delete:
      description: Delete a host.
      operationId: HostService_DeleteHost
      parameters:
        - description: Name of the host host to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteHost
      tags:
        - HostService
    get:
      description: Get a specific host.
      operationId: HostService_GetHost
      parameters:
        - description: Name of the requested host.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetHost
      tags:
        - HostService
    patch:
      description: Patch a host.
      operationId: HostService_PatchHost
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of host.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchHost
      tags:
        - HostService
    put:
      description: Update a host.
      operationId: HostService_UpdateHost
      parameters:
        - description: Name of the host host to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/{resourceId}/invalidate:
    put:
      description: Invalidate a host.
      operationId: HostService_InvalidateHost
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - in: query
          name: note
          schema:
            maxLength: 512
            minLength: 1
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidateHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: InvalidateHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/{resourceId}/onboard:
    patch:
      description: Onboard a host.
      operationId: HostService_OnboardHost
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: OnboardHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/{resourceId}/register:
    patch:
      description: Update a host register.
      operationId: HostService_RegisterUpdateHost
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegister'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: RegisterUpdateHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/register:
    post:
      description: Register a host.
      operationId: HostService_RegisterHost
      parameters:
        - in: query
          name: resourceId
          schema:
            pattern: ^host-[0-9a-f]{8}$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegister'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: RegisterHost
      tags:
        - HostService
  /v1/projects/{projectName}/compute/hosts/summary:
    get:
      description: Get a summary of the hosts status.
      operationId: HostService_GetHostsSummary
      parameters:
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHostSummaryResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetHostsSummary
      tags:
        - HostService
  /v1/projects/{projectName}/compute/instances:
    get:
      description: Get a list of instances.
      operationId: InstanceService_ListInstances
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstancesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListInstances
      tags:
        - InstanceService
    post:
      description: Create a instance.
      operationId: InstanceService_CreateInstance
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateInstance
      tags:
        - InstanceService
  /v1/projects/{projectName}/compute/instances/{resourceId}:
    delete:
      description: Delete a instance.
      operationId: InstanceService_DeleteInstance
      parameters:
        - description: Name of the instance instance to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInstanceResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteInstance
      tags:
        - InstanceService
    get:
      description: Get a specific instance.
      operationId: InstanceService_GetInstance
      parameters:
        - description: Name of the requested instance.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetInstance
      tags:
        - InstanceService
    patch:
      description: Patch a instance.
      operationId: InstanceService_PatchInstance
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of instance.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchInstance
      tags:
        - InstanceService
    put:
      description: Update a instance.
      operationId: InstanceService_UpdateInstance
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateInstance
      tags:
        - InstanceService
  /v1/projects/{projectName}/compute/instances/{resourceId}/invalidate:
    put:
      description: Invalidate a instance.
      operationId: InstanceService_InvalidateInstance
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidateInstanceResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: InvalidateInstance
      tags:
        - InstanceService
  /v1/projects/{projectName}/compute/os:
    get:
      description: Get a list of OSs.
      operationId: OperatingSystemService_ListOperatingSystems
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperatingSystemsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListOperatingSystems
      tags:
        - OperatingSystemService
    post:
      description: Create an OS
      operationId: OperatingSystemService_CreateOperatingSystem
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateOperatingSystem
      tags:
        - OperatingSystemService
  /v1/projects/{projectName}/compute/os/{resourceId}:
    delete:
      description: Delete an OS.
      operationId: OperatingSystemService_DeleteOperatingSystem
      parameters:
        - description: Name of the os os to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOperatingSystemResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteOperatingSystem
      tags:
        - OperatingSystemService
    get:
      description: Get a specific OS.
      operationId: OperatingSystemService_GetOperatingSystem
      parameters:
        - description: Name of the requested os.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetOperatingSystem
      tags:
        - OperatingSystemService
    patch:
      description: Patch an OS.
      operationId: OperatingSystemService_PatchOperatingSystem
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of os.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchOperatingSystem
      tags:
        - OperatingSystemService
    put:
      description: Update an OS.
      operationId: OperatingSystemService_UpdateOperatingSystem
      parameters:
        - description: Name of the os os to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateOperatingSystem
      tags:
        - OperatingSystemService
  /v1/projects/{projectName}/compute/schedules:
    get:
      description: Get a list of schedules (single/repeated).
      operationId: ScheduleService_ListSchedules
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: The host ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all the schedules without a host ID as target.
          in: query
          name: hostId
          schema:
            pattern: ^host-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all the schedules without a site ID as target
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: The region ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all the schedules without a region ID as target.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Filter based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.
          in: query
          name: unixEpoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSchedules
      tags:
        - ScheduleService
  /v1/projects/{projectName}/compute/workloads:
    get:
      description: Get a list of workloads.
      operationId: WorkloadService_ListWorkloads
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkloadsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListWorkloads
      tags:
        - WorkloadService
    post:
      description: Create a workload.
      operationId: WorkloadService_CreateWorkload
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateWorkload
      tags:
        - WorkloadService
  /v1/projects/{projectName}/compute/workloads/{resourceId}:
    delete:
      description: Delete a workload.
      operationId: WorkloadService_DeleteWorkload
      parameters:
        - description: Name of the workload workload to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkloadResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteWorkload
      tags:
        - WorkloadService
    get:
      description: Get a specific workload.
      operationId: WorkloadService_GetWorkload
      parameters:
        - description: Name of the requested workload.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetWorkload
      tags:
        - WorkloadService
    patch:
      description: Patch a workload.
      operationId: WorkloadService_PatchWorkload
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of workload.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchWorkload
      tags:
        - WorkloadService
    put:
      description: Update a workload.
      operationId: WorkloadService_UpdateWorkload
      parameters:
        - description: Name of the workload workload to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateWorkload
      tags:
        - WorkloadService
  /v1/projects/{projectName}/compute/workloads/{resourceId}/members:
    get:
      description: Get a list of workload_members.
      operationId: WorkloadMemberService_ListWorkloadMembers
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkloadMembersResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListWorkloadMembers
      tags:
        - WorkloadMemberService
    post:
      description: Create a workload_member.
      operationId: WorkloadMemberService_CreateWorkloadMember
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateWorkloadMember
      tags:
        - WorkloadMemberService
  /v1/projects/{projectName}/compute/workloads/{workloadResourceId}/members/{resourceId}:
    delete:
      description: Delete a workload_member.
      operationId: WorkloadMemberService_DeleteWorkloadMember
      parameters:
        - description: Name of the workload_member workload_member to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique workloadResourceId for the resource
          in: path
          name: workloadResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkloadMemberResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteWorkloadMember
      tags:
        - WorkloadMemberService
    get:
      description: Get a specific workload_member.
      operationId: WorkloadMemberService_GetWorkloadMember
      parameters:
        - description: Name of the requested workload_member.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique workloadResourceId for the resource
          in: path
          name: workloadResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetWorkloadMember
      tags:
        - WorkloadMemberService
  /v1/projects/{projectName}/deployments/clusters/{clusterId}:
    get:
      operationId: DeploymentService_ListDeploymentsPerCluster
      parameters:
        - in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which Deployment list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployments.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsPerClusterResponse'
          description: OK
      summary: ListDeploymentsPerCluster
      tags:
        - DeploymentService
  /v1/projects/{projectName}/localAccounts:
    get:
      description: Get a list of providers.
      operationId: LocalAccountService_ListLocalAccounts
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocalAccountsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListLocalAccounts
      tags:
        - LocalAccountService
    post:
      description: Create a localAccount.
      operationId: LocalAccountService_CreateLocalAccount
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalAccountResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateLocalAccount
      tags:
        - LocalAccountService
  /v1/projects/{projectName}/localAccounts/{resourceId}:
    delete:
      description: Delete a provider.
      operationId: LocalAccountService_DeleteLocalAccount
      parameters:
        - description: Name of the localaccount to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLocalAccountResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteLocalAccount
      tags:
        - LocalAccountService
    get:
      description: Get a specific provider.
      operationId: LocalAccountService_GetLocalAccount
      parameters:
        - description: Name of the requested localaccount.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetLocalAccount
      tags:
        - LocalAccountService
  /v1/projects/{projectName}/locations:
    get:
      description: Get a list of locations.
      operationId: LocationService_ListLocations
      parameters:
        - description: Filter locations by name
          in: query
          name: name
          schema:
            maxLength: 50
            pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
            type: string
        - description: Return site locations
          in: query
          name: showSites
          schema:
            type: boolean
        - description: Return region locations
          in: query
          name: showRegions
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListLocations
      tags:
        - LocationService
  /v1/projects/{projectName}/metadata:
    delete:
      description: Delete deletes the specified metadata, returning the newly updated set.
      operationId: MetadataService_Delete
      parameters:
        - in: query
          name: key
          schema:
            type: string
        - in: query
          name: value
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
    get:
      description: GetMetadata retrieves the most recently udpates set.
      operationId: MetadataService_GetMetadata
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
    post:
      description: CreateOrUpdateMetadata creates or updates the specified metadata, returning the newly updates set.
      operationId: MetadataService_CreateOrUpdateMetadata
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataList'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
  /v1/projects/{projectName}/providers:
    get:
      description: Get a list of providers.
      operationId: ProviderService_ListProviders
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListProviders
      tags:
        - ProviderService
    post:
      description: Create a provider.
      operationId: ProviderService_CreateProvider
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateProvider
      tags:
        - ProviderService
  /v1/projects/{projectName}/providers/{resourceId}:
    delete:
      description: Delete a provider.
      operationId: ProviderService_DeleteProvider
      parameters:
        - description: Name of the provider provider to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProviderResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteProvider
      tags:
        - ProviderService
    get:
      description: Get a specific provider.
      operationId: ProviderService_GetProvider
      parameters:
        - description: Name of the requested provider.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetProvider
      tags:
        - ProviderService
  /v1/projects/{projectName}/regions:
    get:
      description: Get a list of regions.
      operationId: RegionService_ListRegions
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: Flag to signal if the total amount of site in a region should be returned.
          in: query
          name: showTotalSites
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegionsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListRegions
      tags:
        - RegionService
    post:
      description: Create a region.
      operationId: RegionService_CreateRegion
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateRegion
      tags:
        - RegionService
  /v1/projects/{projectName}/regions/{regionResourceId}/sites/{resourceId}:
    delete:
      description: Delete a site.
      operationId: SiteService_DeleteSite
      parameters:
        - description: Name of the site site to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique regionResourceId for the resource
          in: path
          name: regionResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSiteResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteSite
      tags:
        - SiteService
    get:
      description: Get a specific site.
      operationId: SiteService_GetSite
      parameters:
        - description: Name of the requested site.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique regionResourceId for the resource
          in: path
          name: regionResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetSite
      tags:
        - SiteService
    patch:
      description: Patch a site.
      operationId: SiteService_PatchSite
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of site.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique regionResourceId for the resource
          in: path
          name: regionResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchSite
      tags:
        - SiteService
    put:
      description: Update a site.
      operationId: SiteService_UpdateSite
      parameters:
        - description: Name of the site site to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique regionResourceId for the resource
          in: path
          name: regionResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateSite
      tags:
        - SiteService
  /v1/projects/{projectName}/regions/{resourceId}:
    delete:
      description: Delete a region.
      operationId: RegionService_DeleteRegion
      parameters:
        - description: Name of the region region to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRegionResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteRegion
      tags:
        - RegionService
    get:
      description: Get a specific region.
      operationId: RegionService_GetRegion
      parameters:
        - description: Name of the requested region.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetRegion
      tags:
        - RegionService
    patch:
      description: Patch a region.
      operationId: RegionService_PatchRegion
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of region.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchRegion
      tags:
        - RegionService
    put:
      description: Update a region.
      operationId: RegionService_UpdateRegion
      parameters:
        - description: Name of the region region to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateRegion
      tags:
        - RegionService
  /v1/projects/{projectName}/regions/{resourceId}/sites:
    get:
      description: Get a list of sites.
      operationId: SiteService_ListSites
      parameters:
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Optional filter to return only item of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
            type: string
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSitesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSites
      tags:
        - SiteService
    post:
      description: Create a site.
      operationId: SiteService_CreateSite
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateSite
      tags:
        - SiteService
  /v1/projects/{projectName}/resource/endpoints/applications/{appId}/clusters/{clusterId}:
    get:
      description: Gets a list of all endpoints for an application of a deployment in a cluster.
      operationId: EndpointsService_ListAppEndpoints
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppEndpointsResponse'
          description: OK
      summary: ListAppEndpoints
      tags:
        - EndpointsService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}:
    get:
      description: Gets a list of all workloads for an application of a deployment in a cluster.
      operationId: AppWorkloadService_ListAppWorkloads
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppWorkloadsResponse'
          description: OK
      summary: ListAppWorkloads
      tags:
        - AppWorkloadService
  ? /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/restart
  : put:
      description: Restarts a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_RestartVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartVirtualMachineResponse'
          description: OK
      summary: RestartVirtualMachine
      tags:
        - VirtualMachineService
  ? /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/start
  : put:
      description: Starts a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_StartVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVirtualMachineResponse'
          description: OK
      summary: StartVirtualMachine
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/stop:
    put:
      description: Stops a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_StopVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopVirtualMachineResponse'
          description: OK
      summary: StopVirtualMachine
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/vnc:
    get:
      description: Accesses the VNC console to access a virtual machine.
      operationId: VirtualMachineService_GetVNC
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVNCResponse'
          description: OK
      summary: GetVNC
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/pods/clusters/{clusterId}/namespaces/{namespace}/pods/{podName}/delete:
    put:
      description: Deletes the pod for an application in a cluster.
      operationId: PodService_DeletePod
      parameters:
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Namespace that the pod is running on.
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the pod.
          in: path
          name: podName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePodResponse'
          description: OK
      summary: DeletePod
      tags:
        - PodService
  /v1/projects/{projectName}/schedules/repeated:
    get:
      description: Get a list of repeatedSchedules.
      operationId: ScheduleService_ListRepeatedSchedules
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: The host ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all the schedules without a host ID as target.
          in: query
          name: hostId
          schema:
            pattern: ^host-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all the schedules without a site ID as target
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: The region ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all the schedules without a region ID as target.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Filter based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.
          in: query
          name: unixEpoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepeatedSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListRepeatedSchedules
      tags:
        - ScheduleService
    post:
      description: Create a repeated_schedule.
      operationId: ScheduleService_CreateRepeatedSchedule
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateRepeatedSchedule
      tags:
        - ScheduleService
  /v1/projects/{projectName}/schedules/repeated/{resourceId}:
    delete:
      description: Delete a repeated_schedule.
      operationId: ScheduleService_DeleteRepeatedSchedule
      parameters:
        - description: Name of the repeated_schedule repeated_schedule to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepeatedScheduleResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteRepeatedSchedule
      tags:
        - ScheduleService
    get:
      description: Get a specific repeated_schedule.
      operationId: ScheduleService_GetRepeatedSchedule
      parameters:
        - description: Name of the requested repeated_schedule.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetRepeatedSchedule
      tags:
        - ScheduleService
    patch:
      description: Patch a repeated_schedule.
      operationId: ScheduleService_PatchRepeatedSchedule
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of repeated_schedule.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchRepeatedSchedule
      tags:
        - ScheduleService
    put:
      description: Update a repeated_schedule.
      operationId: ScheduleService_UpdateRepeatedSchedule
      parameters:
        - description: Name of the repeated_schedule repeated_schedule to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateRepeatedSchedule
      tags:
        - ScheduleService
  /v1/projects/{projectName}/schedules/single:
    get:
      description: Get a list of singleSchedules.
      operationId: ScheduleService_ListSingleSchedules
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: The host ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all the schedules without a host ID as target.
          in: query
          name: hostId
          schema:
            pattern: ^host-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all the schedules without a site ID as target
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: The region ID target of the schedules. If not specified, returns all schedules (given the other query params). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all the schedules without a region ID as target.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Filter based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.
          in: query
          name: unixEpoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSingleSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSingleSchedules
      tags:
        - ScheduleService
    post:
      description: Create a single_schedule.
      operationId: ScheduleService_CreateSingleSchedule
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateSingleSchedule
      tags:
        - ScheduleService
  /v1/projects/{projectName}/schedules/single/{resourceId}:
    delete:
      description: Delete a single_schedule.
      operationId: ScheduleService_DeleteSingleSchedule
      parameters:
        - description: Name of the single_schedule single_schedule to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSingleScheduleResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteSingleSchedule
      tags:
        - ScheduleService
    get:
      description: Get a specific single_schedule.
      operationId: ScheduleService_GetSingleSchedule
      parameters:
        - description: Name of the requested single_schedule.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetSingleSchedule
      tags:
        - ScheduleService
    patch:
      description: Patch a single_schedule.
      operationId: ScheduleService_PatchSingleSchedule
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of single_schedule.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchSingleSchedule
      tags:
        - ScheduleService
    put:
      description: Update a single_schedule.
      operationId: ScheduleService_UpdateSingleSchedule
      parameters:
        - description: Name of the single_schedule single_schedule to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateSingleSchedule
      tags:
        - ScheduleService
  /v1/projects/{projectName}/summary/deployments_status:
    get:
      description: Gets all deployment clusters count status.
      operationId: DeploymentService_GetDeploymentsStatus
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentsStatusResponse'
          description: OK
      summary: GetDeploymentsStatus
      tags:
        - DeploymentService
  /v1/projects/{projectName}/telemetry/loggroups:
    get:
      description: Get a list of telemetry_logs_groups.
      operationId: TelemetryLogsGroupService_ListTelemetryLogsGroups
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryLogsGroupsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryLogsGroups
      tags:
        - TelemetryLogsGroupService
    post:
      description: Create a telemetry_logs_group.
      operationId: TelemetryLogsGroupService_CreateTelemetryLogsGroup
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsGroupResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryLogsGroup
      tags:
        - TelemetryLogsGroupService
  /v1/projects/{projectName}/telemetry/loggroups/{loggroupResourceId}/logprofiles/{resourceId}:
    delete:
      description: Delete a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_DeleteTelemetryLogsProfile
      parameters:
        - description: Name of the telemetry_logs_profile telemetry_logs_profile to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique loggroupResourceId for the resource
          in: path
          name: loggroupResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryLogsProfileResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryLogsProfile
      tags:
        - TelemetryLogsProfileService
    get:
      description: Get a specific telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_GetTelemetryLogsProfile
      parameters:
        - description: Name of the requested telemetry_logs_profile.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique loggroupResourceId for the resource
          in: path
          name: loggroupResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryLogsProfile
      tags:
        - TelemetryLogsProfileService
    patch:
      description: Patch a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_PatchTelemetryLogsProfile
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of telemetry_logs_profile.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique loggroupResourceId for the resource
          in: path
          name: loggroupResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchTelemetryLogsProfile
      tags:
        - TelemetryLogsProfileService
    put:
      description: Update a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_UpdateTelemetryLogsProfile
      parameters:
        - description: Name of the telemetry_logs_profile telemetry_logs_profile to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique loggroupResourceId for the resource
          in: path
          name: loggroupResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateTelemetryLogsProfile
      tags:
        - TelemetryLogsProfileService
  /v1/projects/{projectName}/telemetry/loggroups/{resourceId}:
    delete:
      description: Delete a telemetry_logs_group.
      operationId: TelemetryLogsGroupService_DeleteTelemetryLogsGroup
      parameters:
        - description: Name of the telemetry_logs_group telemetry_logs_group to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryLogsGroupResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryLogsGroup
      tags:
        - TelemetryLogsGroupService
    get:
      description: Get a specific telemetry_logs_group.
      operationId: TelemetryLogsGroupService_GetTelemetryLogsGroup
      parameters:
        - description: Name of the requested telemetry_logs_group.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryLogsGroup
      tags:
        - TelemetryLogsGroupService
  /v1/projects/{projectName}/telemetry/loggroups/{resourceId}/logprofiles:
    get:
      description: Get a list of telemetryLogsProfiles.
      operationId: TelemetryLogsProfileService_ListTelemetryLogsProfiles
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given instance identifier.
          in: query
          name: instanceId
          schema:
            pattern: ^inst-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given siteID.
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given regionID.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Indicates if listed telemetry profiles should be extended with telemetry profiles rendered from hierarchy. This flag is only used along with one of siteId, regionId or instanceId. If siteId, regionId or instanceId are not set, this flag is ignored.
          in: query
          name: showInherited
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryLogsProfilesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryLogsProfiles
      tags:
        - TelemetryLogsProfileService
    post:
      description: Create a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_CreateTelemetryLogsProfile
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryLogsProfile
      tags:
        - TelemetryLogsProfileService
  /v1/projects/{projectName}/telemetry/metricgroups:
    get:
      description: Get a list of telemetryMetricsGroups.
      operationId: TelemetryMetricsGroupService_ListTelemetryMetricsGroups
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryMetricsGroupsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryMetricsGroups
      tags:
        - TelemetryMetricsGroupService
    post:
      description: Create a telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_CreateTelemetryMetricsGroup
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsGroupResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryMetricsGroup
      tags:
        - TelemetryMetricsGroupService
  /v1/projects/{projectName}/telemetry/metricgroups/{metricgroupResourceId}/metricprofiles/{resourceId}:
    delete:
      description: Delete a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_DeleteTelemetryMetricsProfile
      parameters:
        - description: Name of the telemetry_metrics_profile telemetry_metrics_profile to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique metricgroupResourceId for the resource
          in: path
          name: metricgroupResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryMetricsProfileResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryMetricsProfile
      tags:
        - TelemetryMetricsProfileService
    get:
      description: Get a specific telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_GetTelemetryMetricsProfile
      parameters:
        - description: Name of the requested telemetry_metrics_profile.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique metricgroupResourceId for the resource
          in: path
          name: metricgroupResourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryMetricsProfile
      tags:
        - TelemetryMetricsProfileService
    patch:
      description: Patch a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_PatchTelemetryMetricsProfile
      parameters:
        - description: ID of the resource to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: Field mask to be applied on the patch of telemetry_metrics_profile.
          in: query
          name: fieldMask
          schema:
            format: field-mask
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique metricgroupResourceId for the resource
          in: path
          name: metricgroupResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchTelemetryMetricsProfile
      tags:
        - TelemetryMetricsProfileService
    put:
      description: Update a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_UpdateTelemetryMetricsProfile
      parameters:
        - description: Name of the telemetry_metrics_profile telemetry_metrics_profile to be updated.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique metricgroupResourceId for the resource
          in: path
          name: metricgroupResourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateTelemetryMetricsProfile
      tags:
        - TelemetryMetricsProfileService
  /v1/projects/{projectName}/telemetry/metricgroups/{resourceId}:
    delete:
      description: Delete a telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_DeleteTelemetryMetricsGroup
      parameters:
        - description: Name of the telemetry_metrics_group telemetry_metrics_group to be deleted.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryMetricsGroupResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryMetricsGroup
      tags:
        - TelemetryMetricsGroupService
    get:
      description: Get a specific telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_GetTelemetryMetricsGroup
      parameters:
        - description: Name of the requested telemetry_metrics_group.
          in: path
          name: resourceId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryMetricsGroup
      tags:
        - TelemetryMetricsGroupService
  /v1/projects/{projectName}/telemetry/metricgroups/{resourceId}/metricprofiles:
    get:
      description: Get a list of telemetryMetricsProfiles.
      operationId: TelemetryMetricsProfileService_ListTelemetryMetricsProfiles
      parameters:
        - description: Defines the amount of items to be contained in a single page. Default of 20.
          in: query
          name: pageSize
          schema:
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - description: Index of the first item to return. This allows skipping items.
          in: query
          name: offset
          schema:
            format: int32
            maximum: 10000
            type: integer
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            maxLength: 1000
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given instance identifier.
          in: query
          name: instanceId
          schema:
            pattern: ^inst-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given siteID.
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given regionID.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Indicates if listed telemetry profiles should be extended with telemetry profiles rendered from hierarchy. This flag is only used along with one of siteId, regionId or instanceId. If siteId, regionId or instanceId are not set, this flag is ignored.
          in: query
          name: showInherited
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryMetricsProfilesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryMetricsProfiles
      tags:
        - TelemetryMetricsProfileService
    post:
      description: Create a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_CreateTelemetryMetricsProfile
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique resourceId for the resource
          in: path
          name: resourceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryMetricsProfile
      tags:
        - TelemetryMetricsProfileService
  /v1/projects/{projectName}/ui_extensions:
    get:
      description: Gets a list of all UIExtensions.
      operationId: DeploymentService_ListUIExtensions
      parameters:
        - description: Optional. A string array that filters service names to be displayed. Service names separated by a comma.
          in: query
          name: serviceName
          schema:
            items:
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUIExtensionsResponse'
          description: OK
      summary: ListUIExtensions
      tags:
        - DeploymentService
  /v1/status:
    get:
      description: Gets runtime status of the service
      operationId: getServiceStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: The runtime status of the service is retrieved successfully
      tags:
        - service
  /v2/projects/{projectName}/clusters:
    get:
      description: Gets all clusters' information.
      parameters:
        - description: The maximum number of items to return.
          example: /v2/clusters?pageSize=20
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 0
            type: integer
        - description: Index of the first item to return. It is almost always used in conjunction with the 'pageSize' query.
          example: /v2/clusters?pageSize=20&offset=10
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: The ordering of the entries. "asc" and "desc" are valid values. If none is specified, "asc" is used.
          examples:
            ascending:
              description: sort the entries by name entry in ascending order
              value: /v2/clusters?orderBy="name asc"
            default:
              description: Sorts the entries by name in ascending order as default when no order is specified.
              value: /v2/clusters?orderBy="name"
            descending:
              description: sort the entries by name entry in descending order
              value: /v2/clusters?orderBy="name desc"
          in: query
          name: orderBy
          schema:
            type: string
        - description: Filters the entries based on the filter provided.
          examples:
            multiple_filter:
              description: filter by cluster name with the prefix "foo" or with Kubernetes software v1.27.5.
              value: /v2/clusters?filter="name=foo* OR kubernetes_version=v2.27.5"
            single_filter_with_search_prefix:
              description: filter clusters whose cluster prefix has foo
              value: /v2/clusters?filter="name=foo*"
            single_filter_without_search_prefix:
              description: Filter by the cluster name "foo".
              value: /v2/clusters?filter="name=foo"
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  clusters:
                    items:
                      $ref: '#/components/schemas/ClusterInfo'
                    type: array
                  totalElements:
                    description: The count of items in the entire list, regardless of pagination.
                    format: int32
                    type: integer
                required:
                  - totalElements
                type: object
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    post:
      description: Creates a cluster.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterSpec'
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}:
    delete:
      description: Deletes the cluster {name}.
      responses:
        "204":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    get:
      description: Gets the cluster {name} information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDetailInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/kubeconfigs:
    get:
      description: Gets the cluster's kubeconfig file by its name {name}.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubeconfigInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Kubeconfigs
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z-_0-9. ]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/labels:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates cluster {name} labels.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLabels'
        required: true
      responses:
        "200":
          description: The cluster labels are updated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}/nodes:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates cluster {name} nodes.
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/NodeSpec'
              type: array
      responses:
        "200":
          description: The cluster nodes are updated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}/nodes/{nodeId}:
    delete:
      description: Deletes the cluster {name} node {nodeId}.
      responses:
        "200":
          description: The cluster node is operated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - example: 64e797f6-db22-445e-b606-4228d4f1c2bd
        in: path
        name: nodeId
        required: true
        schema:
          pattern: ^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$
          type: string
      - description: When set to true, force deletes the edge node.
        example: /v2/clusters/{name}/nodes/{nodeId}?force=true
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/template:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates the cluster {name} template.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterTemplateInfo'
      responses:
        "202":
          description: The cluster template update request is accepted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-NotImplemented'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{nodeId}/clusterdetail:
    get:
      description: Gets cluster detailed information by {nodeId}.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDetailInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
      tags:
        - Clusters
    parameters:
      - example: 64e797f6-db22-445e-b606-4228d4f1c2bd
        in: path
        name: nodeId
        required: true
        schema:
          pattern: ^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/summary:
    get:
      description: Gets all clusters' summarized by their state.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSummary'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/templates:
    get:
      description: Gets all templates' information
      parameters:
        - description: When set to true, gets only the default template information
          example: /v2/templates?default=true
          in: query
          name: default
          schema:
            default: false
            type: boolean
        - description: The maximum number of items to return.
          example: /v2/templates?pageSize=20
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 0
            type: integer
        - description: Index of the first item to return. It is almost always used in conjunction with the 'pageSize' query.
          example: /v2/templates?pageSize=20&offset=10
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: The ordering of the entries. "asc" and "desc" are valid values. If none is specified, "asc" is used.
          examples:
            ascending:
              description: sort the entries by name entry in ascending order
              value: /v2/templates?orderBy="name asc"
            default:
              description: Sorts the entries by name in ascending order as default when no order is specified.
              value: /v2/templates?orderBy="name"
            descending:
              description: sort the entries by name entry in descending order
              value: /v2/templates?orderBy="name desc"
          in: query
          name: orderBy
          schema:
            type: string
        - description: Filters the entries based on the filter provided.
          examples:
            multiple_filter:
              description: filter by template name with the prefix "foo" or with version v0.0.23
              value: /v2/templates?filter="name=foo* OR version=v0.0.23"
            single_filter_with_search_prefix:
              description: filter templates whose template prefix has foo
              value: /v2/templates?filter="name=foo*"
            single_filter_without_search_prefix:
              description: Filter by the template name "foo".
              value: /v2/templates?filter="name=foo"
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateInfoList'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    post:
      description: Import templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateInfo'
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
  /v2/projects/{projectName}/templates/{name}/default:
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates this template as the default template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultTemplateInfo'
      responses:
        "200":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
  /v2/projects/{projectName}/templates/{name}/versions:
    get:
      description: Gets all versions of templates matching a particular template name
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionList'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/templates/{name}/versions/{version}:
    delete:
      description: Deletes a specific template
      responses:
        "204":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    get:
      description: Gets a specific template information
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: Version of the template in the format of 'vX.Y.Z'
        example: v0.1.0
        in: path
        name: version
        required: true
        schema:
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v3/projects/{projectName}/catalog/applications:
    get:
      description: Gets a list of applications.
      operationId: CatalogService_ListApplications
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: List of application kinds to be returned; empty list means all kinds.
          in: query
          name: kinds
          schema:
            items:
              enum:
                - KIND_NORMAL
                - KIND_EXTENSION
                - KIND_ADDON
              format: enum
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationsResponse'
          description: OK
      summary: ListApplications
      tags:
        - CatalogService
    post:
      description: Creates a new application.
      operationId: CatalogService_CreateApplication
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
          description: OK
      summary: CreateApplication
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions:
    get:
      description: Gets all versions of a named application.
      operationId: CatalogService_GetApplicationVersions
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationVersionsResponse'
          description: OK
      summary: GetApplicationVersions
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions/{version}:
    delete:
      description: Deletes an application.
      operationId: CatalogService_DeleteApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteApplication
      tags:
        - CatalogService
    get:
      description: Gets a specific application.
      operationId: CatalogService_GetApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationResponse'
          description: OK
      summary: GetApplication
      tags:
        - CatalogService
    put:
      description: Updates an application.
      operationId: CatalogService_UpdateApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateApplication
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions/{version}/reference_count:
    get:
      description: Gets application reference count - the number of deployment packages using this application.
      operationId: CatalogService_GetApplicationReferenceCount
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationReferenceCountResponse'
          description: OK
      summary: GetApplicationReferenceCount
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/artifacts:
    get:
      description: Gets a list of artifacts.
      operationId: CatalogService_ListArtifacts
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
          description: OK
      summary: ListArtifacts
      tags:
        - CatalogService
    post:
      description: Creates a new artifact.
      operationId: CatalogService_CreateArtifact
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArtifactResponse'
          description: OK
      summary: CreateArtifact
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/artifacts/{artifactName}:
    delete:
      description: Deletes an artifact.
      operationId: CatalogService_DeleteArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteArtifact
      tags:
        - CatalogService
    get:
      description: Gets a specific artifact.
      operationId: CatalogService_GetArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtifactResponse'
          description: OK
      summary: GetArtifact
      tags:
        - CatalogService
    put:
      description: Updates an artifact.
      operationId: CatalogService_UpdateArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateArtifact
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/charts:
    get:
      description: Gets a list of registry chart names of chart versions.
      operationId: CatalogService_GetRegistryCharts
      parameters:
        - description: Names the HELM registry to be queried
          in: query
          name: registry
          schema:
            type: string
        - description: Optional name of the chart whose version list is desired.
          in: query
          name: chart
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: GetRegistryCharts
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages:
    get:
      description: Gets a list of deployment packages.
      operationId: CatalogService_ListDeploymentPackages
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: List of deployment package kinds to be returned; empty list means all kinds.
          in: query
          name: kinds
          schema:
            items:
              enum:
                - KIND_NORMAL
                - KIND_EXTENSION
                - KIND_ADDON
              format: enum
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentPackagesResponse'
          description: OK
      summary: ListDeploymentPackages
      tags:
        - CatalogService
    post:
      description: Creates a new deployment package.
      operationId: CatalogService_CreateDeploymentPackage
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentPackage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentPackageResponse'
          description: OK
      summary: CreateDeploymentPackage
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages/{deploymentPackageName}/versions:
    get:
      description: Gets all versions of a named deployment package.
      operationId: CatalogService_GetDeploymentPackageVersions
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentPackageVersionsResponse'
          description: OK
      summary: GetDeploymentPackageVersions
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages/{deploymentPackageName}/versions/{version}:
    delete:
      description: Deletes a deployment package.
      operationId: CatalogService_DeleteDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteDeploymentPackage
      tags:
        - CatalogService
    get:
      description: Gets a specific deployment package.
      operationId: CatalogService_GetDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentPackageResponse'
          description: OK
      summary: GetDeploymentPackage
      tags:
        - CatalogService
    put:
      description: Updates a deployment package.
      operationId: CatalogService_UpdateDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentPackage'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateDeploymentPackage
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/registries:
    get:
      description: Gets a list of registries.
      operationId: CatalogService_ListRegistries
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
          in: query
          name: showSensitiveInfo
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegistriesResponse'
          description: OK
      summary: ListRegistries
      tags:
        - CatalogService
    post:
      description: Creates a new registry.
      operationId: CatalogService_CreateRegistry
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRegistryResponse'
          description: OK
      summary: CreateRegistry
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/registries/{registryName}:
    delete:
      description: Deletes a registry.
      operationId: CatalogService_DeleteRegistry
      parameters:
        - description: Name of the registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteRegistry
      tags:
        - CatalogService
    get:
      description: Gets a specific registry.
      operationId: CatalogService_GetRegistry
      parameters:
        - description: Name of the registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
          in: query
          name: showSensitiveInfo
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryResponse'
          description: OK
      summary: GetRegistry
      tags:
        - CatalogService
    put:
      description: Updates a registry.
      operationId: CatalogService_UpdateRegistry
      parameters:
        - description: Name of the Registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateRegistry
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/upload:
    post:
      description: Allows uploading of a YAML files containing various application catalog entities.
      operationId: CatalogService_BulkCatalogUpload
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  items:
                    format: binary
                    type: string
                  type: array
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    errorMessages:
                      items:
                        type: string
                      type: array
                    sessionID:
                      type: string
                    uploadNumber:
                      type: integer
                  type: object
                type: array
          description: OK
      summary: BulkCatalogUpload
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/uploads:
    post:
      description: |-
        Allows uploading of a YAML file containing various application catalog entities. Multiple RPC invocations
         tagged with the same upload session ID can be used to upload multiple files and to create or update several
         catalog entities as a single transaction.
      operationId: CatalogService_UploadCatalogEntities
      parameters:
        - description: First upload request in the batch must not specify session ID. Subsequent upload requests must copy the session ID from the previously issued response.
          in: query
          name: sessionId
          schema:
            type: string
        - description: 'Deprecated: Upload number must increase sequentially, starting with 1.'
          in: query
          name: uploadNumber
          schema:
            format: uint32
            type: integer
        - description: Must be set to 'true' to perform load of all entity files uploaded as part of this session.
          in: query
          name: lastUpload
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadCatalogEntitiesResponse'
          description: OK
      summary: UploadCatalogEntities
      tags:
        - CatalogService
security:
  - BearerAuth: []
servers:
  - url: '{apiRoot}'
    variables:
      apiRoot:
        default: https://<multitenancy-gateway-host>
tags:
  - name: CatalogService
