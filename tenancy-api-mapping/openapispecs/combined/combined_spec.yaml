---
# SPDX-FileCopyrightText: 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

components:
  parameters:
    activeAlertsQueryFilter:
      description: Shows active alerts
      in: query
      name: active
      schema:
        default: true
        type: boolean
    alertDefinitionId:
      description: ID of an alert definition (UUID format)
      in: path
      name: alertDefinitionID
      required: true
      schema:
        format: uuid
        type: string
    alertsQueryFilter:
      description: Filters the alert definitions by name
      in: query
      name: alert
      schema:
        type: string
    appQueryFilter:
      description: Filters the alerts by application or deployment ID
      in: query
      name: app
      schema:
        type: string
    clusterQueryFilter:
      description: Filters the alerts by cluster ID
      in: query
      name: cluster
      schema:
        type: string
    hostQueryFilter:
      description: Filters the alerts by Host ID
      in: query
      name: host
      schema:
        type: string
    receiverId:
      description: ID of a receiver (UUID format)
      in: path
      name: receiverID
      required: true
      schema:
        format: uuid
        type: string
    renderedTemplateQueryParam:
      description: Specifies if template values will be rendered
      in: query
      name: rendered
      schema:
        default: false
        type: boolean
    suppressedAlertsQueryFilter:
      description: Shows suppressed alerts
      in: query
      name: suppressed
      schema:
        default: true
        type: boolean
  requestBodies:
    Createnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Post'
      description: Request used to create network.Network
      required: true
    Createnetwork.Network.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Status'
      description: Request used to create Status subresource of network.Network
    Createorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Post'
      description: Request used to create org.Org
      required: true
    Createorg.Org.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Status'
      description: Request used to create Status subresource of org.Org
    Createproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Post'
      description: Request used to create project.Project
      required: true
    Createproject.Project.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Status'
      description: Request used to create Status subresource of project.Project
  responses:
    "400":
      content:
        application/json:
          example:
            code: 400
            message: Bad Request
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Bad Request
    400-BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Object in payload is not properly formulated or not related to the method.
    401-Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request is not authenticated; it either does not contain a JSON Web Token (JWT) in its header, or the JWT is not valid.
    403-Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request is not authorized; it does not contain valid roles to perform a request.
    "404":
      content:
        application/json:
          example:
            code: 404
            message: Not Found
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Not Found
    404-NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: No resource is found at the URI.
    406-NotAcceptable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Response content is not acceptable according to the request's accept headers.
    408-Timeout:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request timeout.
    "409":
      content:
        application/json:
          example:
            code: 409
            message: Conflict
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Conflict
    409-Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Request could not be processed in the current state of the resource.
    412-PreconditionFailed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The server does not meet one of the preconditions that the requester put on the request header fields.
    "415":
      content:
        application/json:
          example:
            code: 415
            message: Unsupported Media Type
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Unsupported Media Type
    422-UnprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Unprocessable entity in parsing body request.
    429-TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Too many requests have been sent in a given amount of time.
    "500":
      content:
        application/json:
          example:
            code: 500
            message: Internal Server Error
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Internal Server Error
    500-InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The provider is currently unable to handle the request because of an internal error.
    501-NotImplemented:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The requested operation is not implemented.
    501-Unimplemented:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The resource or method is not implemented.
    "503":
      content:
        application/json:
          example:
            code: 503
            message: Server Unavailable
          schema:
            $ref: '#/components/schemas/HttpError'
      description: Service Unavailable
    503-ServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: The provider is currently unable to handle the request because of a temporary overload.
    DefaultResponse:
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
      description: Default response
    Getnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Get'
      description: Response returned back after getting network.Network object
    Getnetwork.Network.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.NamedLink'
      description: Response returned back after getting network.Network objects
    Getnetwork.Network.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.SingleLink'
      description: Response returned back after getting network.Network objects
    Getnetwork.Network.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.Status'
      description: Response returned back after getting status subresource of network.Network object
    Getorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Get'
      description: Response returned back after getting org.Org object
    Getorg.Org.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.NamedLink'
      description: Response returned back after getting org.Org objects
    Getorg.Org.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.SingleLink'
      description: Response returned back after getting org.Org objects
    Getorg.Org.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.Status'
      description: Response returned back after getting status subresource of org.Org object
    Getproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Get'
      description: Response returned back after getting project.Project object
    Getproject.Project.NamedLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.NamedLink'
      description: Response returned back after getting project.Project objects
    Getproject.Project.SingleLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.SingleLink'
      description: Response returned back after getting project.Project objects
    Getproject.Project.Status:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.Status'
      description: Response returned back after getting status subresource of project.Project object
    Listnetwork.Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/network.Network.List'
      description: Response returned back after getting network.Network objects
    Listorg.Org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org.Org.List'
      description: Response returned back after getting org.Org objects
    Listproject.Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/project.Project.List'
      description: Response returned back after getting project.Project objects
    NotFoundResponse:
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
      description: Not Found
  schemas:
    APIExtension:
      description: Details of API extension
      properties:
        name:
          description: Name of the API Extension.
          readOnly: true
          type: string
        token:
          description: Token for secure websocket connection between api-proxy and api-agent.
          readOnly: true
          type: string
      type: object
    AdminStatus:
      description: Represents the associated VirtualMachineInstance's state, either created (up state) or not (down state).
      properties:
        state:
          description: State information
          enum:
            - STATE_UP
            - STATE_DOWN
          format: enum
          type: string
      type: object
    Alert:
      properties:
        alertDefinitionId:
          format: uuid
          type: string
        annotations:
          additionalProperties:
            type: string
          type: object
        endsAt:
          format: date-time
          type: string
        fingerprint:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        startsAt:
          format: date-time
          type: string
        status:
          properties:
            state:
              enum:
                - suppressed
                - active
                - resolved
              type: string
          type: object
        updatedAt:
          format: date-time
          type: string
      type: object
    AlertDefinition:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        state:
          $ref: '#/components/schemas/StateDefinition'
        values:
          additionalProperties:
            type: string
          type: object
        version:
          type: integer
      type: object
    AlertDefinitionList:
      properties:
        alertDefinitions:
          items:
            $ref: '#/components/schemas/AlertDefinition'
          type: array
      type: object
    AlertDefinitionTemplate:
      properties:
        alert:
          type: string
        annotations:
          additionalProperties:
            type: string
          type: object
        expr:
          type: string
        for:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    AlertList:
      properties:
        alerts:
          items:
            $ref: '#/components/schemas/Alert'
          type: array
      type: object
    Amount:
      description: Defines an amount of resources related to memory and disk by default, specified in bytes.
      maxLength: 20
      minLength: 1
      pattern: ^[0-9]+$
      type: string
    App:
      description: Details of application.
      properties:
        id:
          description: Id of the app (same as Fleet bundle name) which is, concatenated from name and deploy_id (uid which comes from k8s).
          readOnly: true
          type: string
        name:
          description: The deployment package app name.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    AppEndpoint:
      description: Represents an endpoint for accessing the application outside of a cluster.
      properties:
        endpointStatus:
          $ref: '#/components/schemas/EndpointStatus'
        fqdns:
          description: Fully qualified domain name (FQDN) for external access.
          items:
            $ref: '#/components/schemas/Fqdn'
          readOnly: true
          type: array
        id:
          description: Endpoint object UID (e.g. service or ingress UID)
          format: uuid
          readOnly: true
          type: string
        name:
          description: Endpoint name
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          readOnly: true
          type: string
        ports:
          description: List of ports exposed by a service for external access
          items:
            $ref: '#/components/schemas/Port'
          readOnly: true
          type: array
      type: object
    AppWorkload:
      description: AppWorkload a high-level abstraction for representing different types of application workloads. The application workloads can be virtual machine-based or container-based.
      properties:
        createTime:
          description: The time when the workload is created.
          format: date-time
          readOnly: true
          type: string
        id:
          description: Workload UUID
          format: uuid
          type: string
        name:
          description: Workload name
          maxLength: 253
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$
          type: string
        namespace:
          description: Namespace where the workload is created.
          readOnly: true
          type: string
        pod:
          $ref: '#/components/schemas/Pod'
        type:
          description: Application workload type, e.g. virtual machine and pod.
          enum:
            - TYPE_VIRTUAL_MACHINE
            - TYPE_POD
          format: enum
          type: string
        virtualMachine:
          $ref: '#/components/schemas/VirtualMachine'
        workloadReady:
          description: Ready status to determines if a workload is fully functional or not.
          readOnly: true
          type: boolean
      required:
        - id
        - name
      type: object
    Application:
      description: Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
      properties:
        chartName:
          description: Helm chart name.
          maxLength: 200
          minLength: 1
          pattern: ^[0-9a-z-/]*$
          type: string
        chartVersion:
          description: Helm chart version.
          maxLength: 53
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,51}[a-z0-9]{0,1}$
          type: string
        createTime:
          description: The creation time of the application.
          format: date-time
          readOnly: true
          type: string
        defaultProfileName:
          description: Name of the profile to be used by default when deploying this application. If at least one profile is available, this field must be set.
          type: string
        description:
          description: Description of the application. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the application. When specified, it must be unique among all applications within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        helmRegistryName:
          description: ID of the project's registry where the Helm chart of the application is available for download.
          type: string
        ignoredResources:
          description: List of Kubernetes resources that must be ignored during the application deployment.
          items:
            $ref: '#/components/schemas/ResourceReference'
          type: array
        imageRegistryName:
          description: ID of the project's registry where the Docker image of the application is available for download.
          type: string
        kind:
          description: Field designating whether the application is a system add-on, system extension, or a normal application.
          enum:
            - KIND_NORMAL
            - KIND_EXTENSION
            - KIND_ADDON
          format: enum
          type: string
        name:
          description: Name is a human readable unique identifier for the application and must be unique for all applications of a given project. Used in network URIs.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
        profiles:
          description: Set of profiles that can be used when deploying the application.
          items:
            $ref: '#/components/schemas/Profile'
          type: array
        updateTime:
          description: The last update time of the application.
          format: date-time
          readOnly: true
          type: string
        version:
          description: Version of the application. Used in combination with the name to identify a unique application within a project.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
        - chartName
        - chartVersion
        - helmRegistryName
      type: object
    ApplicationDependency:
      description: ApplicationDependency represents the dependency of one application on another within the context of a deployment package. This dependency is specified as the name of the application that has the dependency, and the name of the application that is the dependency.
      properties:
        name:
          description: Name of the application that has the dependency on the other.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
        requires:
          description: Name of the application that is required by the other.
          maxLength: 26
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,24}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - requires
      type: object
    ApplicationReference:
      description: ApplicationReference represents a reference to an application by its name and its version.
      properties:
        name:
          description: Name of the referenced application.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        version:
          description: Version of the referenced application.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
      type: object
    Artifact:
      description: Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be used by multiple deployment packages.
      properties:
        artifact:
          description: Raw byte content of the artifact encoded as base64. The limits refer to the number of raw bytes.
          format: byte
          type: string
        createTime:
          description: The creation time of the artifact.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the artifact. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the artifact. When specified, it must be unique among all artifacts within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        mimeType:
          description: Artifact's MIME type. Only text/plain, application/json, application/yaml, image/png, and image/jpeg are allowed at this time. MIME types are defined and standardized in IETF's RFC 6838.
          maxLength: 40
          minLength: 1
          pattern: ^(text/plain)$|^(application/json)$|^(application/yaml)$|^(image/png)$|^(image/jpeg)$
          type: string
        name:
          description: Name is a human-readable unique identifier for the artifact and must be unique for all artifacts within a project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        updateTime:
          description: The last update time of the artifact.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
        - mimeType
        - artifact
      type: object
    ArtifactReference:
      description: ArtifactReference serves as a reference to an artifact, together with the artifact's purpose within a deployment package.
      properties:
        name:
          description: Name of the artifact.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        purpose:
          description: Purpose of the artifact, e.g. icon, thumbnail, Grafana dashboard, etc.
          maxLength: 20
          pattern: ^\PC*$
          type: string
      required:
        - name
        - purpose
      type: object
    Cluster:
      description: Details of cluster.
      properties:
        apps:
          description: Apps has per-app details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        id:
          description: ID is the cluster id which ECM generates and assigns to the Rancher cluster name.
          readOnly: true
          type: string
        name:
          description: Name is the display name which user provides and ECM creates and assigns clustername label to Fleet cluster object.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    ClusterDetailInfo:
      properties:
        controlPlaneReady:
          $ref: '#/components/schemas/GenericStatus'
        infrastructureReady:
          $ref: '#/components/schemas/GenericStatus'
        kubernetesVersion:
          type: string
        labels:
          type: object
        lifecyclePhase:
          $ref: '#/components/schemas/GenericStatus'
        name:
          type: string
        nodeHealth:
          $ref: '#/components/schemas/GenericStatus'
        nodes:
          items:
            $ref: '#/components/schemas/NodeInfo'
          type: array
        providerStatus:
          $ref: '#/components/schemas/GenericStatus'
        template:
          type: string
      type: object
    ClusterInfo:
      properties:
        controlPlaneReady:
          $ref: '#/components/schemas/GenericStatus'
        infrastructureReady:
          $ref: '#/components/schemas/GenericStatus'
        kubernetesVersion:
          type: string
        labels:
          type: object
        lifecyclePhase:
          $ref: '#/components/schemas/GenericStatus'
        name:
          type: string
        nodeHealth:
          $ref: '#/components/schemas/GenericStatus'
        nodeQuantity:
          example: 1
          maximum: 100
          minimum: 0
          type: integer
        providerStatus:
          $ref: '#/components/schemas/GenericStatus'
      type: object
    ClusterLabels:
      properties:
        labels:
          additionalProperties:
            description: The pattern for the label values. Label key patterns are validated as part of the request handler
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Labels are key/value pairs that need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
    ClusterSpec:
      properties:
        labels:
          additionalProperties:
            description: The pattern for the label values. Label key patterns are validated as part of the request handler.
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Labels are key/value pairs that need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
        name:
          maxLength: 63
          pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/NodeSpec'
          type: array
        template:
          maxLength: 63
          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      required:
        - nodes
      type: object
    ClusterSummary:
      properties:
        error:
          description: The number of clusters that are in error state.
          format: int32
          type: integer
        inProgress:
          description: The number of clusters that are in progess state (provisioning/deleting).
          format: int32
          type: integer
        ready:
          description: The number of clusters that are ready.
          format: int32
          type: integer
        totalClusters:
          description: The total number of clusters.
          format: int32
          type: integer
        unknown:
          description: The number of clusters that are in unknown state.
          format: int32
          type: integer
      required:
        - totalClusters
        - ready
        - error
        - inProgress
        - unknown
      type: object
    ClusterTemplateInfo:
      properties:
        name:
          description: Name of the template
          example: baseline
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
        version:
          description: Cluster template version in the format of 'vX.Y.Z'
          example: v0.1.0
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-dev)?$
          type: string
      required:
        - name
        - version
      type: object
    Container:
      description: Represents a container resource.
      properties:
        imageName:
          description: image_name container image name
          readOnly: true
          type: string
        name:
          description: Container name
          maxLength: 63
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9-]*[a-z0-9])?$
          type: string
        restartCount:
          description: Number of times that a container is restarted.
          format: int32
          readOnly: true
          type: integer
        status:
          $ref: '#/components/schemas/ContainerStatus'
      required:
        - name
      type: object
    ContainerStateRunning:
      description: Running status of a container.
      type: object
    ContainerStateTerminated:
      description: Termination status of a container.
      properties:
        exitCode:
          description: Exit code of the termination status.
          format: int32
          readOnly: true
          type: integer
        message:
          description: Message of the termination status.
          readOnly: true
          type: string
        reason:
          description: Reason of the termination.
          readOnly: true
          type: string
      type: object
    ContainerStateWaiting:
      description: Waiting status of a container including the reason and message.
      properties:
        message:
          description: Message of the waiting status.
          readOnly: true
          type: string
        reason:
          description: Reason of the waiting status.
          readOnly: true
          type: string
      type: object
    ContainerStatus:
      description: ContainerStatus status of a container
      properties:
        containerStateRunning:
          $ref: '#/components/schemas/ContainerStateRunning'
        containerStateTerminated:
          $ref: '#/components/schemas/ContainerStateTerminated'
        containerStateWaiting:
          $ref: '#/components/schemas/ContainerStateWaiting'
      type: object
    CreateApplicationResponse:
      description: Response message for the CreateApplication method.
      properties:
        application:
          $ref: '#/components/schemas/Application'
      required:
        - application
      type: object
    CreateArtifactResponse:
      description: Response message for the CreateArtifact method.
      properties:
        artifact:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact
      type: object
    CreateDeploymentPackageResponse:
      description: Response message for the CreateDeploymentPackage method.
      properties:
        deploymentPackage:
          $ref: '#/components/schemas/DeploymentPackage'
      required:
        - deploymentPackage
      type: object
    CreateDeploymentResponse:
      description: Response message for the CreateDeployment method.
      properties:
        deploymentId:
          description: Returns the new Deployment Id.
          type: string
      required:
        - deploymentId
      type: object
    CreateRegistryResponse:
      description: Response message for the CreateRegistry method.
      properties:
        registry:
          $ref: '#/components/schemas/Registry'
      required:
        - registry
      type: object
    DefaultTemplateInfo:
      properties:
        name:
          description: Name of the template. Not required when setting the default, is available in GET /v1/templates.
          example: baseline
          maxLength: 50
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
        version:
          description: Template version. If set to empty, the latest version will be used as default.
          example: v0.1.0
          maxLength: 63
          pattern: ^$|^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
          type: string
      required:
        - version
      type: object
    DeletePodResponse:
      description: Response message for the DeletePod method.
      type: object
    Deployment:
      description: Deployment defines the specification to deploy a Deployment Package onto a set of clusters.
      properties:
        allAppTargetClusters:
          $ref: '#/components/schemas/TargetClusters'
        appName:
          description: The deployment package name to deploy from the catalog.
          type: string
        appVersion:
          description: The version of the deployment package.
          type: string
        apps:
          description: Application details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        createTime:
          description: The creation time of the deployment.
          format: date-time
          readOnly: true
          type: string
        defaultProfileName:
          description: DEPRECATED - will remove in v2. Name of the default DeploymentProfile to use when deploying this DeploymentPackage. If no profileName is provided, use defaultProfileName from deployment package.
          readOnly: true
          type: string
        deployId:
          description: The id of the deployment.
          readOnly: true
          type: string
        deploymentType:
          description: The deployment type for the target cluster deployment can be either auto-scaling or targeted. In Auto-scaling type, the application will be automatically deployed on all the clusters which match the Target cluster label. In Targeted type, the user has to select among pre created clusters to deploy the application.
          type: string
        displayName:
          description: Deployment display name.
          type: string
        name:
          description: Deployment name (unique string assigned by Orchestrator).
          readOnly: true
          type: string
        networkName:
          description: network_name is the name of the interconnect network that deployment be part of
          type: string
        overrideValues:
          description: The Override values can be used to override any of the base profile values based on Deployment scenario.
          items:
            $ref: '#/components/schemas/OverrideValues'
          type: array
        profileName:
          description: The selected profile name to be used for the base Helm values of the different applications in the deployment package
          type: string
        publisherName:
          description: DEPRECATED - will remove in v2. Publisher of the deployment package.
          type: string
        serviceExports:
          items:
            $ref: '#/components/schemas/ServiceExport'
          type: array
        status:
          $ref: '#/components/schemas/Deployment_Status'
        targetClusters:
          description: Cluster labels on which we want to deploy the application.
          items:
            $ref: '#/components/schemas/TargetClusters'
          type: array
      required:
        - appName
        - appVersion
      type: object
    Deployment_Status:
      description: Status has details of the deployment.
      properties:
        message:
          readOnly: true
          type: string
        state:
          enum:
            - UNKNOWN
            - RUNNING
            - DOWN
            - INTERNAL_ERROR
            - DEPLOYING
            - UPDATING
            - TERMINATING
            - ERROR
            - NO_TARGET_CLUSTERS
          format: enum
          readOnly: true
          type: string
        summary:
          $ref: '#/components/schemas/Summary'
      type: object
    DeploymentInstancesCluster:
      properties:
        apps:
          description: Apps has per-app details.
          items:
            $ref: '#/components/schemas/App'
          readOnly: true
          type: array
        deploymentDisplayName:
          description: Deployment display name.
          type: string
        deploymentName:
          description: Deployment name (unique string assigned by Orchestrator).
          readOnly: true
          type: string
        deploymentUid:
          description: Deployment CR UID.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/Deployment_Status'
      type: object
    DeploymentPackage:
      description: DeploymentPackage represents a collection of applications (referenced by their name and a version) that are deployed together. The package can define one or more deployment profiles that specify the individual application profiles to be used when deploying each application. If applications need to be deployed in a particular order, the package can also define any startup dependencies between its constituent applications as a set of dependency graph edges. The deployment package can also refer to a set of artifacts used for miscellaneous purposes, e.g. a thumbnail, icon, or a Grafana extension.
      properties:
        applicationDependencies:
          description: Optional set of application deployment dependencies, expressed as (name, requires) pairs of edges in the deployment order dependency graph.
          items:
            $ref: '#/components/schemas/ApplicationDependency'
          type: array
        applicationReferences:
          description: List of applications comprising this deployment package. Expressed as (name, version) pairs.
          items:
            $ref: '#/components/schemas/ApplicationReference'
          type: array
        artifacts:
          description: Optional list of artifacts required for displaying or deploying this package. For example, icon or thumbnail artifacts can be used by the UI; Grafana\* dashboard definitions can be used by the deployment manager.
          items:
            $ref: '#/components/schemas/ArtifactReference'
          maxItems: 100
          type: array
        createTime:
          description: The creation time of the deployment package.
          format: date-time
          readOnly: true
          type: string
        defaultNamespaces:
          additionalProperties:
            type: string
          description: Optional map of application-to-namespace bindings to be used as a default when deploying the applications that comprise the package. If a namespace is not defined in the set of "namespaces" in this Deployment Package, it will be inferred that it is a simple namespace with no predefined labels or annotations.
          type: object
        defaultProfileName:
          description: Name of the default deployment profile to be used by default when deploying this package.
          type: string
        description:
          description: Description of the deployment package. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the deployment package. When specified, it must be unique among all packages within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        extensions:
          description: Optional list of API and UI extensions.
          items:
            $ref: '#/components/schemas/APIExtension'
          maxItems: 100
          type: array
        forbidsMultipleDeployments:
          description: Optional flag indicating whether multiple deployments of this package are forbidden within the same realm.
          type: boolean
        isDeployed:
          description: Flag indicating whether the deployment package has been deployed. The mutability of the deployment package entity can be limited when this flag is true. For example, one may not be able to update when an application is removed from a package after it has been marked as deployed.
          type: boolean
        isVisible:
          description: Flag indicating whether the deployment package is visible in the UI. Some deployment packages can be classified as auxiliary platform extensions and therefore are to be deployed indirectly only when specified as deployment requirements, rather than directly by the platform operator.
          type: boolean
        kind:
          description: Field designating whether the deployment package is a system add-on, system extension, or a normal package.
          enum:
            - KIND_NORMAL
            - KIND_EXTENSION
            - KIND_ADDON
          format: enum
          type: string
        name:
          description: Name is a human-readable unique identifier for the deployment package and must be unique for all packages of a given project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        namespaces:
          description: Namespace definitions to be created before resources are deployed. This allows complex namespaces to be defined with predefined labels and annotations. If not defined, simple namespaces will be created as needed.
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
        profiles:
          description: Set of deployment profiles to choose from when deploying this package.
          items:
            $ref: '#/components/schemas/DeploymentProfile'
          type: array
        updateTime:
          description: The last update time of the deployment package.
          format: date-time
          readOnly: true
          type: string
        version:
          description: Version of the deployment package.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
        - applicationReferences
        - extensions
        - artifacts
      type: object
    DeploymentProfile:
      description: DeploymentProfile specifies which application profiles will be used for deployment of which applications.
      properties:
        applicationProfiles:
          additionalProperties:
            type: string
          description: Application profiles map application names to the names of its profile, to be used when deploying the application as part of the deployment package together with the deployment profile.
          type: object
        createTime:
          description: The creation time of the deployment profile.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the deployment profile. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the registry. When specified, it must be unique among all profiles of a given package. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        name:
          description: Name is a human-readable unique identifier for the profile and must be unique for all profiles of a given deployment package.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        updateTime:
          description: The last update time of the deployment profile.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
        - applicationProfiles
      type: object
    DeploymentRequirement:
      description: DeploymentRequirement is a reference to the deployment package that must be deployed first, as a requirement for an application to be deployed.
      properties:
        deploymentProfileName:
          description: Optional name of the deployment profile to be used. When not provided, the default deployment profile will be used.
          type: string
        name:
          description: Name of the required deployment package.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        version:
          description: Version of the required deployment package.
          maxLength: 20
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-.]{0,18}[a-z0-9]{0,1}$
          type: string
      required:
        - name
        - version
      type: object
    Email:
      type: string
    EmailConfig:
      properties:
        from:
          $ref: '#/components/schemas/Email'
        mailServer:
          type: string
        to:
          properties:
            allowed:
              $ref: '#/components/schemas/EmailRecipientList'
            enabled:
              $ref: '#/components/schemas/EmailRecipientList'
          type: object
      type: object
    EmailConfigTo:
      properties:
        to:
          properties:
            enabled:
              $ref: '#/components/schemas/EmailRecipientList'
          required:
            - enabled
          type: object
      required:
        - to
      type: object
    EmailRecipientList:
      items:
        $ref: '#/components/schemas/Email'
      type: array
    Endpoint:
      description: Endpoint represents an application service endpoint.
      properties:
        appName:
          description: The name of the application providing this endpoint.
          maxLength: 40
          type: string
        authType:
          description: Authentication type expected by the endpoint.
          maxLength: 16
          pattern: ^[a-z]{0,16}$
          type: string
        externalPath:
          description: Externally accessible path to the endpoint.
          maxLength: 128
          minLength: 1
          type: string
        internalPath:
          description: Internally accessible path to the endpoint.
          maxLength: 128
          minLength: 1
          type: string
        scheme:
          description: Protocol scheme provided by the endpoint.
          maxLength: 32
          pattern: ^([a-z][a-z0-9-]{0,30}[a-z0-9]){0,1}$
          type: string
        serviceName:
          description: The name of the service hosted by the endpoint.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
      required:
        - serviceName
        - externalPath
        - internalPath
        - scheme
        - authType
      type: object
    EndpointStatus:
      description: Status of the endpoint.
      properties:
        state:
          description: Endpoint state, either Ready or NotReady.
          enum:
            - STATE_READY
            - STATE_NOT_READY
          format: enum
          readOnly: true
          type: string
      type: object
    Fqdn:
      description: Fully qualified domain name.
      properties:
        fqdn:
          format: hostname
          type: string
      type: object
    GenericStatus:
      description: A generic status object.
      properties:
        indicator:
          $ref: '#/components/schemas/StatusIndicator'
        message:
          description: A human-readable status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        timestamp:
          description: A Unix, UTC timestamp when the status was last updated.
          format: uint64
          readOnly: true
          type: integer
      readOnly: true
      required:
        - message
        - indicator
        - timestamp
      type: object
    GetAPIExtensionResponse:
      description: Response message for GetAPIExtension method.
      properties:
        apiExtension:
          $ref: '#/components/schemas/APIExtension'
      required:
        - apiExtension
      type: object
    GetApplicationReferenceCountResponse:
      description: Response message for the GetApplicationReferenceCount method.
      properties:
        referenceCount:
          format: uint32
          type: integer
      required:
        - referenceCount
      type: object
    GetApplicationResponse:
      description: Response message for the GetApplication method.
      properties:
        application:
          $ref: '#/components/schemas/Application'
      required:
        - application
      type: object
    GetApplicationVersionsResponse:
      description: Response message for the GetApplication method.
      properties:
        application:
          description: A list of applications with the same project and name.
          items:
            $ref: '#/components/schemas/Application'
          type: array
      required:
        - application
      type: object
    GetArtifactResponse:
      description: Response message for the GetArtifact method.
      properties:
        artifact:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact
      type: object
    GetClusterResponse:
      description: Response message for GetCluster method.
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
      type: object
    GetDeploymentPackageResponse:
      description: Response message for the GetDeploymentPackage method.
      properties:
        deploymentPackage:
          $ref: '#/components/schemas/DeploymentPackage'
      required:
        - deploymentPackage
      type: object
    GetDeploymentPackageVersionsResponse:
      description: Response message for the GetDeploymentPackageVersions method.
      properties:
        deploymentPackages:
          description: A list of DeploymentPackages with the same project and name.
          items:
            $ref: '#/components/schemas/DeploymentPackage'
          type: array
      required:
        - deploymentPackages
      type: object
    GetDeploymentResponse:
      description: Response message for the GetDeployment method.
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      required:
        - deployment
      type: object
    GetDeploymentsStatusResponse:
      description: Response message for the GetDeploymentsStatus method.
      properties:
        deploying:
          format: int32
          readOnly: true
          type: integer
        down:
          format: int32
          readOnly: true
          type: integer
        error:
          format: int32
          readOnly: true
          type: integer
        running:
          format: int32
          readOnly: true
          type: integer
        terminating:
          format: int32
          readOnly: true
          type: integer
        total:
          format: int32
          readOnly: true
          type: integer
        unknown:
          format: int32
          readOnly: true
          type: integer
        updating:
          format: int32
          readOnly: true
          type: integer
      type: object
    GetRegistryResponse:
      description: Response message for the GetRegistry method.
      properties:
        registry:
          $ref: '#/components/schemas/Registry'
      required:
        - registry
      type: object
    GetVNCResponse:
      description: Response message for the GetVNC method.
      properties:
        address:
          type: string
      required:
        - address
      type: object
    Host:
      description: A host resource.
      properties:
        biosReleaseDate:
          description: The release date of the host BIOS.
          readOnly: true
          type: string
        biosVendor:
          description: The vendor of the host BIOS.
          readOnly: true
          type: string
        biosVersion:
          description: The version of the host BIOS.
          readOnly: true
          type: string
        bmcIp:
          description: BMC IP address, such as "192.0.0.1".
          readOnly: true
          type: string
        bmcKind:
          description: The type of BMC.
          enum:
            - BAREMETAL_CONTROLLER_KIND_UNSPECIFIED
            - BAREMETAL_CONTROLLER_KIND_NONE
            - BAREMETAL_CONTROLLER_KIND_IPMI
            - BAREMETAL_CONTROLLER_KIND_VPRO
            - BAREMETAL_CONTROLLER_KIND_PDU
          format: enum
          readOnly: true
          type: string
        cpuArchitecture:
          description: Architecture of the CPU model, e.g. x86_64.
          readOnly: true
          type: string
        cpuCapabilities:
          description: String list of all CPU capabilities (possibly JSON).
          readOnly: true
          type: string
        cpuCores:
          description: Number of CPU cores.
          format: uint32
          readOnly: true
          type: integer
        cpuModel:
          description: CPU model of the host.
          readOnly: true
          type: string
        cpuSockets:
          description: Number of physical CPU sockets.
          format: uint32
          readOnly: true
          type: integer
        cpuThreads:
          description: Total number of threads supported by the CPU.
          format: uint32
          readOnly: true
          type: integer
        cpuTopology:
          description: A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.
          readOnly: true
          type: string
        currentPowerState:
          $ref: '#/components/schemas/HostPowerState'
        currentState:
          $ref: '#/components/schemas/HostState'
        desiredPowerState:
          $ref: '#/components/schemas/HostPowerState'
        desiredState:
          $ref: '#/components/schemas/HostState'
        hostGpus:
          description: The list of GPU capabilities.
          items:
            $ref: '#/components/schemas/HostResourcesGPU'
          readOnly: true
          type: array
        hostNics:
          description: The list of interface capabilities.
          items:
            $ref: '#/components/schemas/HostResourcesInterface'
          readOnly: true
          type: array
        hostStatus:
          description: The host's lifecycle status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        hostStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        hostStatusTimestamp:
          description: A Unix, UTC timestamp when the host's lifecycle status was last updated.
          format: uint64
          readOnly: true
          type: integer
        hostStorages:
          description: The list of storage capabilities.
          items:
            $ref: '#/components/schemas/HostResourcesStorage'
          readOnly: true
          type: array
        hostUsbs:
          description: The list of USB capabilities.
          items:
            $ref: '#/components/schemas/HostResourcesUSB'
          readOnly: true
          type: array
        hostname:
          description: The host name.
          readOnly: true
          type: string
        inheritedMetadata:
          $ref: '#/components/schemas/MetadataJoin'
        instance:
          $ref: '#/components/schemas/Instance'
        memoryBytes:
          description: Quantity of the RAM in the system, in bytes.
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The host name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        note:
          description: The note associated with the host.
          readOnly: true
          type: string
        onboardingStatus:
          description: The host's onboarding status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        onboardingStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        onboardingStatusTimestamp:
          description: A Unix, UTC timestamp when the host's onboarding status was last updated.
          format: uint64
          readOnly: true
          type: integer
        productName:
          description: The host's product name.
          readOnly: true
          type: string
        provider:
          $ref: '#/components/schemas/Provider'
        registrationStatus:
          description: The host's registration status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        registrationStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        registrationStatusTimestamp:
          description: A Unix, UTC timestamp when the host's registration status was last updated.
          format: uint64
          readOnly: true
          type: integer
        resourceId:
          description: Resource ID, generated on Create.
          pattern: ^host-[0-9a-f]{8}$
          readOnly: true
          type: string
        serialNumber:
          description: SMBIOS device serial number.
          readOnly: true
          type: string
        site:
          $ref: '#/components/schemas/Site'
        siteId:
          description: The site where the host is located.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        uuid:
          description: The host UUID identifier; UUID is unique and immutable.
          format: uuid
          maxLength: 36
          type: string
      required:
        - name
    HostOperationWithNote:
      description: A freeform field associated with the host invalidate or delete operations to store the reason for change.
      properties:
        note:
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          type: string
      required:
        - note
      title: HostOperationWithNote
      type: object
    HostPowerState:
      description: The representation of a host power state.
      enum:
        - POWER_STATE_UNSPECIFIED
        - POWER_STATE_ERROR
        - POWER_STATE_ON
        - POWER_STATE_OFF
      format: enum
      type: string
    HostRegisterInfo:
      description: Host registration information.
      properties:
        autoOnboard:
          default: false
          description: Set to enforce auto-onboarding of the host, which means that no confirmation will be required when the host connects for the first time, to Edge Orchestrator.
          type: boolean
        name:
          description: The host name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        serialNumber:
          description: The host's SMBIOS serial number.
          pattern: ^([A-Za-z0-9]{5,20})?$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        uuid:
          description: The host's UUID identifier.
          format: uuid
          maxLength: 36
          type: string
    HostResourcesGPU:
      description: The set of available host GPU cards.
      properties:
        capabilities:
          description: The specific GPU device capabilities [e.g., PCI Express*, MSI*, power management (PM)].
          items:
            type: string
          readOnly: true
          type: array
        description:
          description: The human-readable GPU device description.
          readOnly: true
          type: string
        deviceName:
          description: The GPU device name.
          readOnly: true
          type: string
        pciId:
          description: The GPU device's PCI identifier.
          readOnly: true
          type: string
        product:
          description: The GPU device model.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        vendor:
          description: The GPU device vendor.
          readOnly: true
          type: string
      type: object
    HostResourcesInterface:
      description: The set of available host interfaces.
      properties:
        bmcInterface:
          description: Defines if the card is the Baseboard Management Controller (BMC) interface.
          readOnly: true
          type: boolean
        deviceName:
          description: The interface name.
          readOnly: true
          type: string
        ipaddresses:
          description: The interface's IP address list.
          items:
            $ref: '#/components/schemas/IPAddress'
          readOnly: true
          type: array
        linkState:
          $ref: '#/components/schemas/LinkState'
        macAddr:
          description: The interface's MAC address.
          readOnly: true
          type: string
        mtu:
          $ref: '#/components/schemas/Amount'
        pciIdentifier:
          description: The interface's PCI identifier.
          readOnly: true
          type: string
        sriovEnabled:
          description: Flag that represents if the interface has SR-IOV support.
          readOnly: true
          type: boolean
        sriovVfsNum:
          description: The number of virtual functions (VFs) currently provisioned on the interface, if SR-IOV is supported.
          readOnly: true
          type: integer
        sriovVfsTotal:
          description: The maximum number of VFs the interface supports, if SR-IOV is supported.
          readOnly: true
          type: integer
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    HostResourcesStorage:
      description: The set of available host storage capabilities.
      properties:
        capacityBytes:
          $ref: '#/components/schemas/Amount'
        deviceName:
          description: The storage device name.
          readOnly: true
          type: string
        model:
          description: The storage model.
          readOnly: true
          type: string
        serial:
          description: The storage device's unique serial number.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        vendor:
          description: The storage vendor.
          readOnly: true
          type: string
        wwid:
          description: The storage device's unique identifier.
          readOnly: true
          type: string
      required:
        - capacity
      type: object
    HostResourcesUSB:
      description: The set of host USB resources.
      properties:
        addr:
          description: USB device number assigned by the OS.
          readOnly: true
          type: string
        bus:
          description: Bus number that the device connects to.
          readOnly: true
          type: string
        class:
          description: Class defined by USB Implementers Forum, Inc (USB-IF).
          readOnly: true
          type: string
        deviceName:
          description: The USB device name.
          readOnly: true
          type: string
        idProduct:
          description: Hexadecimal number representing the ID of the USB device product.
          readOnly: true
          type: string
        idVendor:
          description: Hexadecimal number representing the ID of the USB device vendor.
          readOnly: true
          type: string
        serial:
          description: Serial number of the USB device.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      type: object
    HostState:
      description: State of the host.
      enum:
        - HOST_STATE_UNSPECIFIED
        - HOST_STATE_DELETING
        - HOST_STATE_DELETED
        - HOST_STATE_ONBOARDED
        - HOST_STATE_UNTRUSTED
        - HOST_STATE_REGISTERED
      format: enum
      type: string
    HostsList:
      description: A list of host objects.
      properties:
        hasNext:
          description: Indicates if there are more hosts available to be retrieved.
          readOnly: true
          type: boolean
        hosts:
          items:
            $ref: '#/components/schemas/Host'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - hosts
        - hasNext
        - totalElements
      title: HostsList
      type: object
    HostsSummary:
      description: A summary of host object status.
      properties:
        error:
          minimum: 0
          readOnly: true
          type: integer
        running:
          minimum: 0
          readOnly: true
          type: integer
        total:
          minimum: 0
          readOnly: true
          type: integer
        unallocated:
          minimum: 0
          readOnly: true
          type: integer
      title: HostsSummary
      type: object
    HttpError:
      properties:
        code:
          maximum: 600
          minimum: 400
          type: integer
        message:
          type: string
      required:
        - message
        - code
      type: object
    IPAddress:
      description: An IP address represented using the CIDR notation, and additional information identifying the configuration mode of the address.
      properties:
        address:
          description: CIDR representation of the IP address.
          readOnly: true
          x-go-type: strfmt.CIDR
          x-go-type-import:
            path: github.com/go-openapi/strfmt
        configMethod:
          default: IP_ADDRESS_CONFIG_MODE_UNSPECIFIED
          description: Specifies how the IP address is configured.
          enum:
            - IP_ADDRESS_CONFIG_MODE_UNSPECIFIED
            - IP_ADDRESS_CONFIG_MODE_STATIC
            - IP_ADDRESS_CONFIG_MODE_DYNAMIC
          readOnly: true
          type: string
        status:
          default: IP_ADDRESS_STATUS_UNSPECIFIED
          description: The status of the IP address.
          enum:
            - IP_ADDRESS_STATUS_UNSPECIFIED
            - IP_ADDRESS_STATUS_ASSIGNMENT_ERROR
            - IP_ADDRESS_STATUS_ASSIGNED
            - IP_ADDRESS_STATUS_CONFIGURATION_ERROR
            - IP_ADDRESS_STATUS_CONFIGURED
            - IP_ADDRESS_STATUS_RELEASED
            - IP_ADDRESS_STATUS_ERROR
          readOnly: true
          type: string
        statusDetail:
          description: The details of the status of the IP address.
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - address
        - configMethod
      type: object
    Instance:
      description: An instance resource.
      properties:
        currentOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        currentState:
          $ref: '#/components/schemas/InstanceState'
        desiredOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        desiredState:
          $ref: '#/components/schemas/InstanceState'
        host:
          $ref: '#/components/schemas/Host'
        hostID:
          description: The host's unique identifier associated with the instance.
          pattern: ^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        instanceID:
          description: The instance's unique identifier. Alias of resourceID.
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          title: instance_id
          type: string
        instanceStatus:
          description: The instance's lifecycle status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        instanceStatusDetail:
          description: The detailed status of the instance's software components.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        instanceStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        instanceStatusTimestamp:
          description: A Unix, UTC timestamp when the instance's lifecycle status was last updated.
          format: uint64
          readOnly: true
          type: integer
        kind:
          $ref: '#/components/schemas/InstanceKind'
        localAccount:
          $ref: '#/components/schemas/LocalAccount'
        localAccountID:
          description: The unique identifier of local account will be associated with the instance.
          pattern: ^localaccount-[0-9a-f]{8}$
          title: localAccountResourceID
          type: string
          writeOnly: true
        name:
          description: The instance's human-readable name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        os:
          $ref: '#/components/schemas/OperatingSystemResource'
        osID:
          deprecated: true
          description: The unique identifier of OS resource that must be installed on the instance.
          pattern: ^os-[0-9a-f]{8}$
          title: osResourceID
          type: string
          writeOnly: true
        provisioningStatus:
          description: The instance's provisioning status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        provisioningStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        provisioningStatusTimestamp:
          description: A Unix, UTC timestamp when the instance's provisioning status was last updated.
          format: uint64
          readOnly: true
          type: integer
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          $ref: '#/components/schemas/SecurityFeature'
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        trustedAttestationStatus:
          description: The instance's software trusted attestation status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        trustedAttestationStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        trustedAttestationStatusTimestamp:
          description: A Unix, UTC timestamp when the instance's software trusted attestation status was last updated.
          format: uint64
          readOnly: true
          type: integer
        updateStatus:
          description: The instance's software update status message.
          maxLength: 1024
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          readOnly: true
          type: string
        updateStatusDetail:
          description: 'Beta: The detailed description of the instance''s last software update.'
          maxLength: 100000
          readOnly: true
          type: string
        updateStatusIndicator:
          $ref: '#/components/schemas/StatusIndicator'
        updateStatusTimestamp:
          description: A Unix, UTC timestamp when the instance's software update status was last updated.
          format: uint64
          readOnly: true
          type: integer
        workloadMembers:
          description: The workload members associated with the instance.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
    InstanceKind:
      description: Type of the instance.
      enum:
        - INSTANCE_KIND_UNSPECIFIED
        - INSTANCE_KIND_METAL
      format: enum
      type: string
    InstanceList:
      description: A list of instance objects.
      properties:
        hasNext:
          description: Indicates if there are more instance objects available to be retrieved.
          readOnly: true
          type: boolean
        instances:
          items:
            $ref: '#/components/schemas/Instance'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - instances
        - hasNext
        - totalElements
      title: InstanceList
      type: object
    InstanceState:
      description: State of the instance.
      enum:
        - INSTANCE_STATE_UNSPECIFIED
        - INSTANCE_STATE_RUNNING
        - INSTANCE_STATE_UNTRUSTED
        - INSTANCE_STATE_DELETED
      format: enum
      type: string
    KubeconfigInfo:
      properties:
        id:
          type: string
        kubeconfig:
          type: string
      type: object
    LinkState:
      description: A generic structure to define the state of a link.
      properties:
        timestamp:
          description: The timestamp when the link state was last updated.
          format: date-time
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        type:
          default: LINK_STATE_UNSPECIFIED
          description: the type of the state.
          enum:
            - LINK_STATE_UNSPECIFIED
            - LINK_STATE_UP
            - LINK_STATE_DOWN
          readOnly: true
          type: string
      required:
        - timestamp
        - type
      type: object
    ListAppEndpointsResponse:
      description: Response message for the ListAppEndpoints method.
      properties:
        appEndpoints:
          description: List of services.
          items:
            $ref: '#/components/schemas/AppEndpoint'
          readOnly: true
          type: array
      type: object
    ListAppWorkloadsResponse:
      description: Response message for the ListAppWorkloadsResponse method.
      properties:
        appWorkloads:
          description: A list of virtual machines.
          items:
            $ref: '#/components/schemas/AppWorkload'
          type: array
      type: object
    ListApplicationsResponse:
      description: Response message for the ListApplications method.
      properties:
        applications:
          description: A list of applications.
          items:
            $ref: '#/components/schemas/Application'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - applications
        - totalElements
      type: object
    ListArtifactsResponse:
      description: Response message for the ListArtifacts method.
      properties:
        artifacts:
          description: A list of artifacts.
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - artifacts
        - totalElements
      type: object
    ListClustersResponse:
      description: Response message for the ListClusters method.
      properties:
        clusters:
          description: A list of Cluster Objects.
          items:
            $ref: '#/components/schemas/ClusterInfo'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - clusters
        - totalElements
      type: object
    ListDeploymentClustersResponse:
      description: Response message for ListDeploymentClusters method.
      properties:
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - clusters
        - totalElements
      type: object
    ListDeploymentPackagesResponse:
      description: Response message for the ListDeploymentPackages method.
      properties:
        deploymentPackages:
          description: A list of DeploymentPackages.
          items:
            $ref: '#/components/schemas/DeploymentPackage'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - deploymentPackages
        - totalElements
      type: object
    ListDeploymentsPerClusterResponse:
      description: Response message for the ListDeploymentsPerCluster method.
      properties:
        deploymentInstancesCluster:
          description: A list of Deployment Instance Cluster Objects.
          items:
            $ref: '#/components/schemas/DeploymentInstancesCluster'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - deploymentInstancesCluster
        - totalElements
      type: object
    ListDeploymentsResponse:
      description: Response message for the ListDeployments method.
      properties:
        deployments:
          description: A list of Deployment Objects.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        totalElements:
          format: int32
          type: integer
      required:
        - deployments
        - totalElements
      type: object
    ListRegistriesResponse:
      description: Response message for the ListRegistries method.
      properties:
        registries:
          description: A list of registries.
          items:
            $ref: '#/components/schemas/Registry'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
        - registries
        - totalElements
      type: object
    ListUIExtensionsResponse:
      description: Response message for the ListUIExtensions method.
      properties:
        uiExtensions:
          description: A list of UIExtensions.
          items:
            $ref: '#/components/schemas/UIExtension'
          type: array
      required:
        - uiExtensions
      type: object
    LocalAccount:
      description: A local account resource.
      properties:
        localAccountID:
          description: The local account resource's unique identifier. Alias of resourceId.
          pattern: ^localaccount-[0-9a-f]{8}$
          readOnly: true
          title: localAccountID
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^localaccount-[0-9a-f]{8}$
          readOnly: true
          type: string
        sshKey:
          description: The local account's sshkey.
          maxLength: 800
          pattern: ^(ssh-ed25519|ecdsa-sha2-nistp521) ([A-Za-z0-9+/=]+) ?(.*)?$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        username:
          description: The local account's username.
          maxLength: 32
          pattern: ^[a-z][a-z0-9-]{0,31}$
          type: string
      required:
        - username
        - sshKey
      title: LocalAccount
      type: object
    LocalAccountList:
      description: A list of local account objects.
      properties:
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          readOnly: true
          type: boolean
        localAccounts:
          description: Array of local account objects.
          items:
            $ref: '#/components/schemas/LocalAccount'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - localAccounts
        - hasNext
        - totalElements
      title: LocalAccountList
      type: object
    LocationNode:
      description: A location node's resource, region, or site.
      properties:
        name:
          description: The node's human-readable name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          readOnly: true
          type: string
        parentId:
          description: The associated resource ID of the parent resource of this location node. For a region, it could be empty or a regionId. For a site, it could be empty or a regionId.
          readOnly: true
          type: string
        resourceId:
          description: The associated node's resource ID, generated by the inventory on Create.
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/LocationType'
      required:
        - resourceId
        - parentId
        - name
        - type
      type: object
    LocationNodeList:
      description: A LocationNodeList object. Contains all the required information to build a tree of regions and sites, given their associations.
      properties:
        nodes:
          description: The ordered list of nodes (root to leaf) of the location's hierarchy tree of regions and sites. The relationship of the root to leaf is limited by the maximum depth of seven items.
          items:
            $ref: '#/components/schemas/LocationNode'
          readOnly: true
          type: array
        outputElements:
          description: The number of items returned in the nodes's array that match the query parameters of the request.
          readOnly: true
          type: integer
        totalElements:
          description: The total number of items that match the query parameters of the request.
          readOnly: true
          type: integer
      required:
        - nodes
    LocationType:
      description: The type of the location node.
      enum:
        - RESOURCE_KIND_REGION
        - RESOURCE_KIND_SITE
      format: enum
      readOnly: true
      type: string
    Metadata:
      description: Metadata represents a single value of metadata.
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
      type: object
    MetadataJoin:
      description: The joint set of location's and host's logical metadata.
      properties:
        location:
          $ref: '#/components/schemas/Metadata'
        ou:
          $ref: '#/components/schemas/Metadata'
      type: object
    MetadataList:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/Metadata'
          type: array
      required:
        - metadata
      type: object
    MetadataResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/StoredMetadata'
          type: array
      required:
        - metadata
      type: object
    Namespace:
      description: Namespace represents a complex namespace definition with predefined labels and annotations. They are created before any other resources in the deployment.
      properties:
        annotations:
          additionalProperties:
            type: string
          type: object
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          description: namespace names must be valid RFC 1123 DNS labels. Avoid creating namespaces with the prefix `kube-`, since it is reserved for Kubernetes\* system namespaces. Avoid `default` - will already exist
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
      required:
        - name
      type: object
    NetworkRanges:
      properties:
        cidrBlocks:
          description: A list of CIDR blocks in valid CIDR notation.
          items:
            pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}/(?:[0-9]|[1-2][0-9]|3[0-2])$
            type: string
          type: array
      required:
        - cidrBlocks
    NodeInfo:
      properties:
        id:
          description: The unique identifier of this host.
          type: string
        role:
          type: string
        status:
          $ref: '#/components/schemas/StatusInfo'
      type: object
    NodeSpec:
      properties:
        id:
          description: The unique identifier of this host.
          type: string
        role:
          default: all
          enum:
            - all
            - controlplane
            - worker
          format: enum
          type: string
      required:
        - id
        - role
      type: object
    OU:
      description: An OU resource.
      properties:
        inheritedMetadata:
          $ref: '#/components/schemas/Metadata'
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The OU's name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          title: ou-name
          type: string
        ouID:
          description: The OU resource's unique identifier. Alias of resourceId.
          pattern: ^ou-[0-9a-f]{8}$
          readOnly: true
          title: ouID
          type: string
        ouKind:
          description: The kind of OU resource, e.g. BU and client.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        parentOu:
          description: The parent OU's unique identifier that the OU is associated to, when it exists.
          pattern: ^$|^ou-[0-9a-f]{8}$
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^ou-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - name
      title: OU
      type: object
    OUsList:
      description: A list of OU objects.
      properties:
        OUs:
          items:
            $ref: '#/components/schemas/OU'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more OU objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - OUs
        - hasNext
        - totalElements
      title: OUsList
      type: object
    OperatingSystemProvider:
      description: Describes the OS owner that drives the OS provisioning.
      enum:
        - OPERATING_SYSTEM_PROVIDER_UNSPECIFIED
        - OPERATING_SYSTEM_PROVIDER_INFRA
        - OPERATING_SYSTEM_PROVIDER_LENOVO
      format: enum
      type: string
    OperatingSystemResource:
      description: An OS resource.
      properties:
        architecture:
          description: The OS resource's architecture.
          maxLength: 20
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          title: architecture
          type: string
        imageId:
          description: A unique identifier of the OS image that can be retrieved from the running OS.
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          title: imageId
          type: string
        imageUrl:
          description: The URL repository of the OS image. If set, overwrites repoUrl.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          title: imageUrl
          type: string
        installedPackages:
          description: Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\" \\\n]+$
          title: installedPackages
          type: string
        kernelCommand:
          description: The OS resource's kernel command.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          title: kernelCommand
          type: string
        name:
          description: The OS resource's name.
          maxLength: 128
          pattern: ^[a-zA-Z-_0-9. ()]+$
          type: string
        osProvider:
          $ref: '#/components/schemas/OperatingSystemProvider'
        osResourceID:
          description: The OS resource's unique identifier. Alias of resourceId.
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          title: osResourceID
          type: string
        osType:
          $ref: '#/components/schemas/OperatingSystemType'
        platformBundle:
          description: Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.
          readOnly: true
          type: string
        profileName:
          description: Name of the OS profile that the OS resource belongs to.
          maxLength: 128
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          type: string
        profileVersion:
          description: Version of OS profile that the OS resource belongs to.
          readOnly: true
          type: string
        repoUrl:
          deprecated: true
          description: The URL repository of the OS update sources. Deprecated. Use imageUrl to filter repoUrl.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
          title: repoUrl
          type: string
        resourceId:
          description: Resource ID, generated by inventory on Create
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          $ref: '#/components/schemas/SecurityFeature'
        sha256:
          description: SHA256 checksum of the OS resource in hexadecimal representation.
          maxLength: 64
          minLength: 64
          pattern: ^[a-f0-9]+$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        updateSources:
          description: The list of OS resource update sources.
          items:
            maxLength: 10000
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*+()\" \\\n]+$
            type: string
          title: updateSources
          type: array
      required:
        - updateSources
        - sha256
      title: OperatingSystemResource
      type: object
    OperatingSystemResourceList:
      description: A list of OS resource objects.
      properties:
        OperatingSystemResources:
          items:
            $ref: '#/components/schemas/OperatingSystemResource'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more OS objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - OperatingSystemResources
        - hasNext
        - totalElements
      title: OperatingSystemResourceList
      type: object
    OperatingSystemType:
      description: OsType describes the immutability of the OS. This field is immutable after creation.
      enum:
        - OPERATING_SYSTEM_TYPE_UNSPECIFIED
        - OPERATING_SYSTEM_TYPE_MUTABLE
        - OPERATING_SYSTEM_TYPE_IMMUTABLE
      format: enum
      type: string
    OverrideValues:
      description: The Override values can be used to override any of the base helm values of applications based on Deployment scenario.
      properties:
        appName:
          description: deployment package name to use when overriding values.
          type: string
        targetNamespace:
          description: The namespace to deploy the app onto, default namespace is default.
          type: string
        values:
          description: The YAML representing Helm overrides
          type: object
      required:
        - appName
      type: object
    ParameterTemplate:
      description: ParameterTemplate describes override values for Helm chart values
      properties:
        default:
          description: Default value for the parameter.
          maxLength: 4096
          type: string
        displayName:
          description: Display name is an optional human-readable name for the template. It is used for display purposes on user interfaces.
          maxLength: 100
          pattern: ^\PC*$
          type: string
        mandatory:
          description: Optional mandatory flag for the parameter.
          type: boolean
        name:
          description: Human-readable name for the parameter template.
          maxLength: 4096
          minLength: 1
          pattern: ^[A-Za-z0-9-/_\[\]\.\\]*$
          type: string
        secret:
          description: Optional secret flag for the parameter.
          type: boolean
        suggestedValues:
          description: List of suggested values to use, to override the default value.
          items:
            maxLength: 4096
            minLength: 1
            type: string
          maxItems: 100
          type: array
        type:
          description: 'Type of parameter: string, number, or boolean.'
          minLength: 1
          pattern: ^(string)$|^(number)$|^(boolean)$
          type: string
        validator:
          description: Optional validator for the parameter. Usage TBD.
          maxLength: 40
          type: string
      required:
        - name
        - type
      type: object
    Pod:
      description: Represents a pod resource.
      properties:
        containers:
          description: containers list of containers per pod
          items:
            $ref: '#/components/schemas/Container'
          type: array
        status:
          $ref: '#/components/schemas/PodStatus'
      type: object
    PodStatus:
      description: The status of the pod during its lifecycle.
      properties:
        state:
          description: State information
          enum:
            - STATE_PENDING
            - STATE_RUNNING
            - STATE_SUCCEEDED
            - STATE_FAILED
          format: enum
          type: string
      type: object
    Port:
      description: Port information
      properties:
        name:
          description: Port name
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          readOnly: true
          type: string
        protocol:
          description: Protocol for a port.
          readOnly: true
          type: string
        serviceProxyUrl:
          description: Service proxy URL for a port.
          readOnly: true
          type: string
        value:
          description: Port value
          format: int32
          readOnly: true
          type: integer
      type: object
    ProblemDetails:
      description: Carries a message in an HTTP error response.
      properties:
        message:
          description: Contains detailed information about the problem, such as its source data that can be used for debugging purposes.
          readOnly: true
          type: string
      type: object
    Profile:
      description: Profile is a set of configuration values for customizing application deployment.
      properties:
        chartValues:
          description: Raw byte value containing the chart values as raw YAML bytes.
          maxLength: 4000000
          type: string
        createTime:
          description: The creation time of the profile.
          format: date-time
          readOnly: true
          type: string
        deploymentRequirement:
          description: List of deployment requirements for this profile.
          items:
            $ref: '#/components/schemas/DeploymentRequirement'
          type: array
        description:
          description: Description of the profile. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the profile. When specified, it must be unique among all profiles of a given application. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        name:
          description: Human-readable name for the profile. Unique among all profiles of the same application.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        parameterTemplates:
          description: Parameter templates available for this profile.
          items:
            $ref: '#/components/schemas/ParameterTemplate'
          type: array
        updateTime:
          description: The last update time of the profile.
          format: date-time
          readOnly: true
          type: string
      required:
        - name
      type: object
    Provider:
      description: A provider resource.
      properties:
        apiCredentials:
          description: The provider resource's list of credentials.
          items:
            maxLength: 500
            pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
            type: string
          title: apiCredentials
          type: array
        apiEndpoint:
          description: The provider resource's API endpoint.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          title: apiEndpoint
          type: string
        config:
          description: Opaque provider configuration.
          maxLength: 2000
          type: string
        name:
          description: The provider resource's name.
          maxLength: 40
          pattern: ^[a-zA-Z-_0-9. ]+$
          type: string
        providerID:
          description: The provider resource's unique identifier. Alias of resourceId.
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          title: providerID
          type: string
        providerKind:
          $ref: '#/components/schemas/ProviderKind'
        providerVendor:
          $ref: '#/components/schemas/ProviderVendor'
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - providerKind
        - name
        - apiEndpoint
      title: Provider
      type: object
    ProviderKind:
      description: Kind of provider.
      enum:
        - PROVIDER_KIND_UNSPECIFIED
        - PROVIDER_KIND_BAREMETAL
      format: enum
      type: string
    ProviderList:
      description: A list of provider objects.
      properties:
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          readOnly: true
          type: boolean
        providers:
          items:
            $ref: '#/components/schemas/Provider'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - providers
        - hasNext
        - totalElements
      title: ProviderList
      type: object
    ProviderVendor:
      description: Vendor of the provider.
      enum:
        - PROVIDER_VENDOR_UNSPECIFIED
        - PROVIDER_VENDOR_LENOVO_LXCA
        - PROVIDER_VENDOR_LENOVO_LOCA
      format: enum
      type: string
    Proxy:
      description: The proxy information.
      properties:
        ftpProxy:
          description: The FTP proxy.
          type: string
        httpProxy:
          description: The HTTP proxy.
          type: string
        httpsProxy:
          description: The HTTPS proxy.
          type: string
        noProxy:
          description: The no-proxy info.
          type: string
      type: object
    Receiver:
      properties:
        emailConfig:
          $ref: '#/components/schemas/EmailConfig'
        id:
          format: uuid
          type: string
        state:
          $ref: '#/components/schemas/StateDefinition'
        version:
          type: integer
      type: object
    ReceiverList:
      properties:
        receivers:
          items:
            $ref: '#/components/schemas/Receiver'
          type: array
      type: object
    Region:
      description: A region resource
      properties:
        inheritedMetadata:
          $ref: '#/components/schemas/Metadata'
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The region's name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          title: region-name
          type: string
        parentId:
          description: The parent region's unique identifier that the region is associated to, if it exists. This field cannot be used in filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        parentRegion:
          $ref: '#/components/schemas/Region'
        regionID:
          description: The region's unique identifier. Alias of resourceId.
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          title: regionID
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalSites:
          description: Total number of sites associated to this region, directly or by child regions.
          readOnly: true
          type: integer
      title: Region
      type: object
    RegionsList:
      description: A list of region objects.
      properties:
        hasNext:
          description: Indicates if there are more location objects available to be retrieved.
          readOnly: true
          type: boolean
        regions:
          items:
            $ref: '#/components/schemas/Region'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - regions
        - hasNext
        - totalElements
      title: RegionsList
      type: object
    Registry:
      description: Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
      properties:
        apiType:
          description: Optional type of the API used to obtain inventory of the articles hosted by the registry.
          maxLength: 16
          pattern: ^\PC*$
          type: string
        authToken:
          description: Optional authentication token or password for accessing the registry.
          maxLength: 1000
          pattern: ^\PC*$
          type: string
        cacerts:
          description: Optional CA certificates for accessing the registry using secure channels, such as HTTPS.
          maxLength: 16384
          type: string
        createTime:
          description: The creation time of the registry.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the registry. Displayed on user interfaces.
          maxLength: 1000
          type: string
        displayName:
          description: Display name is an optional human-readable name for the registry. When specified, it must be unique among all registries within a project. It is used for display purposes on user interfaces.
          maxLength: 40
          pattern: ^\PC*$
          type: string
        inventoryUrl:
          description: Optional URL of the API for accessing inventory of artifacts hosted by the registry.
          maxLength: 1000
          type: string
        name:
          description: Name is a human-readable unique identifier for the registry and must be unique for all registries of a given project.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-]{0,38}[a-z0-9]{0,1}$
          type: string
        rootUrl:
          description: Root URL for retrieving artifacts, e.g. Docker images and Helm charts, from the registry.
          maxLength: 1000
          minLength: 1
          pattern: ^(https?|oci)://[a-z0-9-]+(.[a-z0-9-]+)+([/?][\w_\-@:%.+~#?&/=]*)?$
          type: string
        type:
          description: Type indicates whether the registry holds Docker images or Helm charts; defaults to Helm charts.
          maxLength: 40
          minLength: 1
          pattern: ^(HELM)$|^(IMAGE)$
          type: string
        updateTime:
          description: The last update time of the registry.
          format: date-time
          readOnly: true
          type: string
        username:
          description: Optional username for accessing the registry.
          maxLength: 1000
          pattern: ^\PC*$
          type: string
      required:
        - name
        - rootUrl
        - type
      type: object
    RepeatedSchedule:
      description: A repeated-schedule resource.
      properties:
        cronDayMonth:
          pattern: ^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$
          type: string
        cronDayWeek:
          pattern: ^([*]|([0-6])((,([0-6]))*))$
          type: string
        cronHours:
          pattern: ^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$
          type: string
        cronMinutes:
          pattern: ^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$
          type: string
        cronMonth:
          pattern: ^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$
          type: string
        durationSeconds:
          description: The duration in seconds of the repeated schedule, per schedule.
          maximum: 86400
          minimum: 1
          title: durationSeconds
          type: integer
        name:
          description: The schedule's name.
          maxLength: 20
          pattern: ^[a-zA-Z-_0-9. ]+$
          type: string
        repeatedScheduleID:
          description: The repeated schedule's unique identifier. Alias of resourceId.
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          title: repeatedScheduleID
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          $ref: '#/components/schemas/ScheduleStatus'
        targetHost:
          $ref: '#/components/schemas/Host'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^host-[0-9a-f]{8}$
          title: targetHostId
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/Region'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          title: targetRegionId
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/Site'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^site-[0-9a-f]{8}$
          title: targetSiteId
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - durationSeconds
        - scheduleStatus
        - cronMinutes
        - cronHours
        - cronDayMonth
        - cronMonth
        - cronDayWeek
      title: SingleSchedule
      type: object
    RepeatedSchedulesList:
      description: A list of repeated schedule objects.
      properties:
        RepeatedSchedules:
          items:
            $ref: '#/components/schemas/RepeatedSchedule'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more repeated schedule objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - RepeatedSchedules
        - hasNext
        - totalElements
      title: RepeatedSchedulesList
      type: object
    ResourceReference:
      description: ResourceReference represents a Kubernetes resource identifier.
      properties:
        kind:
          description: Kubernetes resource kind, e.g. ConfigMap.
          maxLength: 40
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9._-]{0,38}[a-zA-Z0-9]{0,1}$
          type: string
        name:
          description: Kubernetes resource name.
          maxLength: 40
          minLength: 1
          pattern: ^[a-z0-9][a-z0-9-._-]{0,38}[a-z0-9]{0,1}$
          type: string
        namespace:
          description: Kubernetes namespace where the ignored resource resides. When empty, the application namespace will be used.
          type: string
      required:
        - name
        - kind
      type: object
    RestartVirtualMachineResponse:
      description: Response message for the RestartVirtualMachine method.
      type: object
    ScheduleStatus:
      description: The representation of a schedule's status.
      enum:
        - SCHEDULE_STATUS_UNSPECIFIED
        - SCHEDULE_STATUS_MAINTENANCE
        - SCHEDULE_STATUS_OS_UPDATE
      format: enum
      type: string
    SchedulesListJoin:
      description: List of all schedule objects, repeated and single.
      properties:
        RepeatedSchedules:
          description: Contains a flat list of repeated schedules, possibly including all inherited ones.
          items:
            $ref: '#/components/schemas/RepeatedSchedule'
          readOnly: true
          type: array
        SingleSchedules:
          description: Contains a flat list of single schedules, possibly including all inherited ones.
          items:
            $ref: '#/components/schemas/SingleSchedule'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more schedule objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - SingleSchedules
        - RepeatedSchedules
        - hasNext
        - totalElements
      type: object
    SecurityFeature:
      description: Security capabilities of a resource.
      enum:
        - SECURITY_FEATURE_UNSPECIFIED
        - SECURITY_FEATURE_NONE
        - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
      format: enum
      type: string
    ServiceExport:
      properties:
        appName:
          type: string
        enabled:
          type: boolean
      required:
        - appName
      type: object
    ServiceStatus:
      properties:
        state:
          enum:
            - ready
            - failed
          type: string
      required:
        - state
      type: object
    SingleSchedule:
      description: A single schedule resource.
      properties:
        endSeconds:
          description: The end time in seconds, of the single schedule. The value of endSeconds must be equal to or bigger than the value of startSeconds.
          maxLength: 19
          minLength: 1
          pattern: ^[0-9]+$
          title: endSeconds
          type: integer
        name:
          description: The schedule's name.
          maxLength: 20
          pattern: ^[a-zA-Z-_0-9. ]+$
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          $ref: '#/components/schemas/ScheduleStatus'
        singleScheduleID:
          description: The single schedule resource's unique identifier. Alias of resourceId.
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          title: singleScheduleID
          type: string
        startSeconds:
          description: The start time in seconds, of the single schedule.
          maxLength: 19
          minLength: 1
          pattern: ^[0-9]+$
          title: startSeconds
          type: integer
        targetHost:
          $ref: '#/components/schemas/Host'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^host-[0-9a-f]{8}$
          title: targetHostId
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/Region'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          title: targetRegionId
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/Site'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          pattern: ^$|^site-[0-9a-f]{8}$
          title: targetSiteId
          type: string
          writeOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - startSeconds
        - scheduleStatus
      title: SingleSchedule
      type: object
    SingleSchedulesList:
      description: A list of single schedule objects.
      properties:
        SingleSchedules:
          items:
            $ref: '#/components/schemas/SingleSchedule'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - SingleSchedules
        - hasNext
        - totalElements
      title: SingleSchedulesList
      type: object
    Site:
      description: A site resource.
      properties:
        dnsServers:
          description: The list of DNS servers that the site has available.
          items:
            maxLength: 100
            pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
            type: string
          title: site-dns-servers
          type: array
        dockerRegistries:
          description: The set of Docker* registries that the site has available.
          items:
            maxLength: 100
            pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
            type: string
          title: site-docker-registries
          type: array
        inheritedMetadata:
          $ref: '#/components/schemas/MetadataJoin'
        metadata:
          $ref: '#/components/schemas/Metadata'
        metricsEndpoint:
          description: The set of site-available metrics, specified in a single JSON object.
          maxLength: 100
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          title: site-metrics
          type: string
        name:
          description: The site's human-readable name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          title: site-name
          type: string
        ou:
          $ref: '#/components/schemas/OU'
        ouId:
          description: The OU unique identifier that the site is associated to, if it exists. This field cannot be used in filter.
          pattern: ^$|^ou-[0-9a-f]{8}$
          type: string
          writeOnly: true
        provider:
          $ref: '#/components/schemas/Provider'
        proxy:
          $ref: '#/components/schemas/Proxy'
        region:
          $ref: '#/components/schemas/Region'
        regionId:
          description: The region's unique identifier that the site is associated to. This field cannot be used in filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^site-[0-9a-f]{8}$
          readOnly: true
          type: string
        siteID:
          description: The site's unique identifier. Alias of resourceId.
          pattern: ^site-[0-9a-f]{8}$
          readOnly: true
          type: string
        siteLat:
          description: The geolocation latitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLat must be in the range of +/- 90 degrees.
          maximum: 9e+08
          minimum: -9e+08
          title: site-latitude
          type: integer
        siteLng:
          description: The geolocation longitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLng must be in the range of +/- 180 degrees (inclusive).
          maximum: 1.8e+09
          minimum: -1.8e+09
          title: site-longitude
          type: integer
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      title: Site
      type: object
    SitesList:
      description: A list of site objects.
      properties:
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          readOnly: true
          type: boolean
        sites:
          items:
            $ref: '#/components/schemas/Site'
          readOnly: true
          type: array
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - sites
        - hasNext
        - totalElements
      title: SitesList
      type: object
    StartVirtualMachineResponse:
      description: Response message for the StartVirtualMachine method.
      type: object
    StateDefinition:
      enum:
        - new
        - modified
        - pending
        - error
        - applied
      type: string
    StatusIndicator:
      description: The status indicator.
      enum:
        - STATUS_INDICATION_UNSPECIFIED
        - STATUS_INDICATION_ERROR
        - STATUS_INDICATION_IN_PROGRESS
        - STATUS_INDICATION_IDLE
      format: enum
      readOnly: true
      type: string
    StatusInfo:
      properties:
        condition:
          enum:
            - STATUS_CONDITION_UNKNOWN
            - STATUS_CONDITION_READY
            - STATUS_CONDITION_NOTREADY
            - STATUS_CONDITION_PROVISIONING
            - STATUS_CONDITION_REMOVING
          format: enum
          type: string
        reason:
          type: string
        timestamp:
          type: string
      type: object
    StopVirtualMachineResponse:
      description: Response message for the StopVirtualMachine method.
      type: object
    StoredMetadata:
      description: StoredMetadata represents all stored metadata values for a given key.
      properties:
        key:
          type: string
        values:
          items:
            type: string
          type: array
      required:
        - key
        - values
      type: object
    Summary:
      description: Count of status.
      properties:
        down:
          description: Number of down apps/clusters in the deployment.
          format: int32
          readOnly: true
          type: integer
        running:
          description: Number of running apps/clusters in the deployment, value from owned GitRepo objects.
          format: int32
          readOnly: true
          type: integer
        total:
          description: Total count of apps/clusters in the deployment, value from owned GitRepo objects.
          format: int32
          readOnly: true
          type: integer
        type:
          description: Type of thing that we're counting, ie clusters, apps.
          readOnly: true
          type: string
        unknown:
          description: Unknown status to indicate cluster not reachable.
          format: int32
          readOnly: true
          type: integer
      type: object
    TargetClusters:
      description: Set target clusters based on labels.
      properties:
        appName:
          description: The targeted deployment package name.
          type: string
        clusterId:
          description: Cluster id to match the target cluster when targeted deployment.
          type: string
        labels:
          additionalProperties:
            type: string
          description: Cluster labels to match the target cluster when auto-scaling deployment.
          type: object
      type: object
    TelemetryCollectorKind:
      description: Kind of telemetry collector.
      enum:
        - TELEMETRY_COLLECTOR_KIND_UNSPECIFIED
        - TELEMETRY_COLLECTOR_KIND_HOST
        - TELEMETRY_COLLECTOR_KIND_CLUSTER
      format: enum
      type: string
    TelemetryLogsGroup:
      description: Telemetry group that defines a set of log types to collect.
      properties:
        collectorKind:
          $ref: '#/components/schemas/TelemetryCollectorKind'
        groups:
          description: A list of log groups to collect.
          items:
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
            type: string
          type: array
        name:
          description: Human-readable name for the log group
          maxLength: 50
          minLength: 1
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        telemetryLogsGroupId:
          description: Unique ID of the telemetry group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          title: telemetryLogsGroupId
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - name
        - collectorKind
        - groups
    TelemetryLogsGroupList:
      description: A list of log group objects.
      properties:
        TelemetryLogsGroups:
          items:
            $ref: '#/components/schemas/TelemetryLogsGroup'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more log group objects available to be retrieved.
          readOnly: true
          type: boolean
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - TelemetryLogsGroups
        - hasNext
        - totalElements
      title: TelemetryLogsGroupList
      type: object
    TelemetryLogsProfile:
      description: A telemetry log profile for a hierarchy object.
      properties:
        logLevel:
          $ref: '#/components/schemas/TelemetrySeverityLevel'
        logsGroup:
          $ref: '#/components/schemas/TelemetryLogsGroup'
        logsGroupId:
          description: The unique identifier of the telemetry log group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          title: logsGroupId
          type: string
        profileId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - logsGroupId
        - logLevel
      type: object
    TelemetryLogsProfileList:
      description: A list of telemetry log profiles.
      properties:
        TelemetryLogsProfiles:
          items:
            $ref: '#/components/schemas/TelemetryLogsProfile'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more telemetry log profile objects available to be retrieved.
          readOnly: true
          type: boolean
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - TelemetryLogsProfiles
        - hasNext
        - totalElements
      title: TelemetryLogsProfileList
      type: object
    TelemetryMetricsGroup:
      description: A definition of metric groups to monitor.
      properties:
        collectorKind:
          $ref: '#/components/schemas/TelemetryCollectorKind'
        groups:
          description: A list of metric groups to collect.
          items:
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$
            type: string
          type: array
        name:
          description: Human-readable name for the metric group.
          maxLength: 50
          minLength: 1
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        telemetryMetricsGroupId:
          description: Unique ID of the telemetry group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          title: telemetryMetricsGroupId
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - name
        - collectorKind
        - groups
    TelemetryMetricsGroupList:
      description: A list of telemetry groups, which defines a set of metrics to collect.
      properties:
        TelemetryMetricsGroups:
          items:
            $ref: '#/components/schemas/TelemetryMetricsGroup'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more telemetry metric group objects available to be retrieved.
          readOnly: true
          type: boolean
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - TelemetryMetricsGroups
        - hasNext
        - totalElements
      title: TelemetryMetricsGroupList
      type: object
    TelemetryMetricsProfile:
      description: A telemetry metric profile for a hierarchy object.
      properties:
        metricsGroup:
          $ref: '#/components/schemas/TelemetryMetricsGroup'
        metricsGroupId:
          description: The unique identifier of the telemetry metric group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          title: metricsGroupId
          type: string
        metricsInterval:
          description: Metric interval (in seconds) for the telemetry profile. This field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
          minimum: 1
          type: integer
        profileId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
      required:
        - metricsGroupId
        - metricsInterval
      type: object
    TelemetryMetricsProfileList:
      description: A list of telemetry metric profiles.
      properties:
        TelemetryMetricsProfiles:
          items:
            $ref: '#/components/schemas/TelemetryMetricsProfile'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more telemetry metric profile objects available to be retrieved.
          readOnly: true
          type: boolean
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        totalElements:
          description: Total number of items that the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - TelemetryMetricsProfiles
        - hasNext
        - totalElements
      title: TelemetryLogsProfileList
      type: object
    TelemetrySeverityLevel:
      description: Log level used for the telemetry config. This field must only be defined if kind equals to TELEMETRY_CONFIG_KIND_LOGS.
      enum:
        - TELEMETRY_SEVERITY_LEVEL_UNSPECIFIED
        - TELEMETRY_SEVERITY_LEVEL_CRITICAL
        - TELEMETRY_SEVERITY_LEVEL_ERROR
        - TELEMETRY_SEVERITY_LEVEL_WARN
        - TELEMETRY_SEVERITY_LEVEL_INFO
        - TELEMETRY_SEVERITY_LEVEL_DEBUG
      format: enum
      type: string
    TemplateInfo:
      properties:
        cluster-labels:
          additionalProperties:
            maxLength: 63
            pattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
            type: string
          description: Allows users to specify a list of key/value pairs to be attached to a cluster created with the template. These pairs need to conform to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
          example:
            default-extension: demo
            dns.sub.domain/key-2: value-2.with.dots
            key-1: value-1
          type: object
        clusterNetwork:
          $ref: '#/components/schemas/clusterNetwork'
        clusterconfiguration:
          example:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: RKE2ControlPlaneTemplate
            metadata:
              name: baseline
            spec:
              agentConfig:
                kubelet:
                  extraArgs:
                    - --topology-manager-policy=best-effort
                    - --cpu-manager-policy=static
                    - --reserved-cpus=1
                    - --max-pods=250
                    - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              serverConfig:
                cni: calico
                disableComponents:
                  kubernetesComponents:
                    - cloudController
                etcd:
                  backupConfig: {}
                  extraArgs:
                    - --cipher-suites=[TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256]
                kubeApiServer:
                  extraArgs:
                    - --feature-gates=PortForwardWebsockets=true
                    - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                kubeControllerManager:
                  extraArg: null
                kubeScheduler:
                  extraArg: null
              version: v1.30.6+rke2r1
          type: object
        controlplaneprovidertype:
          default: rke2
          enum:
            - kubeadm
            - rke2
          type: string
        description:
          maxLength: 4096
          minLength: 1
          type: string
        infraprovidertype:
          default: intel
          enum:
            - docker
            - intel
          type: string
        kubernetesVersion:
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          type: string
        name:
          maxLength: 63
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
        version:
          maxLength: 63
          minLength: 1
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-dev)?$
          type: string
      required:
        - name
        - version
        - kubernetesVersion
      type: object
    TemplateInfoList:
      properties:
        defaultTemplateInfo:
          $ref: '#/components/schemas/DefaultTemplateInfo'
        templateInfoList:
          items:
            $ref: '#/components/schemas/TemplateInfo'
          type: array
        totalElements:
          description: The count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      type: object
    Timestamps:
      description: A structure to hold Update and Create timestamps.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
        - createdAt
        - updateAt
      type: object
    UIExtension:
      description: Details of UI Extension.
      properties:
        appName:
          description: The name of the application corresponding to this UI extension.
          type: string
        description:
          description: Description states the purpose of the dashboard that this UIExtension represents.
          type: string
        fileName:
          description: The name of the main file to load this specific UI extension.
          type: string
        label:
          description: Label represents a dashboard in the main UI.
          type: string
        moduleName:
          description: The application module to be loaded.
          type: string
        serviceName:
          description: The name of the API Extension endpoint.
          type: string
      required:
        - serviceName
        - description
        - label
        - fileName
        - appName
        - moduleName
      type: object
    UpdateDeploymentResponse:
      description: Response message for the UpdateDeployment method.
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      required:
        - deployment
      type: object
    Upload:
      description: Upload represents a single file-upload record.
      properties:
        artifact:
          description: Raw bytes content of the file being uploaded.
          format: byte
          type: string
        fileName:
          description: Name of the file being uploaded.
          type: string
      required:
        - fileName
        - artifact
      type: object
    UploadCatalogEntitiesResponse:
      description: Response message for the UploadCatalogItems method
      properties:
        errorMessages:
          description: Any error messages encountered either during YAML parsing or entity creation or update.
          items:
            type: string
          type: array
        sessionId:
          description: Session ID, generated by the server after the first upload request has been processed.
          type: string
        uploadNumber:
          description: 'Deprecated: Next expected upload number or total number of uploads on the last upload request.'
          format: uint32
          type: integer
      required:
        - sessionId
        - uploadNumber
      type: object
    VersionList:
      properties:
        versionList:
          items:
            maxLength: 2048
            minLength: 1
            type: string
          type: array
      type: object
    VirtualMachine:
      description: Represents a virtual machine.
      properties:
        adminStatus:
          $ref: '#/components/schemas/AdminStatus'
        status:
          $ref: '#/components/schemas/VirtualMachineStatus'
      type: object
    VirtualMachineStatus:
      description: Status of a virtual machine.
      properties:
        state:
          description: Virtual machine state
          enum:
            - STATE_STOPPED
            - STATE_PROVISIONING
            - STATE_STARTING
            - STATE_RUNNING
            - STATE_PAUSED
            - STATE_STOPPING
            - STATE_TERMINATING
            - STATE_CRASH_LOOP_BACKOFF
            - STATE_MIGRATING
            - STATE_ERROR_UNSCHEDULABLE
            - STATE_ERROR_IMAGE_PULL
            - STATE_ERROR_IMAGE_PULL_BACKOFF
            - STATE_ERROR_PVC_NOT_FOUND
            - STATE_ERROR_DATA_VOLUME
            - STATE_WAITING_FOR_VOLUME_BINDING
          format: enum
          type: string
      type: object
    Workload:
      description: A generic way to group compute resources to obtain a workload.
      properties:
        externalId:
          description: The ID of the external resource, used to link to resources outside the realm of Edge Infrastructure Manager.
          maxLength: 40
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        kind:
          $ref: '#/components/schemas/WorkloadKind'
        members:
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
        name:
          description: Human-readable name for the workload.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          type: string
        status:
          description: Human-readable status of the workload.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        workloadId:
          description: The workload's unique identifier. Alias of resourceId.
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          title: workloadId
          type: string
      required:
        - kind
        - members
    WorkloadKind:
      description: Type of workload.
      enum:
        - WORKLOAD_KIND_UNSPECIFIED
        - WORKLOAD_KIND_CLUSTER
      format: enum
      type: string
    WorkloadList:
      description: A list of workload objects.
      properties:
        Workloads:
          items:
            $ref: '#/components/schemas/Workload'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more workload objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - Workloads
        - hasNext
        - totalElements
      title: WorkloadList
      type: object
    WorkloadMember:
      description: A member of a workload.
      properties:
        instance:
          $ref: '#/components/schemas/Instance'
        instanceId:
          description: The unique identifier of the instance.
          pattern: ^inst-[0-9a-f]{8}$
          title: instanceId
          type: string
          writeOnly: true
        kind:
          description: Type of workload member.
          enum:
            - WORKLOAD_MEMBER_KIND_UNSPECIFIED
            - WORKLOAD_MEMBER_KIND_CLUSTER_NODE
          format: enum
          type: string
        member:
          $ref: '#/components/schemas/Instance'
        resourceId:
          description: resource ID, generated by the inventory on Create
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
        workload:
          $ref: '#/components/schemas/Workload'
        workloadId:
          description: The unique identifier of the workload.
          pattern: ^workload-[0-9a-f]{8}$
          title: workloadId
          type: string
          writeOnly: true
        workloadMemberId:
          description: The workload member's unique identifier. Alias of resourceId.
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          title: workloadMemberId
          type: string
      required:
        - resourceId
        - workloadMemberId
        - workloadId
        - kind
        - instanceId
    WorkloadMemberList:
      description: A list of workload member objects.
      properties:
        WorkloadMembers:
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
        hasNext:
          description: Indicates if there are more workload members objects available to be retrieved.
          readOnly: true
          type: boolean
        totalElements:
          description: Total number of items the request would return, if not limited by pagination.
          readOnly: true
          type: integer
      required:
        - WorkloadMembers
        - hasNext
        - totalElements
      title: WorkloadMemberList
      type: object
    clusterNetwork:
      description: Cluster network configuration, including pod and service CIDR blocks.
      properties:
        pods:
          $ref: '#/components/schemas/NetworkRanges'
        services:
          $ref: '#/components/schemas/NetworkRanges'
      type: object
    network.Network.Get:
      properties:
        spec:
          properties:
            description:
              type: string
            type:
              type: string
          type: object
        status:
          properties:
            status:
              properties:
                currentState:
                  type: string
          type: object
      type: object
    network.Network.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
              type:
                type: string
            type: object
          status:
            properties:
              status:
                properties:
                  currentState:
                    type: string
            type: object
        type: object
      type: array
    network.Network.NamedLink:
      items:
        type: object
      type: array
    network.Network.Post:
      properties:
        description:
          type: string
        type:
          type: string
      type: object
    network.Network.SingleLink:
      type: object
    network.Network.Status:
      properties:
        status:
          properties:
            currentState:
              type: string
      type: object
    org.Org.Get:
      properties:
        spec:
          properties:
            description:
              type: string
          type: object
        status:
          properties:
            orgStatus:
              properties:
                message:
                  type: string
                statusIndicator:
                  type: string
                timeStamp:
                  format: int64
                  type: integer
                uID:
                  type: string
          type: object
      type: object
    org.Org.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
            type: object
          status:
            properties:
              orgStatus:
                properties:
                  message:
                    type: string
                  statusIndicator:
                    type: string
                  timeStamp:
                    format: int64
                    type: integer
                  uID:
                    type: string
            type: object
        type: object
      type: array
    org.Org.NamedLink:
      items:
        type: object
      type: array
    org.Org.Post:
      properties:
        description:
          type: string
      type: object
    org.Org.SingleLink:
      type: object
    org.Org.Status:
      properties:
        orgStatus:
          properties:
            message:
              type: string
            statusIndicator:
              type: string
            timeStamp:
              format: int64
              type: integer
            uID:
              type: string
      type: object
    project.Project.Get:
      properties:
        spec:
          properties:
            description:
              type: string
          type: object
        status:
          properties:
            projectStatus:
              properties:
                message:
                  type: string
                statusIndicator:
                  type: string
                timeStamp:
                  format: int64
                  type: integer
                uID:
                  type: string
          type: object
      type: object
    project.Project.List:
      items:
        properties:
          name:
            type: string
          spec:
            properties:
              description:
                type: string
            type: object
          status:
            properties:
              projectStatus:
                properties:
                  message:
                    type: string
                  statusIndicator:
                    type: string
                  timeStamp:
                    format: int64
                    type: integer
                  uID:
                    type: string
            type: object
        type: object
      type: array
    project.Project.NamedLink:
      items:
        type: object
      type: array
    project.Project.Post:
      properties:
        description:
          type: string
      type: object
    project.Project.SingleLink:
      type: object
    project.Project.Status:
      properties:
        projectStatus:
          properties:
            message:
              type: string
            statusIndicator:
              type: string
            timeStamp:
              format: int64
              type: integer
            uID:
              type: string
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    HTTP:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: Tenancy aware APIs for the Open Edge Platform services
  title: Multi tenancy APIs
  version: 1.3.2
openapi: 3.0.3
paths:
  /v1/orgs:
    get:
      operationId: LIST__v1_orgs
      responses:
        "200":
          $ref: '#/components/responses/Listorg.Org'
      tags:
        - Org
  /v1/orgs/{org.Org}:
    delete:
      operationId: DELETE__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Org
    get:
      operationId: GET__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org'
      tags:
        - Org
    put:
      operationId: PUT__v1_orgs_org_Org
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createorg.Org'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Org
  /v1/orgs/{org.Org}/Folders:
    get:
      operationId: GET__v1_orgs_org_Org_Folders
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org.NamedLink'
      tags:
        - Org
  /v1/orgs/{org.Org}/status:
    get:
      operationId: GET__v1_orgs_org_Org_status
      parameters:
        - description: Name of the org.Org node
          in: path
          name: org.Org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getorg.Org.Status'
      tags:
        - Org
  /v1/projects:
    get:
      operationId: LIST__v1_projects
      parameters:
        - in: query
          name: member-role
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Listproject.Project'
      tags:
        - Project
  /v1/projects/{project.Project}:
    delete:
      operationId: DELETE__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Project
    get:
      operationId: GET__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project'
      tags:
        - Project
    put:
      operationId: PUT__v1_projects_project_Project
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createproject.Project'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Project
  /v1/projects/{project.Project}/Networks:
    get:
      operationId: GET__v1_projects_project_Project_Networks
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project.NamedLink'
      tags:
        - Project
  /v1/projects/{project.Project}/networks:
    get:
      operationId: LIST__v1_projects_project_Project_networks
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Listnetwork.Network'
      tags:
        - Network
  /v1/projects/{project.Project}/networks/{network.Network}:
    delete:
      operationId: DELETE__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          description: No content
      tags:
        - Network
    get:
      operationId: GET__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getnetwork.Network'
      tags:
        - Network
    put:
      operationId: PUT__v1_projects_project_Project_networks_network_Network
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
        - description: If set to false, disables update of preexisting object. Default value is true
          in: query
          name: update_if_exists
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/requestBodies/Createnetwork.Network'
      responses:
        "200":
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - Network
  /v1/projects/{project.Project}/networks/{network.Network}/status:
    get:
      operationId: GET__v1_projects_project_Project_networks_network_Network_status
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
        - description: Name of the network.Network node
          in: path
          name: network.Network
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getnetwork.Network.Status'
      tags:
        - Network
  /v1/projects/{project.Project}/status:
    get:
      operationId: GET__v1_projects_project_Project_status
      parameters:
        - description: Name of the project.Project node
          in: path
          name: project.Project
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Getproject.Project.Status'
      tags:
        - Project
  /v1/projects/{projectName}/alerts:
    get:
      description: Gets a list of alert instances
      operationId: getProjectAlerts
      parameters:
        - $ref: '#/components/parameters/alertsQueryFilter'
        - $ref: '#/components/parameters/hostQueryFilter'
        - $ref: '#/components/parameters/clusterQueryFilter'
        - $ref: '#/components/parameters/appQueryFilter'
        - $ref: '#/components/parameters/activeAlertsQueryFilter'
        - $ref: '#/components/parameters/suppressedAlertsQueryFilter'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
          description: The list of alert instances is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert
  /v1/projects/{projectName}/alerts/definitions:
    get:
      description: Gets a list of alert definitions
      operationId: getProjectAlertDefinitions
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              example:
                alerts:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    name: Alerts/Host/CPU/Utilization/Warning
                    state: applied
                    values:
                      duration: 5m
                      threshold: 80
                    version: 1
              schema:
                $ref: '#/components/schemas/AlertDefinitionList'
          description: The list of alert definitions is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/definitions/{alertDefinitionID}:
    get:
      description: Gets details of a single alert definition by its ID value
      operationId: getProjectAlertDefinition
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              example:
                id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                name: Alerts/Host/CPU/Utilization/Warning
                state: applied
                values:
                  duration: 5m
                  threshold: "80"
                version: 1
              schema:
                $ref: '#/components/schemas/AlertDefinition'
          description: The alert is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
    patch:
      description: Updates (patch) details of a single alert definition
      operationId: patchProjectAlertDefinition
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              values:
                duration: 10m
                enabled: "true"
                threshold: "67"
            schema:
              properties:
                values:
                  properties:
                    duration:
                      type: string
                    enabled:
                      type: string
                    threshold:
                      type: string
                  type: object
              type: object
        description: Payload that defines the properties to be updated
        required: true
      responses:
        "204":
          description: The alert definition is updated successfully
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/definitions/{alertDefinitionID}/template:
    get:
      description: Gets details of a rendered alerting rule based on alert template and values
      operationId: getProjectAlertDefinitionRule
      parameters:
        - $ref: '#/components/parameters/alertDefinitionId'
        - $ref: '#/components/parameters/renderedTemplateQueryParam'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/AlertDefinitionTemplate'
          description: The rendered alerting rule based on alert template, is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-definition
  /v1/projects/{projectName}/alerts/receivers:
    get:
      description: Gets a list of alert receivers
      operationId: getProjectAlertReceivers
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiverList'
          description: The list of alert receivers is retrieved successfully
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
  /v1/projects/{projectName}/alerts/receivers/{receiverID}:
    get:
      description: Gets details of a single alert receiver by its ID value
      operationId: getProjectAlertReceiver
      parameters:
        - $ref: '#/components/parameters/receiverId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receiver'
          description: The alert receiver is found
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
    patch:
      description: Updates (patch) details of a single alert receiver
      operationId: patchProjectAlertReceiver
      parameters:
        - $ref: '#/components/parameters/receiverId'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                emailConfig:
                  $ref: '#/components/schemas/EmailConfigTo'
              required:
                - emailConfig
              type: object
        description: Payload that defines the properties to be updated
        required: true
      responses:
        "204":
          description: The alert receiver is updated successfully
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      tags:
        - alert-receiver
  /v1/projects/{projectName}/appdeployment/clusters:
    get:
      description: Gets a list of all cluster objects.
      operationId: ClusterService_ListClusters
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which cluster list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list clusters.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of clusters to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which clusters list will be displayed. (E.g If there are 10 clusters, page size is 2 and offset is set as 4, then the response will display clusters 5 and 6).
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClustersResponse'
          description: OK
      summary: ListClusters
      tags:
        - ClusterService
  /v1/projects/{projectName}/appdeployment/clusters/{clusterId}:
    get:
      description: Gets a cluster object.
      operationId: ClusterService_GetCluster
      parameters:
        - description: Required. The id of the cluster.
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClusterResponse'
          description: OK
      summary: GetCluster
      tags:
        - ClusterService
  /v1/projects/{projectName}/appdeployment/deployments:
    get:
      description: Gets a list of all deployment objects.
      operationId: DeploymentService_ListDeployments
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which Deployment list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployments.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsResponse'
          description: OK
      summary: ListDeployments
      tags:
        - DeploymentService
    post:
      description: Creates a deployment object.
      operationId: DeploymentService_CreateDeployment
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
          description: OK
      summary: CreateDeployment
      tags:
        - DeploymentService
  /v1/projects/{projectName}/appdeployment/deployments/{deplId}:
    delete:
      description: Deletes a deployment object.
      operationId: DeploymentService_DeleteDeployment
      parameters:
        - description: Required. The id of the deployment to delete.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: 'Required. Different delete types to handle parent and child lists, for dependency support. Available options: PARENT_ONLY, ALL.'
          in: query
          name: deleteType
          schema:
            enum:
              - PARENT_ONLY
              - ALL
            format: enum
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteDeployment
      tags:
        - DeploymentService
    get:
      description: Gets a deployment object.
      operationId: DeploymentService_GetDeployment
      parameters:
        - description: Required. The id of the deployment to get.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
          description: OK
      summary: GetDeployment
      tags:
        - DeploymentService
    put:
      description: Updates a deployment object.
      operationId: DeploymentService_UpdateDeployment
      parameters:
        - description: Required. The id of the deployment to update.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentResponse'
          description: OK
      summary: UpdateDeployment
      tags:
        - DeploymentService
  /v1/projects/{projectName}/appdeployment/deployments/{deplId}/clusters:
    get:
      description: Gets a list of all deployment cluster objects.
      operationId: DeploymentService_ListDeploymentClusters
      parameters:
        - description: Required. The id of the deployment to get.
          in: path
          name: deplId
          required: true
          schema:
            type: string
        - description: Optional. Select field and order based on which Deployment cluster list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployment clusters.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment clusters to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment clusters list will be displayed. (E.g If there are 10 Deployment clusters, page size is 2 and offset is set as 4, then the response will display Deployment clusters 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentClustersResponse'
          description: OK
      summary: ListDeploymentClusters
      tags:
        - DeploymentService
  /v1/projects/{projectName}/compute:
    get:
      description: Gets a compute object
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          examples:
            example1:
              summary: through Host's Site-Id
              value: site.resourceId="site-3b382a11"
            example2:
              summary: through Metadata
              value: metadata='{"key":"exampleKey","value":"exampleValue"}'
            example3:
              summary: through Serial Number
              value: serialNumber="xxxxx"
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          description: Returns only the compute elements that are assigned with the given site ID. If equals to 'null', then it returns all the hosts not associated with any site.
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: Returns only the compute elements that are assigned to the given instanceID. If equals to 'null', then it returns all the hosts not associated with any instance.
          in: query
          name: instanceID
          schema:
            pattern: ^inst-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: Returns the compute elements associated with the given UUID. UUID field cannot be null, if specified needs to be filled.
          in: query
          name: uuid
          schema:
            maxLength: 36
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
            type: string
        - deprecated: true
          description: Filters the metadata associated with the compute element. Values are expected to be in the form of 'key=value'.
          in: query
          name: metadata
          schema:
            items:
              pattern: ^[a-zA-Z-_0-9. ]+=[a-zA-Z-_0-9. ]+$
              type: string
            type: array
        - deprecated: true
          description: Indicates if compute elements identified by the filter need to be returned with all their respective child resources, e.g., USBs, Interfaces, Storages.
          in: query
          name: detail
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
          description: A compute object
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Compute
  /v1/projects/{projectName}/compute/hosts:
    get:
      description: Gets all host objects
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          examples:
            example1:
              summary: Through the host's site ID
              value: site.resourceId="site-3b382a11"
            example2:
              summary: Through the metadata
              value: metadata='{"key":"exampleKey","value":"exampleValue"}'
            example3:
              summary: Through the serial number
              value: serialNumber="xxxxx"
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          description: Returns only the hosts that are assigned with the given site ID. If equals to 'null', then it returns all the hosts not associated with any site.
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: Returns only the hosts that are assigned to the given instanceID. If equals to 'null', then it returns all the hosts not associated with any instance.
          in: query
          name: instanceID
          schema:
            pattern: ^inst-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: Returns the host associated with the given UUID. UUID field cannot be null, if specified needs to be filled.
          in: query
          name: uuid
          schema:
            maxLength: 36
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
            type: string
        - description: Filters the metadata associated with the Host. Values are expected to be in the form 'key=value'.
          in: query
          name: metadata
          schema:
            items:
              pattern: ^[a-zA-Z-_0-9. ]+=[a-zA-Z-_0-9. ]+$
              type: string
            type: array
        - deprecated: true
          description: Indicates if the host identified by the filter needs to be returned with all their respective child resources, e.g., USBs, interfaces, and storages.
          in: query
          name: detail
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
          description: Array of all host objects
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
    post:
      description: Creates a compute host.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: The host was created.
          headers:
            Location:
              description: Contains the URI of the created host.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/{hostID}:
    delete:
      description: Deletes a host.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostOperationWithNote'
      responses:
        "204":
          description: The host was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
    get:
      description: Queries a host through the host ID.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: The requested instance based on it's ID
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
    parameters:
      - description: The unique host identifier
        in: path
        name: hostID
        required: true
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a host.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
              properties:
                uuid:
                  deprecated: true
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: The host was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
    put:
      description: Updates a host.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
              properties:
                uuid:
                  deprecated: true
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: The host was updated
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/{hostID}/invalidate:
    parameters:
      - description: The unique host identifier
        in: path
        name: hostID
        required: true
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Invalidates a host by marking it as untrusted. Once invalidated, a Host will no longer be able to communicate with Edge Infrastructure Manager unless it is deleted and provisioned again.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostOperationWithNote'
      responses:
        "200":
          description: The host was invalidated
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/{hostID}/onboard:
    parameters:
      - description: The unique host identifier.
        in: path
        name: hostID
        required: true
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Onboards a host to Edge Orchestrator.
      responses:
        "200":
          description: The host was onboarded.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/{hostID}/register:
    parameters:
      - description: The unique host identifier.
        in: path
        name: hostID
        required: true
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Updates a host registration information.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/HostRegisterInfo'
                - properties:
                    serialNumber:
                      readOnly: true
                    uuid:
                      readOnly: true
        required: true
      responses:
        "200":
          description: The host registration information was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/register:
    post:
      description: Registers a host by providing unique identifiers.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegisterInfo'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: The host was registered.
          headers:
            Location:
              description: Contains the URI of the registered host.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/hosts/summary:
    get:
      description: Gets the summary of host objects.
      parameters:
        - deprecated: true
          description: The site ID the hosts belong to. If not specified, returns the summary of all hosts. If specified, returns the summary of hosts that have the given site ID applied to them.
          in: query
          name: siteID
          schema:
            deprecated: true
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          examples:
            example1:
              summary: Through the host's site ID
              value: site.resourceId="site-3b382a11"
            example2:
              summary: Through the metadata
              value: metadata='{"key":"exampleKey","value":"exampleValue"}'
            example3:
              summary: Through the serial number
              value: serialNumber="xxxxx"
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsSummary'
          description: 'A summary of host objects associated with the given site ID. '
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Host
  /v1/projects/{projectName}/compute/instances:
    get:
      description: Gets all instance objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
          examples:
            example1:
              summary: Through the instance's host ID
              value: host.resourceId="host-3b382a11"
            example2:
              summary: Through the instance's name
              value: name="instance name example"
            example3:
              summary: Through the instance's OS ID
              value: os.resourceId="os-a3b1c66d"
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - allowEmptyValue: true
          deprecated: true
          description: Returns only the instances that are assigned to the given workload member. If equals to 'null', returns all instances not associated with any workload member. If equal to '' (empty string), returns all instances that have a workload member associated.
          in: query
          name: workloadMemberID
          schema:
            pattern: ^$|^workloadmember-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: Returns the instances associated with the host with the given host ID.
          in: query
          name: hostID
          schema:
            pattern: ^host-[0-9a-f]{8}$
            type: string
        - deprecated: true
          description: Returns the instances associated with the hosts in the site identified. by the given siteID
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
          description: Array of all instance objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
    post:
      description: Creates an instance.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Instance'
              required:
                - kind
                - hostID
                - osID
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: The instance was created.
          headers:
            Location:
              description: Contains the URI of the created instance.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
  /v1/projects/{projectName}/compute/instances/{instanceID}:
    delete:
      description: Deletes an instance, provided that the instance does not contain members.
      responses:
        "204":
          description: The instance was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
    get:
      description: Gets an instance.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: The requested instance based on its ID.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
    parameters:
      - description: The unique instance identifier.
        in: path
        name: instanceID
        required: true
        schema:
          pattern: ^inst-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates an instance.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Instance'
              properties:
                securityFeature:
                  deprecated: true
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: The instance was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
  /v1/projects/{projectName}/compute/instances/{instanceID}/invalidate:
    parameters:
      - description: The unique instance identifier.
        in: path
        name: instanceID
        required: true
        schema:
          pattern: ^inst-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Invalidates an instance by marking it as untrusted. Once invalidated, the instance will no longer be able to communicate with Edge Infrastructure Manager unless it is deleted and provisioned again.
      responses:
        "200":
          description: The instance was invalidated
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Instance
  /v1/projects/{projectName}/compute/os:
    get:
      description: Gets all OS resources' objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResourceList'
          description: Array of all OS resource objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
    post:
      description: Creates an OS resource.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: The OS resource was created.
          headers:
            Location:
              description: Contains the URI of the created OS resource.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
  /v1/projects/{projectName}/compute/os/{OSResourceID}:
    delete:
      description: Deletes an OS resource.
      responses:
        "204":
          description: The OS resource was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
    get:
      description: Gets an OS resource.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: The requested OS resource.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
    parameters:
      - description: The unique OS resource identifier.
        in: path
        name: OSResourceID
        required: true
        schema:
          pattern: ^os-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates an OS resource.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OperatingSystemResource'
              properties:
                osProvider:
                  readOnly: true
                osType:
                  readOnly: true
                profileName:
                  deprecated: true
                securityFeature:
                  deprecated: true
                sha256:
                  deprecated: true
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: The OS resource was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
    put:
      description: Updates an OS resource.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OperatingSystemResource'
              properties:
                osProvider:
                  readOnly: true
                osType:
                  readOnly: true
                profileName:
                  deprecated: true
                securityFeature:
                  deprecated: true
                sha256:
                  deprecated: true
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: The OS resource was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - OS
  /v1/projects/{projectName}/compute/schedules:
    get:
      description: Gets all schedules to operate on objects.
      parameters:
        - description: Identifies the paging unique identifier for a single page, starts index at 1.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: The region ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all schedules without a region ID as target.
          in: query
          name: regionID
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all schedules without a site ID as target.
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$|^null$
            type: string
        - description: The host ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all schedules without a host ID as target.
          in: query
          name: hostID
          schema:
            pattern: ^host-[0-9a-f]{8}$|^null$
            type: string
        - description: Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds
          in: query
          name: unix_epoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesListJoin'
          description: Arrays of all schedule objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
  /v1/projects/{projectName}/compute/workloads:
    get:
      description: Gets all workload objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          in: query
          name: kind
          schema:
            $ref: '#/components/schemas/WorkloadKind'
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadList'
          description: Array of all workload objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    post:
      description: Creates a workload object.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
          description: The workload was created.
          headers:
            Location:
              description: Contains the URI of the workload created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
  /v1/projects/{projectName}/compute/workloads/{workloadID}:
    delete:
      description: Deletes a workload, provided that the workload does not contain members.
      responses:
        "204":
          description: The workload was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    get:
      description: Gets a workload object.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
          description: The requested workload object given its ID.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    parameters:
      - description: The unique workload identifier.
        in: path
        name: workloadID
        required: true
        schema:
          pattern: ^workload-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a workload object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
          description: The workload was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    put:
      description: Updates a workload object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
          description: The workload was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
  /v1/projects/{projectName}/compute/workloads/{workloadID}/members:
    get:
      description: Gets the list of workload members.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          description: The unique workload identifier.
          in: query
          name: workload_id
          schema:
            pattern: ^workload-[0-9a-f]{8}$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique workloadID for the resource
          in: path
          name: workloadID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMemberList'
          description: The requested workload members.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    post:
      description: Adds a workload member object.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique workloadID for the resource
          in: path
          name: workloadID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: The member was added.
          headers:
            Location:
              description: Contains the URI of the workload member created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
  /v1/projects/{projectName}/compute/workloads/{workloadID}/members/{workloadMemberID}:
    delete:
      description: Removes the workload member.
      responses:
        "204":
          description: The workload member was removed.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    get:
      description: Gets the workload member based on its given ID.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: The requested workload member.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Workload
    parameters:
      - description: The unique identifier of the workload member.
        in: path
        name: workloadMemberID
        required: true
        schema:
          pattern: ^workloadmember-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique workloadID for the resource
        in: path
        name: workloadID
        required: true
        schema:
          type: string
  /v1/projects/{projectName}/deployments/clusters/{clusterId}:
    get:
      operationId: DeploymentService_ListDeploymentsPerCluster
      parameters:
        - in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: Optional. Select field and order based on which Deployment list will be sorted.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Optional. Selection criteria to list Deployments.
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. Select count of Deployment to be listed per page.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Optional. Offset is used to select the correct page from which Deployment list will be displayed. (E.g If there are 10 Deployments, page size is 2 and offset is set as 4, then the response will display Deployment 5 and 6.)
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsPerClusterResponse'
          description: OK
      summary: ListDeploymentsPerCluster
      tags:
        - DeploymentService
  /v1/projects/{projectName}/localAccounts:
    get:
      description: Gets all local account objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountList'
          description: Array of all local account objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - LocalAccount
    post:
      description: Create a Local account instance
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalAccount'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccount'
          description: Local account created successfully.
          headers:
            Location:
              description: Contains the URI of the created Local account resource.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - LocalAccount
  /v1/projects/{projectName}/localAccounts/{localAccountID}:
    delete:
      description: Delete a local account object by ID.
      responses:
        "204":
          description: The locallaccount was removed.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - LocalAccount
    get:
      description: Get a local account object by ID.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccount'
          description: Local account object.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - LocalAccount
    parameters:
      - description: The unique identifier of the local account.
        in: path
        name: localAccountID
        required: true
        schema:
          pattern: ^localaccount-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v1/projects/{projectName}/locations:
    get:
      description: Gets a list of location node objects.
      parameters:
        - description: The name of the resource to be queried; it can be a region and/or site name, if the query parameters below are stated.
          in: query
          name: name
          schema:
            maxLength: 20
            pattern: '^[a-zA-Z-_0-9./: ]+$'
            type: string
        - description: Indicates if the filter will be applied on the site resources.
          in: query
          name: showSites
          schema:
            type: boolean
        - description: Indicates if the filter will be applied on the region resources.
          in: query
          name: showRegions
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationNodeList'
          description: Array of the location node objects containing the resources that match the query name parameter. For each type of location, the maximum amount of resources to be returned is 20.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Location
  /v1/projects/{projectName}/metadata:
    delete:
      description: Delete deletes the specified metadata, returning the newly updated set.
      operationId: MetadataService_Delete
      parameters:
        - in: query
          name: key
          schema:
            type: string
        - in: query
          name: value
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
    get:
      description: GetMetadata retrieves the most recently udpates set.
      operationId: MetadataService_GetMetadata
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
    post:
      description: CreateOrUpdateMetadata creates or updates the specified metadata, returning the newly updates set.
      operationId: MetadataService_CreateOrUpdateMetadata
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataList'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
          description: OK
      tags:
        - MetadataService
  /v1/projects/{projectName}/providers:
    get:
      description: Gets all provider objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderList'
          description: Array of all provider objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Provider
    post:
      description: Creates a provider resource.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          description: The provider resource was created.
          headers:
            Location:
              description: Contains the URI of the created provider resource.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Provider
  /v1/projects/{projectName}/providers/{providerID}:
    delete:
      description: Deletes a provider resource.
      responses:
        "204":
          description: The provider resource was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Provider
    get:
      description: Gets a provider resource.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          description: The requested provider resource.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Provider
    parameters:
      - description: The provider resource's unique identifier.
        in: path
        name: providerID
        required: true
        schema:
          pattern: ^provider-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v1/projects/{projectName}/regions:
    get:
      description: Gets all region objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
          examples:
            example1:
              summary: Through the region's parent region ID.
              value: parentRegion.resourceId="region-3b382a11"
            example2:
              summary: Through the region name.
              value: name="region name example"
            example3:
              summary: Through the metadata.
              value: metadata='{"key":"exampleKey","value":"exampleValue"}'
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          description: The parent region ID that the region belongs to. If not specified, returns all regions. If specified, returns the regions that have the specified parent applied to them. If null, returns all the regions without a parent.
          in: query
          name: parent
          schema:
            pattern: ^region-[0-9a-f]{8}$|^null$
            type: string
        - description: Indicates if the region identified by the filter needs to be returned with the field totalSites filled.
          in: query
          name: showTotalSites
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsList'
          description: Array of all region objects.
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Region
    post:
      description: Creates a region.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: The region was created.
          headers:
            Location:
              description: Contains the URI of the created region.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - Region
  /v1/projects/{projectName}/regions/{regionID}:
    delete:
      description: Deletes a region.
      responses:
        "204":
          description: The region was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Region
    get:
      description: Gets a region.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: The requested region.
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - Region
    parameters:
      - description: The unique region identifier
        in: path
        name: regionID
        required: true
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a region.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: The region was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - Region
    put:
      description: Updates a region.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: The region was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - Region
  /v1/projects/{projectName}/regions/{regionID}/sites:
    get:
      description: Gets all site objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
          examples:
            example1:
              summary: Through site's region ID
              value: region.resourceId="region-3b382a11"
            example2:
              summary: Through site name
              value: name="site name example"
            example3:
              summary: Through metadata
              value: metadata='{"key":"exampleKey","value":"exampleValue"}'
          in: query
          name: filter
          schema:
            pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$
            type: string
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - deprecated: true
          description: The region ID that the sites belong to. If not specified, returns all sites (given the other query params). If specified, returns the sites that have the specified region ID applied to them. If null, returns all sites without a region ID.
          in: path
          name: regionID
          required: true
          schema:
            pattern: ^region-[0-9a-f]{8}$|^null$
            type: string
        - deprecated: true
          description: The OUID that the sites belong to. If not specified, returns all sites (given the other query parameters). If specified, returns the sites that have the specified OUID applied to them. If null, returns all sites without an OUID.
          in: query
          name: ouID
          schema:
            pattern: ^ou-[0-9a-f]{8}$|^null$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitesList'
          description: Array of all site objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
    post:
      description: Creates a site.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique regionID for the resource
          in: path
          name: regionID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: The site was created.
          headers:
            Location:
              description: Contains the URI of the created site.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
  /v1/projects/{projectName}/regions/{regionID}/sites/{siteID}:
    delete:
      description: Delete a site
      responses:
        "204":
          description: The site was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
    get:
      description: Gets a site.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: The requested site.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
    parameters:
      - description: The unique site identifier.
        in: path
        name: siteID
        required: true
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique regionID for the resource
        in: path
        name: regionID
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a site.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: The site was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
    put:
      description: Updates a site.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: The site was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Site
  /v1/projects/{projectName}/resource/endpoints/applications/{appId}/clusters/{clusterId}:
    get:
      description: Gets a list of all endpoints for an application of a deployment in a cluster.
      operationId: EndpointsService_ListAppEndpoints
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppEndpointsResponse'
          description: OK
      summary: ListAppEndpoints
      tags:
        - EndpointsService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}:
    get:
      description: Gets a list of all workloads for an application of a deployment in a cluster.
      operationId: AppWorkloadService_ListAppWorkloads
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppWorkloadsResponse'
          description: OK
      summary: ListAppWorkloads
      tags:
        - AppWorkloadService
  ? /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/restart
  : put:
      description: Restarts a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_RestartVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartVirtualMachineResponse'
          description: OK
      summary: RestartVirtualMachine
      tags:
        - VirtualMachineService
  ? /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/start
  : put:
      description: Starts a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_StartVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVirtualMachineResponse'
          description: OK
      summary: StartVirtualMachine
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/stop:
    put:
      description: Stops a virtual machine for an application of a deployment in a cluster.
      operationId: VirtualMachineService_StopVirtualMachine
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopVirtualMachineResponse'
          description: OK
      summary: StopVirtualMachine
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/applications/{appId}/clusters/{clusterId}/virtual-machines/{virtualMachineId}/vnc:
    get:
      description: Accesses the VNC console to access a virtual machine.
      operationId: VirtualMachineService_GetVNC
      parameters:
        - description: Application ID
          in: path
          name: appId
          required: true
          schema:
            type: string
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Virtual machine ID
          in: path
          name: virtualMachineId
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVNCResponse'
          description: OK
      summary: GetVNC
      tags:
        - VirtualMachineService
  /v1/projects/{projectName}/resource/workloads/pods/clusters/{clusterId}/namespaces/{namespace}/pods/{podName}/delete:
    put:
      description: Deletes the pod for an application in a cluster.
      operationId: PodService_DeletePod
      parameters:
        - description: Cluster ID
          in: path
          name: clusterId
          required: true
          schema:
            type: string
        - description: Namespace that the pod is running on.
          in: path
          name: namespace
          required: true
          schema:
            type: string
        - description: Name of the pod.
          in: path
          name: podName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePodResponse'
          description: OK
      summary: DeletePod
      tags:
        - PodService
  /v1/projects/{projectName}/schedules/repeated:
    get:
      description: Gets all repeated schedule objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: The region ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all repeated schedules without a region ID as target.
          in: query
          name: regionID
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all repeated schedules without a site ID as target.
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$|^null$
            type: string
        - description: The host ID target of the repeated schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all repeated schedules without a host ID as target.
          in: query
          name: hostID
          schema:
            pattern: ^host-[0-9a-f]{8}$|^null$
            type: string
        - description: Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.
          in: query
          name: unix_epoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedulesList'
          description: Arrays of all repeated schedule objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    post:
      description: Creates a repeated schedule.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
          description: The repeated schedule was created.
          headers:
            Location:
              description: Contains the URI of the repeated schedule created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
  /v1/projects/{projectName}/schedules/repeated/{repeatedScheduleID}:
    delete:
      description: Deletes a repeated schedule.
      responses:
        "204":
          description: The repeated schedule was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    get:
      description: Gets a repeated schedule.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
          description: The requested repeated schedule.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    parameters:
      - description: The unique repeated schedule identifier.
        in: path
        name: repeatedScheduleID
        required: true
        schema:
          pattern: ^repeatedsche-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a repeated schedule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
          description: The repeated schedule was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    put:
      description: Updates a repeated schedule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
          description: The repeated schedule was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
  /v1/projects/{projectName}/schedules/single:
    get:
      description: Gets all single schedule objects.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: The region ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all single schedules without a region ID as target.
          in: query
          name: regionID
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: The site ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all single schedules without a site ID as target.
          in: query
          name: siteID
          schema:
            pattern: ^site-[0-9a-f]{8}$|^null$
            type: string
        - description: The host ID target of the single schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all single schedules without a host ID as target.
          in: query
          name: hostID
          schema:
            pattern: ^host-[0-9a-f]{8}$|^null$
            type: string
        - description: Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds
          in: query
          name: unix_epoch
          schema:
            pattern: ^[0-9]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedulesList'
          description: Arrays of all single schedule objects.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    post:
      description: Creates a single schedule to operate on an object.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
          description: The single schedule was created.
          headers:
            Location:
              description: Contains the URI of the created single schedule.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
  /v1/projects/{projectName}/schedules/single/{singleScheduleID}:
    delete:
      description: Deletes a single schedule.
      responses:
        "204":
          description: The single schedule was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    get:
      description: Gets a single schedule based on its ID.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
          description: The requested single schedule.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    parameters:
      - description: The unique single schedule identifier.
        in: path
        name: singleScheduleID
        required: true
        schema:
          pattern: ^singlesche-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a single schedule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
          description: The single schedule was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
    put:
      description: Updates a single schedule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
          description: The single schedule was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - Schedule
  /v1/projects/{projectName}/summary/deployments_status:
    get:
      description: Gets all deployment clusters count status.
      operationId: DeploymentService_GetDeploymentsStatus
      parameters:
        - description: Optional. A string array that filters cluster labels to be displayed ie color=blue,customer=intel-corp. Labels separated by a comma.
          in: query
          name: labels
          schema:
            items:
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentsStatusResponse'
          description: OK
      summary: GetDeploymentsStatus
      tags:
        - DeploymentService
  /v1/projects/{projectName}/telemetry/loggroups:
    get:
      description: Gets all telemetry log groups.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupList'
          description: Array of all telemetry log groups.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsGroup
    post:
      description: Creates a telemetry log group.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsGroup'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroup'
          description: The telemetry log group was created.
          headers:
            Location:
              description: Contains the URI of the telemetry log group created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - TelemetryLogsGroup
  /v1/projects/{projectName}/telemetry/loggroups/{telemetryLogsGroupId}:
    delete:
      description: Deletes a telemetry log group.
      responses:
        "204":
          description: The telemetry log group was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsGroup
    get:
      description: Gets a telemetry log group.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroup'
          description: The requested telemetry log group.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsGroup
    parameters:
      - description: The unique telemetry group resource identifier.
        in: path
        name: telemetryLogsGroupId
        required: true
        schema:
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v1/projects/{projectName}/telemetry/loggroups/{telemetryLogsGroupId}/logprofiles:
    get:
      description: Gets all telemetry log profiles.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Returns only the telemetry profiles that are assigned with the given site ID.
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given region ID.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given instance identifier.
          in: query
          name: instanceId
          schema:
            pattern: ^inst-[0-9a-f]{8}$
            type: string
        - description: Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.
          in: query
          name: showInherited
          schema:
            type: boolean
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique telemetryLogsGroupId for the resource
          in: path
          name: telemetryLogsGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileList'
          description: Array of all telemetry log profiles.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
    post:
      description: Creates a telemetry log profile.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique telemetryLogsGroupId for the resource
          in: path
          name: telemetryLogsGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
          description: The telemetry profile was created.
          headers:
            Location:
              description: Contains the URI of the telemetry log profile created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
  /v1/projects/{projectName}/telemetry/loggroups/{telemetryLogsGroupId}/logprofiles/{telemetryLogsProfileId}:
    delete:
      description: Deletes a telemetry log profile.
      responses:
        "204":
          description: The telemetry log profile was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
    get:
      description: Gets a telemetry log profile.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
          description: The requested telemetry log profile.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
    parameters:
      - description: The unique telemetry profile identifier.
        in: path
        name: telemetryLogsProfileId
        required: true
        schema:
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique telemetryLogsGroupId for the resource
        in: path
        name: telemetryLogsGroupId
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a telemetry log profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
          description: The telemetry log profile was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
    put:
      description: Updates a telemetry log profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
          description: The telemetry log profile was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryLogsProfile
  /v1/projects/{projectName}/telemetry/metricgroups:
    get:
      description: Gets all telemetry metric groups.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupList'
          description: Array of all telemetry metric groups.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsGroup
    post:
      description: Creates a telemetry metric group.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsGroup'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroup'
          description: The telemetry metric group was created.
          headers:
            Location:
              description: Contains the URI of the telemetry metric group created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - TelemetryMetricsGroup
  /v1/projects/{projectName}/telemetry/metricgroups/{telemetryMetricsGroupId}:
    delete:
      description: Deletes a telemetry metric group.
      responses:
        "204":
          description: The telemetry metric group was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsGroup
    get:
      description: Gets a telemetry metric group.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroup'
          description: The requested telemetry metric group.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsGroup
    parameters:
      - description: The unique telemetry group resource identifier.
        in: path
        name: telemetryMetricsGroupId
        required: true
        schema:
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v1/projects/{projectName}/telemetry/metricgroups/{telemetryMetricsGroupId}/metricprofiles:
    get:
      description: Gets all telemetry metric profiles.
      parameters:
        - description: Index of the first item to return. This allows skipping of items.
          in: query
          name: offset
          schema:
            default: 0
            maximum: 10000
            minimum: 0
            type: integer
        - description: Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 1
            type: integer
        - description: Returns only the telemetry profiles that are assigned with the given site ID.
          in: query
          name: siteId
          schema:
            pattern: ^site-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given region ID.
          in: query
          name: regionId
          schema:
            pattern: ^region-[0-9a-f]{8}$
            type: string
        - description: Returns only the telemetry profiles that are assigned with the given instance identifier.
          in: query
          name: instanceId
          schema:
            pattern: ^inst-[0-9a-f]{8}$
            type: string
        - description: Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is only used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.
          in: query
          name: showInherited
          schema:
            type: boolean
        - description: Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
          in: query
          name: orderBy
          schema:
            pattern: ^$|^[a-zA-Z-_0-9., ]+$
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique telemetryMetricsGroupId for the resource
          in: path
          name: telemetryMetricsGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileList'
          description: Array of all telemetry metric profiles.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsProfile
    post:
      description: Creates a telemetry metric profile.
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
        - description: unique telemetryMetricsGroupId for the resource
          in: path
          name: telemetryMetricsGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
          description: The telemetry profile was created.
          headers:
            Location:
              description: Contains the URI of the telemetry profile created.
              required: true
              schema:
                type: string
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsProfile
  /v1/projects/{projectName}/telemetry/metricgroups/{telemetryMetricsGroupId}/metricprofiles/{telemetryMetricsProfileId}:
    delete:
      description: Deletes a telemetry metric profile.
      responses:
        "204":
          description: The telemetry metric profile was deleted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsProfile
    get:
      description: Gets a telemetry metric profile.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
          description: The requested telemetry metric profile.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsProfile
    parameters:
      - description: The unique telemetry profile identifier.
        in: path
        name: telemetryMetricsProfileId
        required: true
        schema:
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique telemetryMetricsGroupId for the resource
        in: path
        name: telemetryMetricsGroupId
        required: true
        schema:
          type: string
    patch:
      description: Partially updates a telemetry metric profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
          description: The telemetry metric profile was patched.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
      tags:
        - TelemetryMetricsProfile
    put:
      description: Updates a telemetry metric profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
          description: The telemetry metric profile was updated.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "403":
          $ref: '#/components/responses/403-Forbidden'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "406":
          $ref: '#/components/responses/406-NotAcceptable'
        "408":
          $ref: '#/components/responses/408-Timeout'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "412":
          $ref: '#/components/responses/412-PreconditionFailed'
        "422":
          $ref: '#/components/responses/422-UnprocessableEntity'
        "429":
          $ref: '#/components/responses/429-TooManyRequests'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-Unimplemented'
        "503":
          $ref: '#/components/responses/503-ServiceUnavailable'
      tags:
        - TelemetryMetricsProfile
  /v1/projects/{projectName}/ui_extensions:
    get:
      description: Gets a list of all UIExtensions.
      operationId: DeploymentService_ListUIExtensions
      parameters:
        - description: Optional. A string array that filters service names to be displayed. Service names separated by a comma.
          in: query
          name: serviceName
          schema:
            items:
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUIExtensionsResponse'
          description: OK
      summary: ListUIExtensions
      tags:
        - DeploymentService
  /v1/status:
    get:
      description: Gets runtime status of the service
      operationId: getServiceStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: The runtime status of the service is retrieved successfully
      tags:
        - service
  /v2/projects/{projectName}/clusters:
    get:
      description: Gets all clusters' information.
      parameters:
        - description: The maximum number of items to return.
          example: /v2/clusters?pageSize=20
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 0
            type: integer
        - description: Index of the first item to return. It is almost always used in conjunction with the 'pageSize' query.
          example: /v2/clusters?pageSize=20&offset=10
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: The ordering of the entries. "asc" and "desc" are valid values. If none is specified, "asc" is used.
          examples:
            ascending:
              description: sort the entries by name entry in ascending order
              value: /v2/clusters?orderBy="name asc"
            default:
              description: Sorts the entries by name in ascending order as default when no order is specified.
              value: /v2/clusters?orderBy="name"
            descending:
              description: sort the entries by name entry in descending order
              value: /v2/clusters?orderBy="name desc"
          in: query
          name: orderBy
          schema:
            type: string
        - description: Filters the entries based on the filter provided.
          examples:
            multiple_filter:
              description: filter by cluster name with the prefix "foo" or with Kubernetes software v1.27.5.
              value: /v2/clusters?filter="name=foo* OR kubernetes_version=v2.27.5"
            single_filter_with_search_prefix:
              description: filter clusters whose cluster prefix has foo
              value: /v2/clusters?filter="name=foo*"
            single_filter_without_search_prefix:
              description: Filter by the cluster name "foo".
              value: /v2/clusters?filter="name=foo"
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  clusters:
                    items:
                      $ref: '#/components/schemas/ClusterInfo'
                    type: array
                  totalElements:
                    description: The count of items in the entire list, regardless of pagination.
                    format: int32
                    type: integer
                required:
                  - totalElements
                type: object
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    post:
      description: Creates a cluster.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterSpec'
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}:
    delete:
      description: Deletes the cluster {name}.
      responses:
        "204":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    get:
      description: Gets the cluster {name} information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDetailInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/kubeconfigs:
    get:
      description: Gets the cluster's kubeconfig file by its name {name}.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubeconfigInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "401":
          $ref: '#/components/responses/401-Unauthorized'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Kubeconfigs
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z-_0-9. ]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/labels:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates cluster {name} labels.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLabels'
        required: true
      responses:
        "200":
          description: The cluster labels are updated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}/nodes:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates cluster {name} nodes.
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/NodeSpec'
              type: array
      responses:
        "200":
          description: The cluster nodes are updated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{name}/nodes/{nodeId}:
    delete:
      description: Deletes the cluster {name} node {nodeId}.
      responses:
        "200":
          description: The cluster node is operated successfully.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - example: 64e797f6-db22-445e-b606-4228d4f1c2bd
        in: path
        name: nodeId
        required: true
        schema:
          pattern: ^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$
          type: string
      - description: When set to true, force deletes the edge node.
        example: /v2/clusters/{name}/nodes/{nodeId}?force=true
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/{name}/template:
    parameters:
      - example: ""
        in: path
        name: name
        required: true
        schema:
          maxLength: 63
          minLength: 1
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates the cluster {name} template.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterTemplateInfo'
      responses:
        "202":
          description: The cluster template update request is accepted.
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
        "501":
          $ref: '#/components/responses/501-NotImplemented'
      tags:
        - Clusters
  /v2/projects/{projectName}/clusters/{nodeId}/clusterdetail:
    get:
      description: Gets cluster detailed information by {nodeId}.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDetailInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
      tags:
        - Clusters
    parameters:
      - example: 64e797f6-db22-445e-b606-4228d4f1c2bd
        in: path
        name: nodeId
        required: true
        schema:
          pattern: ^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/clusters/summary:
    get:
      description: Gets all clusters' summarized by their state.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSummary'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Clusters
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/templates:
    get:
      description: Gets all templates' information
      parameters:
        - description: When set to true, gets only the default template information
          example: /v2/templates?default=true
          in: query
          name: default
          schema:
            default: false
            type: boolean
        - description: The maximum number of items to return.
          example: /v2/templates?pageSize=20
          in: query
          name: pageSize
          schema:
            default: 20
            maximum: 100
            minimum: 0
            type: integer
        - description: Index of the first item to return. It is almost always used in conjunction with the 'pageSize' query.
          example: /v2/templates?pageSize=20&offset=10
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: The ordering of the entries. "asc" and "desc" are valid values. If none is specified, "asc" is used.
          examples:
            ascending:
              description: sort the entries by name entry in ascending order
              value: /v2/templates?orderBy="name asc"
            default:
              description: Sorts the entries by name in ascending order as default when no order is specified.
              value: /v2/templates?orderBy="name"
            descending:
              description: sort the entries by name entry in descending order
              value: /v2/templates?orderBy="name desc"
          in: query
          name: orderBy
          schema:
            type: string
        - description: Filters the entries based on the filter provided.
          examples:
            multiple_filter:
              description: filter by template name with the prefix "foo" or with version v0.0.23
              value: /v2/templates?filter="name=foo* OR version=v0.0.23"
            single_filter_with_search_prefix:
              description: filter templates whose template prefix has foo
              value: /v2/templates?filter="name=foo*"
            single_filter_without_search_prefix:
              description: Filter by the template name "foo".
              value: /v2/templates?filter="name=foo"
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateInfoList'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    post:
      description: Import templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateInfo'
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "409":
          $ref: '#/components/responses/409-Conflict'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
  /v2/projects/{projectName}/templates/{name}/default:
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
    put:
      description: Updates this template as the default template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultTemplateInfo'
      responses:
        "200":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
  /v2/projects/{projectName}/templates/{name}/versions:
    get:
      description: Gets all versions of templates matching a particular template name
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionList'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v2/projects/{projectName}/templates/{name}/versions/{version}:
    delete:
      description: Deletes a specific template
      responses:
        "204":
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    get:
      description: Gets a specific template information
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateInfo'
          description: OK
        "400":
          $ref: '#/components/responses/400-BadRequest'
        "404":
          $ref: '#/components/responses/404-NotFound'
        "500":
          $ref: '#/components/responses/500-InternalServerError'
      tags:
        - Cluster Templates
    parameters:
      - description: Name of the template
        example: baseline
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          type: string
      - description: Version of the template in the format of 'vX.Y.Z'
        example: v0.1.0
        in: path
        name: version
        required: true
        schema:
          pattern: ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
  /v3/projects/{projectName}/catalog/applications:
    get:
      description: Gets a list of applications.
      operationId: CatalogService_ListApplications
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: List of application kinds to be returned; empty list means all kinds.
          in: query
          name: kinds
          schema:
            items:
              enum:
                - KIND_NORMAL
                - KIND_EXTENSION
                - KIND_ADDON
              format: enum
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationsResponse'
          description: OK
      summary: ListApplications
      tags:
        - CatalogService
    post:
      description: Creates a new application.
      operationId: CatalogService_CreateApplication
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
          description: OK
      summary: CreateApplication
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions:
    get:
      description: Gets all versions of a named application.
      operationId: CatalogService_GetApplicationVersions
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationVersionsResponse'
          description: OK
      summary: GetApplicationVersions
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions/{version}:
    delete:
      description: Deletes an application.
      operationId: CatalogService_DeleteApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteApplication
      tags:
        - CatalogService
    get:
      description: Gets a specific application.
      operationId: CatalogService_GetApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationResponse'
          description: OK
      summary: GetApplication
      tags:
        - CatalogService
    put:
      description: Updates an application.
      operationId: CatalogService_UpdateApplication
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateApplication
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/applications/{applicationName}/versions/{version}/reference_count:
    get:
      description: Gets application reference count - the number of deployment packages using this application.
      operationId: CatalogService_GetApplicationReferenceCount
      parameters:
        - description: Name of the application.
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - description: Version of the application.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationReferenceCountResponse'
          description: OK
      summary: GetApplicationReferenceCount
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/artifacts:
    get:
      description: Gets a list of artifacts.
      operationId: CatalogService_ListArtifacts
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
          description: OK
      summary: ListArtifacts
      tags:
        - CatalogService
    post:
      description: Creates a new artifact.
      operationId: CatalogService_CreateArtifact
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArtifactResponse'
          description: OK
      summary: CreateArtifact
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/artifacts/{artifactName}:
    delete:
      description: Deletes an artifact.
      operationId: CatalogService_DeleteArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteArtifact
      tags:
        - CatalogService
    get:
      description: Gets a specific artifact.
      operationId: CatalogService_GetArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtifactResponse'
          description: OK
      summary: GetArtifact
      tags:
        - CatalogService
    put:
      description: Updates an artifact.
      operationId: CatalogService_UpdateArtifact
      parameters:
        - description: Name of the artifact.
          in: path
          name: artifactName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateArtifact
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/charts:
    get:
      description: Gets a list of registry chart names of chart versions.
      operationId: CatalogService_GetRegistryCharts
      parameters:
        - description: Names the HELM registry to be queried
          in: query
          name: registry
          schema:
            type: string
        - description: Optional name of the chart whose version list is desired.
          in: query
          name: chart
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: GetRegistryCharts
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages:
    get:
      description: Gets a list of deployment packages.
      operationId: CatalogService_ListDeploymentPackages
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: List of deployment package kinds to be returned; empty list means all kinds.
          in: query
          name: kinds
          schema:
            items:
              enum:
                - KIND_NORMAL
                - KIND_EXTENSION
                - KIND_ADDON
              format: enum
              type: string
            type: array
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentPackagesResponse'
          description: OK
      summary: ListDeploymentPackages
      tags:
        - CatalogService
    post:
      description: Creates a new deployment package.
      operationId: CatalogService_CreateDeploymentPackage
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentPackage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentPackageResponse'
          description: OK
      summary: CreateDeploymentPackage
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages/{deploymentPackageName}/versions:
    get:
      description: Gets all versions of a named deployment package.
      operationId: CatalogService_GetDeploymentPackageVersions
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentPackageVersionsResponse'
          description: OK
      summary: GetDeploymentPackageVersions
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/deployment_packages/{deploymentPackageName}/versions/{version}:
    delete:
      description: Deletes a deployment package.
      operationId: CatalogService_DeleteDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteDeploymentPackage
      tags:
        - CatalogService
    get:
      description: Gets a specific deployment package.
      operationId: CatalogService_GetDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentPackageResponse'
          description: OK
      summary: GetDeploymentPackage
      tags:
        - CatalogService
    put:
      description: Updates a deployment package.
      operationId: CatalogService_UpdateDeploymentPackage
      parameters:
        - description: Name of the DeploymentPackage.
          in: path
          name: deploymentPackageName
          required: true
          schema:
            type: string
        - description: Version of the DeploymentPackage.
          in: path
          name: version
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentPackage'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateDeploymentPackage
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/registries:
    get:
      description: Gets a list of registries.
      operationId: CatalogService_ListRegistries
      parameters:
        - description: Names the field to be used for ordering the returned results.
          in: query
          name: orderBy
          schema:
            type: string
        - description: Expression to use for filtering the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Maximum number of items to return.
          in: query
          name: pageSize
          schema:
            format: int32
            type: integer
        - description: Index of the first item to return.
          in: query
          name: offset
          schema:
            format: int32
            type: integer
        - description: Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
          in: query
          name: showSensitiveInfo
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegistriesResponse'
          description: OK
      summary: ListRegistries
      tags:
        - CatalogService
    post:
      description: Creates a new registry.
      operationId: CatalogService_CreateRegistry
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRegistryResponse'
          description: OK
      summary: CreateRegistry
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/registries/{registryName}:
    delete:
      description: Deletes a registry.
      operationId: CatalogService_DeleteRegistry
      parameters:
        - description: Name of the registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      summary: DeleteRegistry
      tags:
        - CatalogService
    get:
      description: Gets a specific registry.
      operationId: CatalogService_GetRegistry
      parameters:
        - description: Name of the registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: Request that sensitive information, such as username, auth_token, and CA certificates are included in the response.
          in: query
          name: showSensitiveInfo
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryResponse'
          description: OK
      summary: GetRegistry
      tags:
        - CatalogService
    put:
      description: Updates a registry.
      operationId: CatalogService_UpdateRegistry
      parameters:
        - description: Name of the Registry.
          in: path
          name: registryName
          required: true
          schema:
            type: string
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "200":
          description: OK
      summary: UpdateRegistry
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/upload:
    post:
      description: Allows uploading of a YAML files containing various application catalog entities.
      operationId: CatalogService_BulkCatalogUpload
      parameters:
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  items:
                    format: binary
                    type: string
                  type: array
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    errorMessages:
                      items:
                        type: string
                      type: array
                    sessionID:
                      type: string
                    uploadNumber:
                      type: integer
                  type: object
                type: array
          description: OK
      summary: BulkCatalogUpload
      tags:
        - CatalogService
  /v3/projects/{projectName}/catalog/uploads:
    post:
      description: |-
        Allows uploading of a YAML file containing various application catalog entities. Multiple RPC invocations
         tagged with the same upload session ID can be used to upload multiple files and to create or update several
         catalog entities as a single transaction.
      operationId: CatalogService_UploadCatalogEntities
      parameters:
        - description: First upload request in the batch must not specify session ID. Subsequent upload requests must copy the session ID from the previously issued response.
          in: query
          name: sessionId
          schema:
            type: string
        - description: 'Deprecated: Upload number must increase sequentially, starting with 1.'
          in: query
          name: uploadNumber
          schema:
            format: uint32
            type: integer
        - description: Must be set to 'true' to perform load of all entity files uploaded as part of this session.
          in: query
          name: lastUpload
          schema:
            type: boolean
        - description: unique projectName for the resource
          in: path
          name: projectName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadCatalogEntitiesResponse'
          description: OK
      summary: UploadCatalogEntities
      tags:
        - CatalogService
security:
  - BearerAuth: []
servers:
  - url: '{apiRoot}'
    variables:
      apiRoot:
        default: https://<multitenancy-gateway-host>
tags:
  - name: CatalogService
